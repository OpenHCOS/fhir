// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/stu3/uscore_codes.proto

package google_fhir_stu3_uscore

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Primitive value for code
type UsCoreBirthSexCode_Value int32

const (
	UsCoreBirthSexCode_INVALID_UNINITIALIZED UsCoreBirthSexCode_Value = 0
	UsCoreBirthSexCode_FEMALE                UsCoreBirthSexCode_Value = 1
	UsCoreBirthSexCode_MALE                  UsCoreBirthSexCode_Value = 2
	UsCoreBirthSexCode_UNKNOWN               UsCoreBirthSexCode_Value = 3
)

var UsCoreBirthSexCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "FEMALE",
	2: "MALE",
	3: "UNKNOWN",
}

var UsCoreBirthSexCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"FEMALE":                1,
	"MALE":                  2,
	"UNKNOWN":               3,
}

func (x UsCoreBirthSexCode_Value) String() string {
	return proto.EnumName(UsCoreBirthSexCode_Value_name, int32(x))
}

func (UsCoreBirthSexCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b707ac72953972d8, []int{0, 0}
}

// A type defined by US Core for Birthsex
// http://hl7.org/fhir/us/core/ValueSet/us-core-birthsex
type UsCoreBirthSexCode struct {
	Value UsCoreBirthSexCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.uscore.UsCoreBirthSexCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UsCoreBirthSexCode) Reset()         { *m = UsCoreBirthSexCode{} }
func (m *UsCoreBirthSexCode) String() string { return proto.CompactTextString(m) }
func (*UsCoreBirthSexCode) ProtoMessage()    {}
func (*UsCoreBirthSexCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b707ac72953972d8, []int{0}
}

func (m *UsCoreBirthSexCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsCoreBirthSexCode.Unmarshal(m, b)
}
func (m *UsCoreBirthSexCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsCoreBirthSexCode.Marshal(b, m, deterministic)
}
func (m *UsCoreBirthSexCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsCoreBirthSexCode.Merge(m, src)
}
func (m *UsCoreBirthSexCode) XXX_Size() int {
	return xxx_messageInfo_UsCoreBirthSexCode.Size(m)
}
func (m *UsCoreBirthSexCode) XXX_DiscardUnknown() {
	xxx_messageInfo_UsCoreBirthSexCode.DiscardUnknown(m)
}

var xxx_messageInfo_UsCoreBirthSexCode proto.InternalMessageInfo

func (m *UsCoreBirthSexCode) GetValue() UsCoreBirthSexCode_Value {
	if m != nil {
		return m.Value
	}
	return UsCoreBirthSexCode_INVALID_UNINITIALIZED
}

func (m *UsCoreBirthSexCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UsCoreBirthSexCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.fhir.stu3.uscore.UsCoreBirthSexCode_Value", UsCoreBirthSexCode_Value_name, UsCoreBirthSexCode_Value_value)
	proto.RegisterType((*UsCoreBirthSexCode)(nil), "google.fhir.stu3.uscore.UsCoreBirthSexCode")
}

func init() { proto.RegisterFile("proto/stu3/uscore_codes.proto", fileDescriptor_b707ac72953972d8) }

var fileDescriptor_b707ac72953972d8 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4f, 0xfa, 0x40,
	0x1c, 0xc6, 0x7f, 0x6d, 0x7f, 0x85, 0x70, 0x24, 0x06, 0xcf, 0xa8, 0x58, 0xff, 0x21, 0x13, 0x0b,
	0x77, 0x11, 0x62, 0x4c, 0x58, 0x4c, 0x81, 0x62, 0x1a, 0xa0, 0x1a, 0xb0, 0x98, 0xb8, 0x90, 0x42,
	0xcf, 0xb6, 0x09, 0xf6, 0x48, 0xef, 0x6a, 0x70, 0x76, 0xf3, 0x05, 0xb8, 0xfa, 0x1e, 0x18, 0x1c,
	0x74, 0xf1, 0xbd, 0xf8, 0x1a, 0x1c, 0xdc, 0x4c, 0x8b, 0x44, 0x12, 0xc2, 0xfa, 0xe9, 0xf3, 0xf9,
	0xf6, 0xb9, 0x07, 0xec, 0x8f, 0x03, 0xca, 0x29, 0x66, 0x3c, 0x2c, 0xe3, 0x90, 0x0d, 0x69, 0x40,
	0xfa, 0x43, 0x6a, 0x13, 0x86, 0x62, 0x0e, 0xb7, 0x1d, 0x4a, 0x9d, 0x11, 0x41, 0xb7, 0xae, 0x17,
	0xa0, 0x28, 0x84, 0x66, 0x21, 0x65, 0x6f, 0xc1, 0xb3, 0x7c, 0x9f, 0x72, 0x8b, 0x7b, 0xd4, 0xff,
	0xd5, 0x14, 0x65, 0xe1, 0xab, 0x6d, 0x71, 0x8b, 0x3f, 0x8c, 0xe7, 0x27, 0xf3, 0x5f, 0x22, 0x80,
	0x26, 0xab, 0xd1, 0x80, 0x54, 0xbd, 0x80, 0xbb, 0x5d, 0x32, 0xa9, 0x51, 0x9b, 0xc0, 0x73, 0x20,
	0xdf, 0x5b, 0xa3, 0x90, 0x64, 0x85, 0x9c, 0x50, 0x58, 0x2b, 0x1d, 0xa3, 0x15, 0x7f, 0x46, 0xcb,
	0x2e, 0xea, 0x45, 0x62, 0x67, 0xe6, 0x43, 0x04, 0x44, 0xcf, 0xce, 0x8a, 0x39, 0xa1, 0x90, 0x2e,
	0x1d, 0x2c, 0x5f, 0x89, 0x4b, 0xa0, 0x2e, 0x0f, 0x3c, 0xdf, 0xe9, 0x88, 0x9e, 0x0d, 0xcf, 0x40,
	0x8a, 0x4c, 0x38, 0xf1, 0x99, 0x47, 0xfd, 0xac, 0x94, 0x93, 0x0a, 0xe9, 0xd2, 0xd1, 0x2a, 0x4d,
	0x9b, 0x07, 0x3b, 0x7f, 0x4e, 0x7e, 0x00, 0xe4, 0xb8, 0x00, 0xdc, 0x01, 0x9b, 0xba, 0xd1, 0x53,
	0x5b, 0x7a, 0xbd, 0x6f, 0x1a, 0xba, 0xa1, 0x5f, 0xe9, 0x6a, 0x4b, 0xbf, 0xd1, 0xea, 0x99, 0x7f,
	0x70, 0x03, 0x24, 0x1a, 0x5a, 0x5b, 0x6d, 0x69, 0x19, 0x41, 0x49, 0xbe, 0x3d, 0xbf, 0x4f, 0x65,
	0xa1, 0x01, 0xd7, 0xc1, 0xff, 0x18, 0x89, 0x73, 0xd4, 0x86, 0x5b, 0x20, 0x69, 0x1a, 0x4d, 0xe3,
	0xe2, 0xda, 0xc8, 0x48, 0x4a, 0x2a, 0xa6, 0x92, 0x69, 0x34, 0x2b, 0xea, 0xd3, 0xf7, 0xe3, 0x54,
	0x3e, 0x71, 0x39, 0x1f, 0x57, 0x30, 0x76, 0x47, 0xa7, 0x88, 0x06, 0x0e, 0x8e, 0xea, 0xe1, 0x90,
	0xe1, 0x68, 0x17, 0x1c, 0x77, 0xe8, 0x12, 0x8e, 0x43, 0x56, 0x8c, 0x40, 0x71, 0x10, 0x4d, 0xc4,
	0xc8, 0xe4, 0xe3, 0xe5, 0xf3, 0x55, 0x16, 0xaa, 0x87, 0x60, 0x77, 0x48, 0xef, 0x56, 0xcd, 0x7a,
	0x29, 0x0c, 0x12, 0xf1, 0x1b, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0xc3, 0xee, 0x0b,
	0x13, 0x02, 0x00, 0x00,
}
