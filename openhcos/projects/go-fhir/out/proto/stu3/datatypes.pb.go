// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/stu3/datatypes.proto

package google_fhir_stu3_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Date_Precision int32

const (
	Date_PRECISION_UNSPECIFIED Date_Precision = 0
	Date_YEAR                  Date_Precision = 1
	Date_MONTH                 Date_Precision = 2
	Date_DAY                   Date_Precision = 3
)

var Date_Precision_name = map[int32]string{
	0: "PRECISION_UNSPECIFIED",
	1: "YEAR",
	2: "MONTH",
	3: "DAY",
}

var Date_Precision_value = map[string]int32{
	"PRECISION_UNSPECIFIED": 0,
	"YEAR":                  1,
	"MONTH":                 2,
	"DAY":                   3,
}

func (x Date_Precision) String() string {
	return proto.EnumName(Date_Precision_name, int32(x))
}

func (Date_Precision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{3, 0}
}

type DateTime_Precision int32

const (
	DateTime_PRECISION_UNSPECIFIED DateTime_Precision = 0
	DateTime_YEAR                  DateTime_Precision = 1
	DateTime_MONTH                 DateTime_Precision = 2
	DateTime_DAY                   DateTime_Precision = 3
	DateTime_SECOND                DateTime_Precision = 4
	DateTime_MILLISECOND           DateTime_Precision = 5
	DateTime_MICROSECOND           DateTime_Precision = 6
)

var DateTime_Precision_name = map[int32]string{
	0: "PRECISION_UNSPECIFIED",
	1: "YEAR",
	2: "MONTH",
	3: "DAY",
	4: "SECOND",
	5: "MILLISECOND",
	6: "MICROSECOND",
}

var DateTime_Precision_value = map[string]int32{
	"PRECISION_UNSPECIFIED": 0,
	"YEAR":                  1,
	"MONTH":                 2,
	"DAY":                   3,
	"SECOND":                4,
	"MILLISECOND":           5,
	"MICROSECOND":           6,
}

func (x DateTime_Precision) String() string {
	return proto.EnumName(DateTime_Precision_name, int32(x))
}

func (DateTime_Precision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{4, 0}
}

type Instant_Precision int32

const (
	Instant_PRECISION_UNSPECIFIED Instant_Precision = 0
	Instant_SECOND                Instant_Precision = 1
	Instant_MILLISECOND           Instant_Precision = 2
	Instant_MICROSECOND           Instant_Precision = 3
)

var Instant_Precision_name = map[int32]string{
	0: "PRECISION_UNSPECIFIED",
	1: "SECOND",
	2: "MILLISECOND",
	3: "MICROSECOND",
}

var Instant_Precision_value = map[string]int32{
	"PRECISION_UNSPECIFIED": 0,
	"SECOND":                1,
	"MILLISECOND":           2,
	"MICROSECOND":           3,
}

func (x Instant_Precision) String() string {
	return proto.EnumName(Instant_Precision_name, int32(x))
}

func (Instant_Precision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{7, 0}
}

type Time_Precision int32

const (
	Time_PRECISION_UNSPECIFIED Time_Precision = 0
	Time_SECOND                Time_Precision = 1
	Time_MILLISECOND           Time_Precision = 2
	Time_MICROSECOND           Time_Precision = 3
)

var Time_Precision_name = map[int32]string{
	0: "PRECISION_UNSPECIFIED",
	1: "SECOND",
	2: "MILLISECOND",
	3: "MICROSECOND",
}

var Time_Precision_value = map[string]int32{
	"PRECISION_UNSPECIFIED": 0,
	"SECOND":                1,
	"MILLISECOND":           2,
	"MICROSECOND":           3,
}

func (x Time_Precision) String() string {
	return proto.EnumName(Time_Precision_name, int32(x))
}

func (Time_Precision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{13, 0}
}

// Primitive value for code
type AddressTypeCode_Value int32

const (
	AddressTypeCode_INVALID_UNINITIALIZED AddressTypeCode_Value = 0
	AddressTypeCode_POSTAL                AddressTypeCode_Value = 1
	AddressTypeCode_PHYSICAL              AddressTypeCode_Value = 2
	AddressTypeCode_BOTH                  AddressTypeCode_Value = 3
)

var AddressTypeCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "POSTAL",
	2: "PHYSICAL",
	3: "BOTH",
}

var AddressTypeCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"POSTAL":                1,
	"PHYSICAL":              2,
	"BOTH":                  3,
}

func (x AddressTypeCode_Value) String() string {
	return proto.EnumName(AddressTypeCode_Value_name, int32(x))
}

func (AddressTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{46, 0}
}

// Primitive value for code
type AddressUseCode_Value int32

const (
	AddressUseCode_INVALID_UNINITIALIZED AddressUseCode_Value = 0
	AddressUseCode_HOME                  AddressUseCode_Value = 1
	AddressUseCode_WORK                  AddressUseCode_Value = 2
	AddressUseCode_TEMP                  AddressUseCode_Value = 3
	AddressUseCode_OLD                   AddressUseCode_Value = 4
)

var AddressUseCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "HOME",
	2: "WORK",
	3: "TEMP",
	4: "OLD",
}

var AddressUseCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"HOME":                  1,
	"WORK":                  2,
	"TEMP":                  3,
	"OLD":                   4,
}

func (x AddressUseCode_Value) String() string {
	return proto.EnumName(AddressUseCode_Value_name, int32(x))
}

func (AddressUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{47, 0}
}

// Primitive value for code
type ContactPointSystemCode_Value int32

const (
	ContactPointSystemCode_INVALID_UNINITIALIZED ContactPointSystemCode_Value = 0
	ContactPointSystemCode_PHONE                 ContactPointSystemCode_Value = 1
	ContactPointSystemCode_FAX                   ContactPointSystemCode_Value = 2
	ContactPointSystemCode_EMAIL                 ContactPointSystemCode_Value = 3
	ContactPointSystemCode_PAGER                 ContactPointSystemCode_Value = 4
	ContactPointSystemCode_URL                   ContactPointSystemCode_Value = 5
	ContactPointSystemCode_SMS                   ContactPointSystemCode_Value = 6
	ContactPointSystemCode_OTHER                 ContactPointSystemCode_Value = 7
)

var ContactPointSystemCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "PHONE",
	2: "FAX",
	3: "EMAIL",
	4: "PAGER",
	5: "URL",
	6: "SMS",
	7: "OTHER",
}

var ContactPointSystemCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"PHONE":                 1,
	"FAX":                   2,
	"EMAIL":                 3,
	"PAGER":                 4,
	"URL":                   5,
	"SMS":                   6,
	"OTHER":                 7,
}

func (x ContactPointSystemCode_Value) String() string {
	return proto.EnumName(ContactPointSystemCode_Value_name, int32(x))
}

func (ContactPointSystemCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{48, 0}
}

// Primitive value for code
type ContactPointUseCode_Value int32

const (
	ContactPointUseCode_INVALID_UNINITIALIZED ContactPointUseCode_Value = 0
	ContactPointUseCode_HOME                  ContactPointUseCode_Value = 1
	ContactPointUseCode_WORK                  ContactPointUseCode_Value = 2
	ContactPointUseCode_TEMP                  ContactPointUseCode_Value = 3
	ContactPointUseCode_OLD                   ContactPointUseCode_Value = 4
	ContactPointUseCode_MOBILE                ContactPointUseCode_Value = 5
)

var ContactPointUseCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "HOME",
	2: "WORK",
	3: "TEMP",
	4: "OLD",
	5: "MOBILE",
}

var ContactPointUseCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"HOME":                  1,
	"WORK":                  2,
	"TEMP":                  3,
	"OLD":                   4,
	"MOBILE":                5,
}

func (x ContactPointUseCode_Value) String() string {
	return proto.EnumName(ContactPointUseCode_Value_name, int32(x))
}

func (ContactPointUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{49, 0}
}

// Primitive value for code
type DaysOfWeekCode_Value int32

const (
	DaysOfWeekCode_INVALID_UNINITIALIZED DaysOfWeekCode_Value = 0
	DaysOfWeekCode_MON                   DaysOfWeekCode_Value = 1
	DaysOfWeekCode_TUE                   DaysOfWeekCode_Value = 2
	DaysOfWeekCode_WED                   DaysOfWeekCode_Value = 3
	DaysOfWeekCode_THU                   DaysOfWeekCode_Value = 4
	DaysOfWeekCode_FRI                   DaysOfWeekCode_Value = 5
	DaysOfWeekCode_SAT                   DaysOfWeekCode_Value = 6
	DaysOfWeekCode_SUN                   DaysOfWeekCode_Value = 7
)

var DaysOfWeekCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "MON",
	2: "TUE",
	3: "WED",
	4: "THU",
	5: "FRI",
	6: "SAT",
	7: "SUN",
}

var DaysOfWeekCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"MON":                   1,
	"TUE":                   2,
	"WED":                   3,
	"THU":                   4,
	"FRI":                   5,
	"SAT":                   6,
	"SUN":                   7,
}

func (x DaysOfWeekCode_Value) String() string {
	return proto.EnumName(DaysOfWeekCode_Value_name, int32(x))
}

func (DaysOfWeekCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{50, 0}
}

// Primitive value for code
type EventTimingCode_Value int32

const (
	EventTimingCode_INVALID_UNINITIALIZED EventTimingCode_Value = 0
	EventTimingCode_MORN                  EventTimingCode_Value = 1
	EventTimingCode_AFT                   EventTimingCode_Value = 2
	EventTimingCode_EVE                   EventTimingCode_Value = 3
	EventTimingCode_NIGHT                 EventTimingCode_Value = 4
	EventTimingCode_PHS                   EventTimingCode_Value = 5
	EventTimingCode_HS                    EventTimingCode_Value = 6
	EventTimingCode_WAKE                  EventTimingCode_Value = 7
	EventTimingCode_C                     EventTimingCode_Value = 8
	EventTimingCode_CM                    EventTimingCode_Value = 9
	EventTimingCode_CD                    EventTimingCode_Value = 10
	EventTimingCode_CV                    EventTimingCode_Value = 11
	EventTimingCode_AC                    EventTimingCode_Value = 12
	EventTimingCode_ACM                   EventTimingCode_Value = 13
	EventTimingCode_ACD                   EventTimingCode_Value = 14
	EventTimingCode_ACV                   EventTimingCode_Value = 15
	EventTimingCode_PC                    EventTimingCode_Value = 16
	EventTimingCode_PCM                   EventTimingCode_Value = 17
	EventTimingCode_PCD                   EventTimingCode_Value = 18
	EventTimingCode_PCV                   EventTimingCode_Value = 19
)

var EventTimingCode_Value_name = map[int32]string{
	0:  "INVALID_UNINITIALIZED",
	1:  "MORN",
	2:  "AFT",
	3:  "EVE",
	4:  "NIGHT",
	5:  "PHS",
	6:  "HS",
	7:  "WAKE",
	8:  "C",
	9:  "CM",
	10: "CD",
	11: "CV",
	12: "AC",
	13: "ACM",
	14: "ACD",
	15: "ACV",
	16: "PC",
	17: "PCM",
	18: "PCD",
	19: "PCV",
}

var EventTimingCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"MORN":                  1,
	"AFT":                   2,
	"EVE":                   3,
	"NIGHT":                 4,
	"PHS":                   5,
	"HS":                    6,
	"WAKE":                  7,
	"C":                     8,
	"CM":                    9,
	"CD":                    10,
	"CV":                    11,
	"AC":                    12,
	"ACM":                   13,
	"ACD":                   14,
	"ACV":                   15,
	"PC":                    16,
	"PCM":                   17,
	"PCD":                   18,
	"PCV":                   19,
}

func (x EventTimingCode_Value) String() string {
	return proto.EnumName(EventTimingCode_Value_name, int32(x))
}

func (EventTimingCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{51, 0}
}

// Primitive value for code
type IdentifierUseCode_Value int32

const (
	IdentifierUseCode_INVALID_UNINITIALIZED IdentifierUseCode_Value = 0
	IdentifierUseCode_USUAL                 IdentifierUseCode_Value = 1
	IdentifierUseCode_OFFICIAL              IdentifierUseCode_Value = 2
	IdentifierUseCode_TEMP                  IdentifierUseCode_Value = 3
	IdentifierUseCode_SECONDARY             IdentifierUseCode_Value = 4
)

var IdentifierUseCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "USUAL",
	2: "OFFICIAL",
	3: "TEMP",
	4: "SECONDARY",
}

var IdentifierUseCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"USUAL":                 1,
	"OFFICIAL":              2,
	"TEMP":                  3,
	"SECONDARY":             4,
}

func (x IdentifierUseCode_Value) String() string {
	return proto.EnumName(IdentifierUseCode_Value_name, int32(x))
}

func (IdentifierUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{52, 0}
}

// Primitive value for code
type NameUseCode_Value int32

const (
	NameUseCode_INVALID_UNINITIALIZED NameUseCode_Value = 0
	NameUseCode_USUAL                 NameUseCode_Value = 1
	NameUseCode_OFFICIAL              NameUseCode_Value = 2
	NameUseCode_TEMP                  NameUseCode_Value = 3
	NameUseCode_NICKNAME              NameUseCode_Value = 4
	NameUseCode_ANONYMOUS             NameUseCode_Value = 5
	NameUseCode_OLD                   NameUseCode_Value = 6
	NameUseCode_MAIDEN                NameUseCode_Value = 7
)

var NameUseCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "USUAL",
	2: "OFFICIAL",
	3: "TEMP",
	4: "NICKNAME",
	5: "ANONYMOUS",
	6: "OLD",
	7: "MAIDEN",
}

var NameUseCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"USUAL":                 1,
	"OFFICIAL":              2,
	"TEMP":                  3,
	"NICKNAME":              4,
	"ANONYMOUS":             5,
	"OLD":                   6,
	"MAIDEN":                7,
}

func (x NameUseCode_Value) String() string {
	return proto.EnumName(NameUseCode_Value_name, int32(x))
}

func (NameUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{56, 0}
}

// Primitive value for code
type QuantityComparatorCode_Value int32

const (
	QuantityComparatorCode_INVALID_UNINITIALIZED QuantityComparatorCode_Value = 0
	QuantityComparatorCode_LT                    QuantityComparatorCode_Value = 1
	QuantityComparatorCode_LE                    QuantityComparatorCode_Value = 2
	QuantityComparatorCode_GE                    QuantityComparatorCode_Value = 3
	QuantityComparatorCode_GT                    QuantityComparatorCode_Value = 4
)

var QuantityComparatorCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "LT",
	2: "LE",
	3: "GE",
	4: "GT",
}

var QuantityComparatorCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"LT":                    1,
	"LE":                    2,
	"GE":                    3,
	"GT":                    4,
}

func (x QuantityComparatorCode_Value) String() string {
	return proto.EnumName(QuantityComparatorCode_Value_name, int32(x))
}

func (QuantityComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{57, 0}
}

// Primitive value for code
type UnitsOfTimeCode_Value int32

const (
	UnitsOfTimeCode_INVALID_UNINITIALIZED UnitsOfTimeCode_Value = 0
	UnitsOfTimeCode_S                     UnitsOfTimeCode_Value = 1
	UnitsOfTimeCode_MIN                   UnitsOfTimeCode_Value = 2
	UnitsOfTimeCode_H                     UnitsOfTimeCode_Value = 3
	UnitsOfTimeCode_D                     UnitsOfTimeCode_Value = 4
	UnitsOfTimeCode_WK                    UnitsOfTimeCode_Value = 5
	UnitsOfTimeCode_MO                    UnitsOfTimeCode_Value = 6
	UnitsOfTimeCode_A                     UnitsOfTimeCode_Value = 7
)

var UnitsOfTimeCode_Value_name = map[int32]string{
	0: "INVALID_UNINITIALIZED",
	1: "S",
	2: "MIN",
	3: "H",
	4: "D",
	5: "WK",
	6: "MO",
	7: "A",
}

var UnitsOfTimeCode_Value_value = map[string]int32{
	"INVALID_UNINITIALIZED": 0,
	"S":                     1,
	"MIN":                   2,
	"H":                     3,
	"D":                     4,
	"WK":                    5,
	"MO":                    6,
	"A":                     7,
}

func (x UnitsOfTimeCode_Value) String() string {
	return proto.EnumName(UnitsOfTimeCode_Value_name, int32(x))
}

func (UnitsOfTimeCode_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{58, 0}
}

// Auto-generated from StructureDefinition for base64Binary.
// Primitive Type base64Binary.
// See http://hl7.org/fhir/StructureDefinition/base64Binary
type Base64Binary struct {
	// Primitive value for base64Binary
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Base64Binary) Reset()         { *m = Base64Binary{} }
func (m *Base64Binary) String() string { return proto.CompactTextString(m) }
func (*Base64Binary) ProtoMessage()    {}
func (*Base64Binary) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{0}
}

func (m *Base64Binary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Base64Binary.Unmarshal(m, b)
}
func (m *Base64Binary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Base64Binary.Marshal(b, m, deterministic)
}
func (m *Base64Binary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base64Binary.Merge(m, src)
}
func (m *Base64Binary) XXX_Size() int {
	return xxx_messageInfo_Base64Binary.Size(m)
}
func (m *Base64Binary) XXX_DiscardUnknown() {
	xxx_messageInfo_Base64Binary.DiscardUnknown(m)
}

var xxx_messageInfo_Base64Binary proto.InternalMessageInfo

func (m *Base64Binary) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Base64Binary) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Base64Binary) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for boolean.
// Primitive Type boolean.
// See http://hl7.org/fhir/StructureDefinition/boolean
type Boolean struct {
	// Primitive value for boolean
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Boolean) Reset()         { *m = Boolean{} }
func (m *Boolean) String() string { return proto.CompactTextString(m) }
func (*Boolean) ProtoMessage()    {}
func (*Boolean) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{1}
}

func (m *Boolean) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Boolean.Unmarshal(m, b)
}
func (m *Boolean) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Boolean.Marshal(b, m, deterministic)
}
func (m *Boolean) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Boolean.Merge(m, src)
}
func (m *Boolean) XXX_Size() int {
	return xxx_messageInfo_Boolean.Size(m)
}
func (m *Boolean) XXX_DiscardUnknown() {
	xxx_messageInfo_Boolean.DiscardUnknown(m)
}

var xxx_messageInfo_Boolean proto.InternalMessageInfo

func (m *Boolean) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func (m *Boolean) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Boolean) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for code.
// Primitive Type code.
// See http://hl7.org/fhir/StructureDefinition/code
type Code struct {
	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Code) Reset()         { *m = Code{} }
func (m *Code) String() string { return proto.CompactTextString(m) }
func (*Code) ProtoMessage()    {}
func (*Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{2}
}

func (m *Code) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Code.Unmarshal(m, b)
}
func (m *Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Code.Marshal(b, m, deterministic)
}
func (m *Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Code.Merge(m, src)
}
func (m *Code) XXX_Size() int {
	return xxx_messageInfo_Code.Size(m)
}
func (m *Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Code proto.InternalMessageInfo

func (m *Code) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Code) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Code) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for date.
// Primitive Type date.
// See http://hl7.org/fhir/StructureDefinition/date
type Date struct {
	// Primitive value for date
	ValueUs   int64          `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string         `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Date_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Date_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{3}
}

func (m *Date) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Date.Unmarshal(m, b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Date.Marshal(b, m, deterministic)
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return xxx_messageInfo_Date.Size(m)
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetValueUs() int64 {
	if m != nil {
		return m.ValueUs
	}
	return 0
}

func (m *Date) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Date) GetPrecision() Date_Precision {
	if m != nil {
		return m.Precision
	}
	return Date_PRECISION_UNSPECIFIED
}

func (m *Date) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Date) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for dateTime.
// Primitive Type dateTime.
// See http://hl7.org/fhir/StructureDefinition/dateTime
type DateTime struct {
	// Primitive value for dateTime
	ValueUs   int64              `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string             `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision DateTime_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.DateTime_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DateTime) Reset()         { *m = DateTime{} }
func (m *DateTime) String() string { return proto.CompactTextString(m) }
func (*DateTime) ProtoMessage()    {}
func (*DateTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{4}
}

func (m *DateTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateTime.Unmarshal(m, b)
}
func (m *DateTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateTime.Marshal(b, m, deterministic)
}
func (m *DateTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateTime.Merge(m, src)
}
func (m *DateTime) XXX_Size() int {
	return xxx_messageInfo_DateTime.Size(m)
}
func (m *DateTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DateTime.DiscardUnknown(m)
}

var xxx_messageInfo_DateTime proto.InternalMessageInfo

func (m *DateTime) GetValueUs() int64 {
	if m != nil {
		return m.ValueUs
	}
	return 0
}

func (m *DateTime) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *DateTime) GetPrecision() DateTime_Precision {
	if m != nil {
		return m.Precision
	}
	return DateTime_PRECISION_UNSPECIFIED
}

func (m *DateTime) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DateTime) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for decimal.
// Primitive Type decimal.
// See http://hl7.org/fhir/StructureDefinition/decimal
type Decimal struct {
	// Primitive value for decimal
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Decimal) Reset()         { *m = Decimal{} }
func (m *Decimal) String() string { return proto.CompactTextString(m) }
func (*Decimal) ProtoMessage()    {}
func (*Decimal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{5}
}

func (m *Decimal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Decimal.Unmarshal(m, b)
}
func (m *Decimal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Decimal.Marshal(b, m, deterministic)
}
func (m *Decimal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal.Merge(m, src)
}
func (m *Decimal) XXX_Size() int {
	return xxx_messageInfo_Decimal.Size(m)
}
func (m *Decimal) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal proto.InternalMessageInfo

func (m *Decimal) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Decimal) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Decimal) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for id.
// Primitive Type id.
// See http://hl7.org/fhir/StructureDefinition/id
type Id struct {
	// Primitive value for id
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{6}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Id) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Id) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for instant.
// Primitive Type instant.
// See http://hl7.org/fhir/StructureDefinition/instant
type Instant struct {
	// Primitive value for instant
	ValueUs   int64             `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string            `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Instant_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Instant_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Instant) Reset()         { *m = Instant{} }
func (m *Instant) String() string { return proto.CompactTextString(m) }
func (*Instant) ProtoMessage()    {}
func (*Instant) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{7}
}

func (m *Instant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instant.Unmarshal(m, b)
}
func (m *Instant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instant.Marshal(b, m, deterministic)
}
func (m *Instant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instant.Merge(m, src)
}
func (m *Instant) XXX_Size() int {
	return xxx_messageInfo_Instant.Size(m)
}
func (m *Instant) XXX_DiscardUnknown() {
	xxx_messageInfo_Instant.DiscardUnknown(m)
}

var xxx_messageInfo_Instant proto.InternalMessageInfo

func (m *Instant) GetValueUs() int64 {
	if m != nil {
		return m.ValueUs
	}
	return 0
}

func (m *Instant) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Instant) GetPrecision() Instant_Precision {
	if m != nil {
		return m.Precision
	}
	return Instant_PRECISION_UNSPECIFIED
}

func (m *Instant) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Instant) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for integer.
// Primitive Type integer.
// See http://hl7.org/fhir/StructureDefinition/integer
type Integer struct {
	// Primitive value for integer
	Value int32 `protobuf:"zigzag32,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Integer) Reset()         { *m = Integer{} }
func (m *Integer) String() string { return proto.CompactTextString(m) }
func (*Integer) ProtoMessage()    {}
func (*Integer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{8}
}

func (m *Integer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Integer.Unmarshal(m, b)
}
func (m *Integer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Integer.Marshal(b, m, deterministic)
}
func (m *Integer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Integer.Merge(m, src)
}
func (m *Integer) XXX_Size() int {
	return xxx_messageInfo_Integer.Size(m)
}
func (m *Integer) XXX_DiscardUnknown() {
	xxx_messageInfo_Integer.DiscardUnknown(m)
}

var xxx_messageInfo_Integer proto.InternalMessageInfo

func (m *Integer) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Integer) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Integer) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for markdown.
// Primitive Type markdown.
// See http://hl7.org/fhir/StructureDefinition/markdown
type Markdown struct {
	// Primitive value for markdown
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Markdown) Reset()         { *m = Markdown{} }
func (m *Markdown) String() string { return proto.CompactTextString(m) }
func (*Markdown) ProtoMessage()    {}
func (*Markdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{9}
}

func (m *Markdown) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Markdown.Unmarshal(m, b)
}
func (m *Markdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Markdown.Marshal(b, m, deterministic)
}
func (m *Markdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Markdown.Merge(m, src)
}
func (m *Markdown) XXX_Size() int {
	return xxx_messageInfo_Markdown.Size(m)
}
func (m *Markdown) XXX_DiscardUnknown() {
	xxx_messageInfo_Markdown.DiscardUnknown(m)
}

var xxx_messageInfo_Markdown proto.InternalMessageInfo

func (m *Markdown) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Markdown) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Markdown) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for oid.
// Primitive Type oid.
// See http://hl7.org/fhir/StructureDefinition/oid
type Oid struct {
	// Primitive value for oid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Oid) Reset()         { *m = Oid{} }
func (m *Oid) String() string { return proto.CompactTextString(m) }
func (*Oid) ProtoMessage()    {}
func (*Oid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{10}
}

func (m *Oid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Oid.Unmarshal(m, b)
}
func (m *Oid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Oid.Marshal(b, m, deterministic)
}
func (m *Oid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oid.Merge(m, src)
}
func (m *Oid) XXX_Size() int {
	return xxx_messageInfo_Oid.Size(m)
}
func (m *Oid) XXX_DiscardUnknown() {
	xxx_messageInfo_Oid.DiscardUnknown(m)
}

var xxx_messageInfo_Oid proto.InternalMessageInfo

func (m *Oid) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Oid) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Oid) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for positiveInt.
// Primitive Type positiveInt.
// See http://hl7.org/fhir/StructureDefinition/positiveInt
type PositiveInt struct {
	// Primitive value for positiveInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PositiveInt) Reset()         { *m = PositiveInt{} }
func (m *PositiveInt) String() string { return proto.CompactTextString(m) }
func (*PositiveInt) ProtoMessage()    {}
func (*PositiveInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{11}
}

func (m *PositiveInt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositiveInt.Unmarshal(m, b)
}
func (m *PositiveInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositiveInt.Marshal(b, m, deterministic)
}
func (m *PositiveInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositiveInt.Merge(m, src)
}
func (m *PositiveInt) XXX_Size() int {
	return xxx_messageInfo_PositiveInt.Size(m)
}
func (m *PositiveInt) XXX_DiscardUnknown() {
	xxx_messageInfo_PositiveInt.DiscardUnknown(m)
}

var xxx_messageInfo_PositiveInt proto.InternalMessageInfo

func (m *PositiveInt) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PositiveInt) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PositiveInt) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for string.
// Primitive Type string.
// See http://hl7.org/fhir/StructureDefinition/string
type String struct {
	// Primitive value for string
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{12}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *String) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *String) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for time.
// Primitive Type time.
// See http://hl7.org/fhir/StructureDefinition/time
type Time struct {
	// Primitive value for time
	ValueUs   int64          `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Precision Time_Precision `protobuf:"varint,2,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Time_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{13}
}

func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetValueUs() int64 {
	if m != nil {
		return m.ValueUs
	}
	return 0
}

func (m *Time) GetPrecision() Time_Precision {
	if m != nil {
		return m.Precision
	}
	return Time_PRECISION_UNSPECIFIED
}

func (m *Time) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Time) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for unsignedInt.
// Primitive Type unsignedInt.
// See http://hl7.org/fhir/StructureDefinition/unsignedInt
type UnsignedInt struct {
	// Primitive value for unsignedInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UnsignedInt) Reset()         { *m = UnsignedInt{} }
func (m *UnsignedInt) String() string { return proto.CompactTextString(m) }
func (*UnsignedInt) ProtoMessage()    {}
func (*UnsignedInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{14}
}

func (m *UnsignedInt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsignedInt.Unmarshal(m, b)
}
func (m *UnsignedInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsignedInt.Marshal(b, m, deterministic)
}
func (m *UnsignedInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedInt.Merge(m, src)
}
func (m *UnsignedInt) XXX_Size() int {
	return xxx_messageInfo_UnsignedInt.Size(m)
}
func (m *UnsignedInt) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedInt.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedInt proto.InternalMessageInfo

func (m *UnsignedInt) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UnsignedInt) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UnsignedInt) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for uri.
// Primitive Type uri.
// See http://hl7.org/fhir/StructureDefinition/uri
type Uri struct {
	// Primitive value for uri
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Uri) Reset()         { *m = Uri{} }
func (m *Uri) String() string { return proto.CompactTextString(m) }
func (*Uri) ProtoMessage()    {}
func (*Uri) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{15}
}

func (m *Uri) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uri.Unmarshal(m, b)
}
func (m *Uri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uri.Marshal(b, m, deterministic)
}
func (m *Uri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uri.Merge(m, src)
}
func (m *Uri) XXX_Size() int {
	return xxx_messageInfo_Uri.Size(m)
}
func (m *Uri) XXX_DiscardUnknown() {
	xxx_messageInfo_Uri.DiscardUnknown(m)
}

var xxx_messageInfo_Uri proto.InternalMessageInfo

func (m *Uri) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Uri) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Uri) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for uuid.
// Primitive Type uuid.
// See http://hl7.org/fhir/StructureDefinition/uuid
type Uuid struct {
	// Primitive value for uuid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Uuid) Reset()         { *m = Uuid{} }
func (m *Uuid) String() string { return proto.CompactTextString(m) }
func (*Uuid) ProtoMessage()    {}
func (*Uuid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{16}
}

func (m *Uuid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uuid.Unmarshal(m, b)
}
func (m *Uuid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uuid.Marshal(b, m, deterministic)
}
func (m *Uuid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uuid.Merge(m, src)
}
func (m *Uuid) XXX_Size() int {
	return xxx_messageInfo_Uuid.Size(m)
}
func (m *Uuid) XXX_DiscardUnknown() {
	xxx_messageInfo_Uuid.DiscardUnknown(m)
}

var xxx_messageInfo_Uuid proto.InternalMessageInfo

func (m *Uuid) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Uuid) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Uuid) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for xhtml.
// Primitive Type xhtml.
// See http://hl7.org/fhir/StructureDefinition/xhtml
type Xhtml struct {
	// Actual xhtml
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id                   *String  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xhtml) Reset()         { *m = Xhtml{} }
func (m *Xhtml) String() string { return proto.CompactTextString(m) }
func (*Xhtml) ProtoMessage()    {}
func (*Xhtml) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{17}
}

func (m *Xhtml) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xhtml.Unmarshal(m, b)
}
func (m *Xhtml) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xhtml.Marshal(b, m, deterministic)
}
func (m *Xhtml) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xhtml.Merge(m, src)
}
func (m *Xhtml) XXX_Size() int {
	return xxx_messageInfo_Xhtml.Size(m)
}
func (m *Xhtml) XXX_DiscardUnknown() {
	xxx_messageInfo_Xhtml.DiscardUnknown(m)
}

var xxx_messageInfo_Xhtml proto.InternalMessageInfo

func (m *Xhtml) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Xhtml) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

// Auto-generated from StructureDefinition for Address.
// An address expressed using postal conventions (as opposed to GPS or other
// location definition formats). See
// http://hl7.org/fhir/StructureDefinition/Address
type Address struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// home | work | temp | old - purpose of this address
	Use *AddressUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// postal | physical | both
	Type *AddressTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Text representation of the address
	Text *String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Street name, number, direction & P.O. Box etc.
	Line []*String `protobuf:"bytes,6,rep,name=line,proto3" json:"line,omitempty"`
	// Name of city, town etc.
	City *String `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	// District name (aka county)
	District *String `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// Sub-unit of country (abbreviations ok)
	State *String `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Postal code for area
	PostalCode *String `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Country (e.g. can be ISO 3166 2 or 3 letter code)
	Country *String `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	// Time period when address was/is in use
	Period               *Period  `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{18}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Address) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Address) GetUse() *AddressUseCode {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *Address) GetType() *AddressTypeCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Address) GetText() *String {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *Address) GetLine() []*String {
	if m != nil {
		return m.Line
	}
	return nil
}

func (m *Address) GetCity() *String {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *Address) GetDistrict() *String {
	if m != nil {
		return m.District
	}
	return nil
}

func (m *Address) GetState() *String {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Address) GetPostalCode() *String {
	if m != nil {
		return m.PostalCode
	}
	return nil
}

func (m *Address) GetCountry() *String {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Address) GetPeriod() *Period {
	if m != nil {
		return m.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Age.
// A duration of time during which an organism (or a process) has existed.
// See http://hl7.org/fhir/StructureDefinition/Age
type Age struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Age) Reset()         { *m = Age{} }
func (m *Age) String() string { return proto.CompactTextString(m) }
func (*Age) ProtoMessage()    {}
func (*Age) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{19}
}

func (m *Age) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Age.Unmarshal(m, b)
}
func (m *Age) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Age.Marshal(b, m, deterministic)
}
func (m *Age) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Age.Merge(m, src)
}
func (m *Age) XXX_Size() int {
	return xxx_messageInfo_Age.Size(m)
}
func (m *Age) XXX_DiscardUnknown() {
	xxx_messageInfo_Age.DiscardUnknown(m)
}

var xxx_messageInfo_Age proto.InternalMessageInfo

func (m *Age) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Age) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Age) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Age) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Age) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Age) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Age) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Annotation.
// Text node with attribution.
// See http://hl7.org/fhir/StructureDefinition/Annotation
type Annotation struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension       `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Author    *Annotation_Author `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// When the annotation was made
	Time *DateTime `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The annotation  - text content
	Text                 *String  `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Annotation) Reset()         { *m = Annotation{} }
func (m *Annotation) String() string { return proto.CompactTextString(m) }
func (*Annotation) ProtoMessage()    {}
func (*Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{20}
}

func (m *Annotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotation.Unmarshal(m, b)
}
func (m *Annotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotation.Marshal(b, m, deterministic)
}
func (m *Annotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotation.Merge(m, src)
}
func (m *Annotation) XXX_Size() int {
	return xxx_messageInfo_Annotation.Size(m)
}
func (m *Annotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotation.DiscardUnknown(m)
}

var xxx_messageInfo_Annotation proto.InternalMessageInfo

func (m *Annotation) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Annotation) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Annotation) GetAuthor() *Annotation_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Annotation) GetTime() *DateTime {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Annotation) GetText() *String {
	if m != nil {
		return m.Text
	}
	return nil
}

// Individual responsible for the annotation
type Annotation_Author struct {
	// Types that are valid to be assigned to Author:
	//	*Annotation_Author_Reference
	//	*Annotation_Author_StringValue
	Author               isAnnotation_Author_Author `protobuf_oneof:"author"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Annotation_Author) Reset()         { *m = Annotation_Author{} }
func (m *Annotation_Author) String() string { return proto.CompactTextString(m) }
func (*Annotation_Author) ProtoMessage()    {}
func (*Annotation_Author) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{20, 0}
}

func (m *Annotation_Author) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotation_Author.Unmarshal(m, b)
}
func (m *Annotation_Author) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotation_Author.Marshal(b, m, deterministic)
}
func (m *Annotation_Author) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotation_Author.Merge(m, src)
}
func (m *Annotation_Author) XXX_Size() int {
	return xxx_messageInfo_Annotation_Author.Size(m)
}
func (m *Annotation_Author) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotation_Author.DiscardUnknown(m)
}

var xxx_messageInfo_Annotation_Author proto.InternalMessageInfo

type isAnnotation_Author_Author interface {
	isAnnotation_Author_Author()
}

type Annotation_Author_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type Annotation_Author_StringValue struct {
	StringValue *String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Annotation_Author_Reference) isAnnotation_Author_Author() {}

func (*Annotation_Author_StringValue) isAnnotation_Author_Author() {}

func (m *Annotation_Author) GetAuthor() isAnnotation_Author_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Annotation_Author) GetReference() *Reference {
	if x, ok := m.GetAuthor().(*Annotation_Author_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *Annotation_Author) GetStringValue() *String {
	if x, ok := m.GetAuthor().(*Annotation_Author_StringValue); ok {
		return x.StringValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Annotation_Author) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Annotation_Author_OneofMarshaler, _Annotation_Author_OneofUnmarshaler, _Annotation_Author_OneofSizer, []interface{}{
		(*Annotation_Author_Reference)(nil),
		(*Annotation_Author_StringValue)(nil),
	}
}

func _Annotation_Author_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Annotation_Author)
	// author
	switch x := m.Author.(type) {
	case *Annotation_Author_Reference:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *Annotation_Author_StringValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Annotation_Author.Author has unexpected type %T", x)
	}
	return nil
}

func _Annotation_Author_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Annotation_Author)
	switch tag {
	case 1: // author.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Author = &Annotation_Author_Reference{msg}
		return true, err
	case 2: // author.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Author = &Annotation_Author_StringValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Annotation_Author_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Annotation_Author)
	// author
	switch x := m.Author.(type) {
	case *Annotation_Author_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Annotation_Author_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Auto-generated from StructureDefinition for Attachment.
// Content in a format defined elsewhere.
// See http://hl7.org/fhir/StructureDefinition/Attachment
type Attachment struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Mime type of the content, with charset etc.
	ContentType *MimeTypeCode `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Human language of the content (BCP-47)
	Language *LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Data inline, base64ed
	Data *Base64Binary `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uri where the data can be found
	Url *Uri `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// Number of bytes of content (if url provided)
	Size *UnsignedInt `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	// Hash of the data (sha-1, base64ed)
	Hash *Base64Binary `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	// Label to display in place of the data
	Title *String `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	// Date attachment was first created
	Creation             *DateTime `protobuf:"bytes,10,opt,name=creation,proto3" json:"creation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Attachment) Reset()         { *m = Attachment{} }
func (m *Attachment) String() string { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()    {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{21}
}

func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attachment.Unmarshal(m, b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return xxx_messageInfo_Attachment.Size(m)
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Attachment) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Attachment) GetContentType() *MimeTypeCode {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *Attachment) GetLanguage() *LanguageCode {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *Attachment) GetData() *Base64Binary {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attachment) GetUrl() *Uri {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Attachment) GetSize() *UnsignedInt {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *Attachment) GetHash() *Base64Binary {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Attachment) GetTitle() *String {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *Attachment) GetCreation() *DateTime {
	if m != nil {
		return m.Creation
	}
	return nil
}

// Auto-generated from StructureDefinition for CodeableConcept.
// Concept - reference to a terminology or just  text.
// See http://hl7.org/fhir/StructureDefinition/CodeableConcept
type CodeableConcept struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text                 *String  `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeableConcept) Reset()         { *m = CodeableConcept{} }
func (m *CodeableConcept) String() string { return proto.CompactTextString(m) }
func (*CodeableConcept) ProtoMessage()    {}
func (*CodeableConcept) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{22}
}

func (m *CodeableConcept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeableConcept.Unmarshal(m, b)
}
func (m *CodeableConcept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeableConcept.Marshal(b, m, deterministic)
}
func (m *CodeableConcept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeableConcept.Merge(m, src)
}
func (m *CodeableConcept) XXX_Size() int {
	return xxx_messageInfo_CodeableConcept.Size(m)
}
func (m *CodeableConcept) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeableConcept.DiscardUnknown(m)
}

var xxx_messageInfo_CodeableConcept proto.InternalMessageInfo

func (m *CodeableConcept) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CodeableConcept) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *CodeableConcept) GetCoding() []*Coding {
	if m != nil {
		return m.Coding
	}
	return nil
}

func (m *CodeableConcept) GetText() *String {
	if m != nil {
		return m.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for Coding.
// A reference to a code defined by a terminology system.
// See http://hl7.org/fhir/StructureDefinition/Coding
type Coding struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Identity of the terminology system
	System *Uri `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Symbol in syntax defined by the system
	Code *Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected         *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coding) Reset()         { *m = Coding{} }
func (m *Coding) String() string { return proto.CompactTextString(m) }
func (*Coding) ProtoMessage()    {}
func (*Coding) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{23}
}

func (m *Coding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coding.Unmarshal(m, b)
}
func (m *Coding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coding.Marshal(b, m, deterministic)
}
func (m *Coding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coding.Merge(m, src)
}
func (m *Coding) XXX_Size() int {
	return xxx_messageInfo_Coding.Size(m)
}
func (m *Coding) XXX_DiscardUnknown() {
	xxx_messageInfo_Coding.DiscardUnknown(m)
}

var xxx_messageInfo_Coding proto.InternalMessageInfo

func (m *Coding) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Coding) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Coding) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Coding) GetVersion() *String {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Coding) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Coding) GetDisplay() *String {
	if m != nil {
		return m.Display
	}
	return nil
}

func (m *Coding) GetUserSelected() *Boolean {
	if m != nil {
		return m.UserSelected
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactPoint.
// Details of a Technology mediated contact point (phone, fax, email, etc.).
// See http://hl7.org/fhir/StructureDefinition/ContactPoint
type ContactPoint struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// phone | fax | email | pager | url | sms | other
	System *ContactPointSystemCode `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// The actual contact point details
	Value *String `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// home | work | temp | old | mobile - purpose of this contact point
	Use *ContactPointUseCode `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Specify preferred order of use (1 = highest)
	Rank *PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	// Time period when the contact point was/is in use
	Period               *Period  `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactPoint) Reset()         { *m = ContactPoint{} }
func (m *ContactPoint) String() string { return proto.CompactTextString(m) }
func (*ContactPoint) ProtoMessage()    {}
func (*ContactPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{24}
}

func (m *ContactPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactPoint.Unmarshal(m, b)
}
func (m *ContactPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactPoint.Marshal(b, m, deterministic)
}
func (m *ContactPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactPoint.Merge(m, src)
}
func (m *ContactPoint) XXX_Size() int {
	return xxx_messageInfo_ContactPoint.Size(m)
}
func (m *ContactPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ContactPoint proto.InternalMessageInfo

func (m *ContactPoint) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ContactPoint) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ContactPoint) GetSystem() *ContactPointSystemCode {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *ContactPoint) GetValue() *String {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ContactPoint) GetUse() *ContactPointUseCode {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *ContactPoint) GetRank() *PositiveInt {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *ContactPoint) GetPeriod() *Period {
	if m != nil {
		return m.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Count.
// A measured or measurable amount.
// See http://hl7.org/fhir/StructureDefinition/Count
type Count struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{25}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Count) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Count) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Count) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Count) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Count) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Count) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Distance.
// A length - a value with a unit that is a physical distance.
// See http://hl7.org/fhir/StructureDefinition/Distance
type Distance struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Distance) Reset()         { *m = Distance{} }
func (m *Distance) String() string { return proto.CompactTextString(m) }
func (*Distance) ProtoMessage()    {}
func (*Distance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{26}
}

func (m *Distance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Distance.Unmarshal(m, b)
}
func (m *Distance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Distance.Marshal(b, m, deterministic)
}
func (m *Distance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distance.Merge(m, src)
}
func (m *Distance) XXX_Size() int {
	return xxx_messageInfo_Distance.Size(m)
}
func (m *Distance) XXX_DiscardUnknown() {
	xxx_messageInfo_Distance.DiscardUnknown(m)
}

var xxx_messageInfo_Distance proto.InternalMessageInfo

func (m *Distance) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Distance) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Distance) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Distance) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Distance) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Distance) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Distance) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Dosage.
// How the medication is/was taken or should be taken.
// See http://hl7.org/fhir/StructureDefinition/Dosage
type Dosage struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The order of the dosage instructions
	Sequence *Integer `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Free text dosage instructions e.g. SIG
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Supplemental instruction - e.g. "with meals"
	AdditionalInstruction []*CodeableConcept `protobuf:"bytes,5,rep,name=additional_instruction,json=additionalInstruction,proto3" json:"additional_instruction,omitempty"`
	// Patient or consumer oriented instructions
	PatientInstruction *String `protobuf:"bytes,6,opt,name=patient_instruction,json=patientInstruction,proto3" json:"patient_instruction,omitempty"`
	// When medication should be administered
	Timing   *Timing          `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	AsNeeded *Dosage_AsNeeded `protobuf:"bytes,8,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// Body site to administer to
	Site *CodeableConcept `protobuf:"bytes,9,opt,name=site,proto3" json:"site,omitempty"`
	// How drug should enter body
	Route *CodeableConcept `protobuf:"bytes,10,opt,name=route,proto3" json:"route,omitempty"`
	// Technique for administering medication
	Method *CodeableConcept `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	Dose   *Dosage_Dose     `protobuf:"bytes,12,opt,name=dose,proto3" json:"dose,omitempty"`
	// Upper limit on medication per unit of time
	MaxDosePerPeriod *Ratio `protobuf:"bytes,13,opt,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
	// Upper limit on medication per administration
	MaxDosePerAdministration *SimpleQuantity `protobuf:"bytes,14,opt,name=max_dose_per_administration,json=maxDosePerAdministration,proto3" json:"max_dose_per_administration,omitempty"`
	// Upper limit on medication per lifetime of the patient
	MaxDosePerLifetime   *SimpleQuantity `protobuf:"bytes,15,opt,name=max_dose_per_lifetime,json=maxDosePerLifetime,proto3" json:"max_dose_per_lifetime,omitempty"`
	Rate                 *Dosage_Rate    `protobuf:"bytes,16,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dosage) Reset()         { *m = Dosage{} }
func (m *Dosage) String() string { return proto.CompactTextString(m) }
func (*Dosage) ProtoMessage()    {}
func (*Dosage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{27}
}

func (m *Dosage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dosage.Unmarshal(m, b)
}
func (m *Dosage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dosage.Marshal(b, m, deterministic)
}
func (m *Dosage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dosage.Merge(m, src)
}
func (m *Dosage) XXX_Size() int {
	return xxx_messageInfo_Dosage.Size(m)
}
func (m *Dosage) XXX_DiscardUnknown() {
	xxx_messageInfo_Dosage.DiscardUnknown(m)
}

var xxx_messageInfo_Dosage proto.InternalMessageInfo

func (m *Dosage) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Dosage) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Dosage) GetSequence() *Integer {
	if m != nil {
		return m.Sequence
	}
	return nil
}

func (m *Dosage) GetText() *String {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *Dosage) GetAdditionalInstruction() []*CodeableConcept {
	if m != nil {
		return m.AdditionalInstruction
	}
	return nil
}

func (m *Dosage) GetPatientInstruction() *String {
	if m != nil {
		return m.PatientInstruction
	}
	return nil
}

func (m *Dosage) GetTiming() *Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *Dosage) GetAsNeeded() *Dosage_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (m *Dosage) GetSite() *CodeableConcept {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *Dosage) GetRoute() *CodeableConcept {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *Dosage) GetMethod() *CodeableConcept {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *Dosage) GetDose() *Dosage_Dose {
	if m != nil {
		return m.Dose
	}
	return nil
}

func (m *Dosage) GetMaxDosePerPeriod() *Ratio {
	if m != nil {
		return m.MaxDosePerPeriod
	}
	return nil
}

func (m *Dosage) GetMaxDosePerAdministration() *SimpleQuantity {
	if m != nil {
		return m.MaxDosePerAdministration
	}
	return nil
}

func (m *Dosage) GetMaxDosePerLifetime() *SimpleQuantity {
	if m != nil {
		return m.MaxDosePerLifetime
	}
	return nil
}

func (m *Dosage) GetRate() *Dosage_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

// Take "as needed" (for x)
type Dosage_AsNeeded struct {
	// Types that are valid to be assigned to AsNeeded:
	//	*Dosage_AsNeeded_Boolean
	//	*Dosage_AsNeeded_CodeableConcept
	AsNeeded             isDosage_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Dosage_AsNeeded) Reset()         { *m = Dosage_AsNeeded{} }
func (m *Dosage_AsNeeded) String() string { return proto.CompactTextString(m) }
func (*Dosage_AsNeeded) ProtoMessage()    {}
func (*Dosage_AsNeeded) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{27, 0}
}

func (m *Dosage_AsNeeded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dosage_AsNeeded.Unmarshal(m, b)
}
func (m *Dosage_AsNeeded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dosage_AsNeeded.Marshal(b, m, deterministic)
}
func (m *Dosage_AsNeeded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dosage_AsNeeded.Merge(m, src)
}
func (m *Dosage_AsNeeded) XXX_Size() int {
	return xxx_messageInfo_Dosage_AsNeeded.Size(m)
}
func (m *Dosage_AsNeeded) XXX_DiscardUnknown() {
	xxx_messageInfo_Dosage_AsNeeded.DiscardUnknown(m)
}

var xxx_messageInfo_Dosage_AsNeeded proto.InternalMessageInfo

type isDosage_AsNeeded_AsNeeded interface {
	isDosage_AsNeeded_AsNeeded()
}

type Dosage_AsNeeded_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Dosage_AsNeeded_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*Dosage_AsNeeded_Boolean) isDosage_AsNeeded_AsNeeded() {}

func (*Dosage_AsNeeded_CodeableConcept) isDosage_AsNeeded_AsNeeded() {}

func (m *Dosage_AsNeeded) GetAsNeeded() isDosage_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (m *Dosage_AsNeeded) GetBoolean() *Boolean {
	if x, ok := m.GetAsNeeded().(*Dosage_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *Dosage_AsNeeded) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetAsNeeded().(*Dosage_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Dosage_AsNeeded) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Dosage_AsNeeded_OneofMarshaler, _Dosage_AsNeeded_OneofUnmarshaler, _Dosage_AsNeeded_OneofSizer, []interface{}{
		(*Dosage_AsNeeded_Boolean)(nil),
		(*Dosage_AsNeeded_CodeableConcept)(nil),
	}
}

func _Dosage_AsNeeded_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Dosage_AsNeeded)
	// as_needed
	switch x := m.AsNeeded.(type) {
	case *Dosage_AsNeeded_Boolean:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *Dosage_AsNeeded_CodeableConcept:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Dosage_AsNeeded.AsNeeded has unexpected type %T", x)
	}
	return nil
}

func _Dosage_AsNeeded_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Dosage_AsNeeded)
	switch tag {
	case 1: // as_needed.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.AsNeeded = &Dosage_AsNeeded_Boolean{msg}
		return true, err
	case 2: // as_needed.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.AsNeeded = &Dosage_AsNeeded_CodeableConcept{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Dosage_AsNeeded_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Dosage_AsNeeded)
	// as_needed
	switch x := m.AsNeeded.(type) {
	case *Dosage_AsNeeded_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Dosage_AsNeeded_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Amount of medication per dose
type Dosage_Dose struct {
	// Types that are valid to be assigned to Dose:
	//	*Dosage_Dose_Range
	//	*Dosage_Dose_Quantity
	Dose                 isDosage_Dose_Dose `protobuf_oneof:"dose"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Dosage_Dose) Reset()         { *m = Dosage_Dose{} }
func (m *Dosage_Dose) String() string { return proto.CompactTextString(m) }
func (*Dosage_Dose) ProtoMessage()    {}
func (*Dosage_Dose) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{27, 1}
}

func (m *Dosage_Dose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dosage_Dose.Unmarshal(m, b)
}
func (m *Dosage_Dose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dosage_Dose.Marshal(b, m, deterministic)
}
func (m *Dosage_Dose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dosage_Dose.Merge(m, src)
}
func (m *Dosage_Dose) XXX_Size() int {
	return xxx_messageInfo_Dosage_Dose.Size(m)
}
func (m *Dosage_Dose) XXX_DiscardUnknown() {
	xxx_messageInfo_Dosage_Dose.DiscardUnknown(m)
}

var xxx_messageInfo_Dosage_Dose proto.InternalMessageInfo

type isDosage_Dose_Dose interface {
	isDosage_Dose_Dose()
}

type Dosage_Dose_Range struct {
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type Dosage_Dose_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_Dose_Range) isDosage_Dose_Dose() {}

func (*Dosage_Dose_Quantity) isDosage_Dose_Dose() {}

func (m *Dosage_Dose) GetDose() isDosage_Dose_Dose {
	if m != nil {
		return m.Dose
	}
	return nil
}

func (m *Dosage_Dose) GetRange() *Range {
	if x, ok := m.GetDose().(*Dosage_Dose_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Dosage_Dose) GetQuantity() *SimpleQuantity {
	if x, ok := m.GetDose().(*Dosage_Dose_Quantity); ok {
		return x.Quantity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Dosage_Dose) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Dosage_Dose_OneofMarshaler, _Dosage_Dose_OneofUnmarshaler, _Dosage_Dose_OneofSizer, []interface{}{
		(*Dosage_Dose_Range)(nil),
		(*Dosage_Dose_Quantity)(nil),
	}
}

func _Dosage_Dose_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Dosage_Dose)
	// dose
	switch x := m.Dose.(type) {
	case *Dosage_Dose_Range:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *Dosage_Dose_Quantity:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Dosage_Dose.Dose has unexpected type %T", x)
	}
	return nil
}

func _Dosage_Dose_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Dosage_Dose)
	switch tag {
	case 1: // dose.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Dose = &Dosage_Dose_Range{msg}
		return true, err
	case 2: // dose.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleQuantity)
		err := b.DecodeMessage(msg)
		m.Dose = &Dosage_Dose_Quantity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Dosage_Dose_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Dosage_Dose)
	// dose
	switch x := m.Dose.(type) {
	case *Dosage_Dose_Range:
		s := proto.Size(x.Range)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Dosage_Dose_Quantity:
		s := proto.Size(x.Quantity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Amount of medication per unit of time
type Dosage_Rate struct {
	// Types that are valid to be assigned to Rate:
	//	*Dosage_Rate_Ratio
	//	*Dosage_Rate_Range
	//	*Dosage_Rate_Quantity
	Rate                 isDosage_Rate_Rate `protobuf_oneof:"rate"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Dosage_Rate) Reset()         { *m = Dosage_Rate{} }
func (m *Dosage_Rate) String() string { return proto.CompactTextString(m) }
func (*Dosage_Rate) ProtoMessage()    {}
func (*Dosage_Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{27, 2}
}

func (m *Dosage_Rate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dosage_Rate.Unmarshal(m, b)
}
func (m *Dosage_Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dosage_Rate.Marshal(b, m, deterministic)
}
func (m *Dosage_Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dosage_Rate.Merge(m, src)
}
func (m *Dosage_Rate) XXX_Size() int {
	return xxx_messageInfo_Dosage_Rate.Size(m)
}
func (m *Dosage_Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_Dosage_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_Dosage_Rate proto.InternalMessageInfo

type isDosage_Rate_Rate interface {
	isDosage_Rate_Rate()
}

type Dosage_Rate_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Dosage_Rate_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Dosage_Rate_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_Rate_Ratio) isDosage_Rate_Rate() {}

func (*Dosage_Rate_Range) isDosage_Rate_Rate() {}

func (*Dosage_Rate_Quantity) isDosage_Rate_Rate() {}

func (m *Dosage_Rate) GetRate() isDosage_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (m *Dosage_Rate) GetRatio() *Ratio {
	if x, ok := m.GetRate().(*Dosage_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *Dosage_Rate) GetRange() *Range {
	if x, ok := m.GetRate().(*Dosage_Rate_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Dosage_Rate) GetQuantity() *SimpleQuantity {
	if x, ok := m.GetRate().(*Dosage_Rate_Quantity); ok {
		return x.Quantity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Dosage_Rate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Dosage_Rate_OneofMarshaler, _Dosage_Rate_OneofUnmarshaler, _Dosage_Rate_OneofSizer, []interface{}{
		(*Dosage_Rate_Ratio)(nil),
		(*Dosage_Rate_Range)(nil),
		(*Dosage_Rate_Quantity)(nil),
	}
}

func _Dosage_Rate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Dosage_Rate)
	// rate
	switch x := m.Rate.(type) {
	case *Dosage_Rate_Ratio:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *Dosage_Rate_Range:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *Dosage_Rate_Quantity:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Dosage_Rate.Rate has unexpected type %T", x)
	}
	return nil
}

func _Dosage_Rate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Dosage_Rate)
	switch tag {
	case 1: // rate.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.Rate = &Dosage_Rate_Ratio{msg}
		return true, err
	case 2: // rate.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Rate = &Dosage_Rate_Range{msg}
		return true, err
	case 3: // rate.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleQuantity)
		err := b.DecodeMessage(msg)
		m.Rate = &Dosage_Rate_Quantity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Dosage_Rate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Dosage_Rate)
	// rate
	switch x := m.Rate.(type) {
	case *Dosage_Rate_Ratio:
		s := proto.Size(x.Ratio)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Dosage_Rate_Range:
		s := proto.Size(x.Range)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Dosage_Rate_Quantity:
		s := proto.Size(x.Quantity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Auto-generated from StructureDefinition for Duration.
// A length of time.
// See http://hl7.org/fhir/StructureDefinition/Duration
type Duration struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Duration) Reset()         { *m = Duration{} }
func (m *Duration) String() string { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()    {}
func (*Duration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{28}
}

func (m *Duration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Duration.Unmarshal(m, b)
}
func (m *Duration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Duration.Marshal(b, m, deterministic)
}
func (m *Duration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Duration.Merge(m, src)
}
func (m *Duration) XXX_Size() int {
	return xxx_messageInfo_Duration.Size(m)
}
func (m *Duration) XXX_DiscardUnknown() {
	xxx_messageInfo_Duration.DiscardUnknown(m)
}

var xxx_messageInfo_Duration proto.InternalMessageInfo

func (m *Duration) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Duration) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Duration) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Duration) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Duration) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Duration) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Duration) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for HumanName.
// Name of a human - parts and usage.
// See http://hl7.org/fhir/StructureDefinition/HumanName
type HumanName struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// usual | official | temp | nickname | anonymous | old | maiden
	Use *NameUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Text representation of the full name
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Family name (often called 'Surname')
	Family *String `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given []*String `protobuf:"bytes,6,rep,name=given,proto3" json:"given,omitempty"`
	// Parts that come before the name
	Prefix []*String `protobuf:"bytes,7,rep,name=prefix,proto3" json:"prefix,omitempty"`
	// Parts that come after the name
	Suffix []*String `protobuf:"bytes,8,rep,name=suffix,proto3" json:"suffix,omitempty"`
	// Time period when name was/is in use
	Period               *Period  `protobuf:"bytes,9,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HumanName) Reset()         { *m = HumanName{} }
func (m *HumanName) String() string { return proto.CompactTextString(m) }
func (*HumanName) ProtoMessage()    {}
func (*HumanName) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{29}
}

func (m *HumanName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HumanName.Unmarshal(m, b)
}
func (m *HumanName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HumanName.Marshal(b, m, deterministic)
}
func (m *HumanName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HumanName.Merge(m, src)
}
func (m *HumanName) XXX_Size() int {
	return xxx_messageInfo_HumanName.Size(m)
}
func (m *HumanName) XXX_DiscardUnknown() {
	xxx_messageInfo_HumanName.DiscardUnknown(m)
}

var xxx_messageInfo_HumanName proto.InternalMessageInfo

func (m *HumanName) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HumanName) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *HumanName) GetUse() *NameUseCode {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *HumanName) GetText() *String {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *HumanName) GetFamily() *String {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *HumanName) GetGiven() []*String {
	if m != nil {
		return m.Given
	}
	return nil
}

func (m *HumanName) GetPrefix() []*String {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *HumanName) GetSuffix() []*String {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *HumanName) GetPeriod() *Period {
	if m != nil {
		return m.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Identifier.
// An identifier intended for computation.
// See http://hl7.org/fhir/StructureDefinition/Identifier
type Identifier struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// usual | official | temp | secondary (If known)
	Use *IdentifierUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Description of identifier
	Type *CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The namespace for the identifier value
	System *Uri `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`
	// The value that is unique
	Value *String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Time period when id is/was valid for use
	Period *Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that issued id (may be just text)
	Assigner             *Reference `protobuf:"bytes,8,opt,name=assigner,proto3" json:"assigner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{30}
}

func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Identifier) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Identifier) GetUse() *IdentifierUseCode {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *Identifier) GetType() *CodeableConcept {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Identifier) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Identifier) GetValue() *String {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Identifier) GetPeriod() *Period {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *Identifier) GetAssigner() *Reference {
	if m != nil {
		return m.Assigner
	}
	return nil
}

// Auto-generated from StructureDefinition for Meta.
// Metadata about a resource.
// See http://hl7.org/fhir/StructureDefinition/Meta
type Meta struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version specific identifier
	VersionId *Id `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// When the resource version last changed
	LastUpdated *Instant `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Profiles this resource claims to conform to
	Profile []*Uri `protobuf:"bytes,5,rep,name=profile,proto3" json:"profile,omitempty"`
	// Security Labels applied to this resource
	Security []*Coding `protobuf:"bytes,6,rep,name=security,proto3" json:"security,omitempty"`
	// Tags applied to this resource
	Tag                  []*Coding `protobuf:"bytes,7,rep,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{31}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Meta) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Meta) GetVersionId() *Id {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *Meta) GetLastUpdated() *Instant {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *Meta) GetProfile() []*Uri {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Meta) GetSecurity() []*Coding {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *Meta) GetTag() []*Coding {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Auto-generated from StructureDefinition for Money.
// An amount of economic utility in some recognized currency.
// See http://hl7.org/fhir/StructureDefinition/Money
type Money struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Money) Reset()         { *m = Money{} }
func (m *Money) String() string { return proto.CompactTextString(m) }
func (*Money) ProtoMessage()    {}
func (*Money) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{32}
}

func (m *Money) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Money.Unmarshal(m, b)
}
func (m *Money) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Money.Marshal(b, m, deterministic)
}
func (m *Money) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Money.Merge(m, src)
}
func (m *Money) XXX_Size() int {
	return xxx_messageInfo_Money.Size(m)
}
func (m *Money) XXX_DiscardUnknown() {
	xxx_messageInfo_Money.DiscardUnknown(m)
}

var xxx_messageInfo_Money proto.InternalMessageInfo

func (m *Money) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Money) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Money) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Money) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Money) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Money) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Money) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Period.
// Time range defined by start and end date/time.
// See http://hl7.org/fhir/StructureDefinition/Period
type Period struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Starting time with inclusive boundary
	Start *DateTime `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End time with inclusive boundary, if not ongoing
	End                  *DateTime `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Period) Reset()         { *m = Period{} }
func (m *Period) String() string { return proto.CompactTextString(m) }
func (*Period) ProtoMessage()    {}
func (*Period) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{33}
}

func (m *Period) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Period.Unmarshal(m, b)
}
func (m *Period) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Period.Marshal(b, m, deterministic)
}
func (m *Period) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Period.Merge(m, src)
}
func (m *Period) XXX_Size() int {
	return xxx_messageInfo_Period.Size(m)
}
func (m *Period) XXX_DiscardUnknown() {
	xxx_messageInfo_Period.DiscardUnknown(m)
}

var xxx_messageInfo_Period proto.InternalMessageInfo

func (m *Period) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Period) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Period) GetStart() *DateTime {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Period) GetEnd() *DateTime {
	if m != nil {
		return m.End
	}
	return nil
}

// Auto-generated from StructureDefinition for Quantity.
// A measured or measurable amount.
// See http://hl7.org/fhir/StructureDefinition/Quantity
type Quantity struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quantity) Reset()         { *m = Quantity{} }
func (m *Quantity) String() string { return proto.CompactTextString(m) }
func (*Quantity) ProtoMessage()    {}
func (*Quantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{34}
}

func (m *Quantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quantity.Unmarshal(m, b)
}
func (m *Quantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quantity.Marshal(b, m, deterministic)
}
func (m *Quantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quantity.Merge(m, src)
}
func (m *Quantity) XXX_Size() int {
	return xxx_messageInfo_Quantity.Size(m)
}
func (m *Quantity) XXX_DiscardUnknown() {
	xxx_messageInfo_Quantity.DiscardUnknown(m)
}

var xxx_messageInfo_Quantity proto.InternalMessageInfo

func (m *Quantity) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Quantity) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Quantity) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Quantity) GetComparator() *QuantityComparatorCode {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (m *Quantity) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Quantity) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Quantity) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Range.
// Set of values bounded by low and high.
// See http://hl7.org/fhir/StructureDefinition/Range
type Range struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Low limit
	Low *SimpleQuantity `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	// High limit
	High                 *SimpleQuantity `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{35}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Range) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Range) GetLow() *SimpleQuantity {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *Range) GetHigh() *SimpleQuantity {
	if m != nil {
		return m.High
	}
	return nil
}

// Auto-generated from StructureDefinition for Ratio.
// A ratio of two Quantity values - a numerator and a denominator.
// See http://hl7.org/fhir/StructureDefinition/Ratio
type Ratio struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerator value
	Numerator *Quantity `protobuf:"bytes,3,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// Denominator value
	Denominator          *Quantity `protobuf:"bytes,4,opt,name=denominator,proto3" json:"denominator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ratio) Reset()         { *m = Ratio{} }
func (m *Ratio) String() string { return proto.CompactTextString(m) }
func (*Ratio) ProtoMessage()    {}
func (*Ratio) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{36}
}

func (m *Ratio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ratio.Unmarshal(m, b)
}
func (m *Ratio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ratio.Marshal(b, m, deterministic)
}
func (m *Ratio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ratio.Merge(m, src)
}
func (m *Ratio) XXX_Size() int {
	return xxx_messageInfo_Ratio.Size(m)
}
func (m *Ratio) XXX_DiscardUnknown() {
	xxx_messageInfo_Ratio.DiscardUnknown(m)
}

var xxx_messageInfo_Ratio proto.InternalMessageInfo

func (m *Ratio) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Ratio) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Ratio) GetNumerator() *Quantity {
	if m != nil {
		return m.Numerator
	}
	return nil
}

func (m *Ratio) GetDenominator() *Quantity {
	if m != nil {
		return m.Denominator
	}
	return nil
}

// Auto-generated from StructureDefinition for SampledData.
// A series of measurements taken by a device.
// See http://hl7.org/fhir/StructureDefinition/SampledData
type SampledData struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Zero value and units
	Origin *SimpleQuantity `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// Number of milliseconds between samples
	Period *Decimal `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	// Multiply data by this before adding to origin
	Factor *Decimal `protobuf:"bytes,5,opt,name=factor,proto3" json:"factor,omitempty"`
	// Lower limit of detection
	LowerLimit *Decimal `protobuf:"bytes,6,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	// Upper limit of detection
	UpperLimit *Decimal `protobuf:"bytes,7,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	// Number of sample points at each time point
	Dimensions *PositiveInt `protobuf:"bytes,8,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Decimal values with spaces, or "E" | "U" | "L"
	Data                 *String  `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SampledData) Reset()         { *m = SampledData{} }
func (m *SampledData) String() string { return proto.CompactTextString(m) }
func (*SampledData) ProtoMessage()    {}
func (*SampledData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{37}
}

func (m *SampledData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampledData.Unmarshal(m, b)
}
func (m *SampledData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampledData.Marshal(b, m, deterministic)
}
func (m *SampledData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampledData.Merge(m, src)
}
func (m *SampledData) XXX_Size() int {
	return xxx_messageInfo_SampledData.Size(m)
}
func (m *SampledData) XXX_DiscardUnknown() {
	xxx_messageInfo_SampledData.DiscardUnknown(m)
}

var xxx_messageInfo_SampledData proto.InternalMessageInfo

func (m *SampledData) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SampledData) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *SampledData) GetOrigin() *SimpleQuantity {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *SampledData) GetPeriod() *Decimal {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *SampledData) GetFactor() *Decimal {
	if m != nil {
		return m.Factor
	}
	return nil
}

func (m *SampledData) GetLowerLimit() *Decimal {
	if m != nil {
		return m.LowerLimit
	}
	return nil
}

func (m *SampledData) GetUpperLimit() *Decimal {
	if m != nil {
		return m.UpperLimit
	}
	return nil
}

func (m *SampledData) GetDimensions() *PositiveInt {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *SampledData) GetData() *String {
	if m != nil {
		return m.Data
	}
	return nil
}

// Auto-generated from StructureDefinition for Signature.
// A digital Signature - XML DigSig, JWT, Graphical image of signature, etc.
// See http://hl7.org/fhir/StructureDefinition/Signature
type Signature struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Indication of the reason the entity signed the object(s)
	Type []*Coding `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// When the signature was created
	When       *Instant              `protobuf:"bytes,4,opt,name=when,proto3" json:"when,omitempty"`
	Who        *Signature_Who        `protobuf:"bytes,5,opt,name=who,proto3" json:"who,omitempty"`
	OnBehalfOf *Signature_OnBehalfOf `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	// The technical format of the signature
	ContentType *MimeTypeCode `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The actual signature content (XML DigSig. JWT, picture, etc.)
	Blob                 *Base64Binary `protobuf:"bytes,8,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{38}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Signature) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Signature) GetType() []*Coding {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Signature) GetWhen() *Instant {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *Signature) GetWho() *Signature_Who {
	if m != nil {
		return m.Who
	}
	return nil
}

func (m *Signature) GetOnBehalfOf() *Signature_OnBehalfOf {
	if m != nil {
		return m.OnBehalfOf
	}
	return nil
}

func (m *Signature) GetContentType() *MimeTypeCode {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *Signature) GetBlob() *Base64Binary {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Who signed
type Signature_Who struct {
	// Types that are valid to be assigned to Who:
	//	*Signature_Who_Uri
	//	*Signature_Who_Reference
	Who                  isSignature_Who_Who `protobuf_oneof:"who"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Signature_Who) Reset()         { *m = Signature_Who{} }
func (m *Signature_Who) String() string { return proto.CompactTextString(m) }
func (*Signature_Who) ProtoMessage()    {}
func (*Signature_Who) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{38, 0}
}

func (m *Signature_Who) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature_Who.Unmarshal(m, b)
}
func (m *Signature_Who) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature_Who.Marshal(b, m, deterministic)
}
func (m *Signature_Who) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature_Who.Merge(m, src)
}
func (m *Signature_Who) XXX_Size() int {
	return xxx_messageInfo_Signature_Who.Size(m)
}
func (m *Signature_Who) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature_Who.DiscardUnknown(m)
}

var xxx_messageInfo_Signature_Who proto.InternalMessageInfo

type isSignature_Who_Who interface {
	isSignature_Who_Who()
}

type Signature_Who_Uri struct {
	Uri *Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type Signature_Who_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Signature_Who_Uri) isSignature_Who_Who() {}

func (*Signature_Who_Reference) isSignature_Who_Who() {}

func (m *Signature_Who) GetWho() isSignature_Who_Who {
	if m != nil {
		return m.Who
	}
	return nil
}

func (m *Signature_Who) GetUri() *Uri {
	if x, ok := m.GetWho().(*Signature_Who_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *Signature_Who) GetReference() *Reference {
	if x, ok := m.GetWho().(*Signature_Who_Reference); ok {
		return x.Reference
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Signature_Who) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Signature_Who_OneofMarshaler, _Signature_Who_OneofUnmarshaler, _Signature_Who_OneofSizer, []interface{}{
		(*Signature_Who_Uri)(nil),
		(*Signature_Who_Reference)(nil),
	}
}

func _Signature_Who_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Signature_Who)
	// who
	switch x := m.Who.(type) {
	case *Signature_Who_Uri:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *Signature_Who_Reference:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Signature_Who.Who has unexpected type %T", x)
	}
	return nil
}

func _Signature_Who_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Signature_Who)
	switch tag {
	case 1: // who.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.Who = &Signature_Who_Uri{msg}
		return true, err
	case 2: // who.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Who = &Signature_Who_Reference{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Signature_Who_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Signature_Who)
	// who
	switch x := m.Who.(type) {
	case *Signature_Who_Uri:
		s := proto.Size(x.Uri)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Signature_Who_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The party represented
type Signature_OnBehalfOf struct {
	// Types that are valid to be assigned to OnBehalfOf:
	//	*Signature_OnBehalfOf_Uri
	//	*Signature_OnBehalfOf_Reference
	OnBehalfOf           isSignature_OnBehalfOf_OnBehalfOf `protobuf_oneof:"on_behalf_of"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *Signature_OnBehalfOf) Reset()         { *m = Signature_OnBehalfOf{} }
func (m *Signature_OnBehalfOf) String() string { return proto.CompactTextString(m) }
func (*Signature_OnBehalfOf) ProtoMessage()    {}
func (*Signature_OnBehalfOf) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{38, 1}
}

func (m *Signature_OnBehalfOf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature_OnBehalfOf.Unmarshal(m, b)
}
func (m *Signature_OnBehalfOf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature_OnBehalfOf.Marshal(b, m, deterministic)
}
func (m *Signature_OnBehalfOf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature_OnBehalfOf.Merge(m, src)
}
func (m *Signature_OnBehalfOf) XXX_Size() int {
	return xxx_messageInfo_Signature_OnBehalfOf.Size(m)
}
func (m *Signature_OnBehalfOf) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature_OnBehalfOf.DiscardUnknown(m)
}

var xxx_messageInfo_Signature_OnBehalfOf proto.InternalMessageInfo

type isSignature_OnBehalfOf_OnBehalfOf interface {
	isSignature_OnBehalfOf_OnBehalfOf()
}

type Signature_OnBehalfOf_Uri struct {
	Uri *Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type Signature_OnBehalfOf_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Signature_OnBehalfOf_Uri) isSignature_OnBehalfOf_OnBehalfOf() {}

func (*Signature_OnBehalfOf_Reference) isSignature_OnBehalfOf_OnBehalfOf() {}

func (m *Signature_OnBehalfOf) GetOnBehalfOf() isSignature_OnBehalfOf_OnBehalfOf {
	if m != nil {
		return m.OnBehalfOf
	}
	return nil
}

func (m *Signature_OnBehalfOf) GetUri() *Uri {
	if x, ok := m.GetOnBehalfOf().(*Signature_OnBehalfOf_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *Signature_OnBehalfOf) GetReference() *Reference {
	if x, ok := m.GetOnBehalfOf().(*Signature_OnBehalfOf_Reference); ok {
		return x.Reference
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Signature_OnBehalfOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Signature_OnBehalfOf_OneofMarshaler, _Signature_OnBehalfOf_OneofUnmarshaler, _Signature_OnBehalfOf_OneofSizer, []interface{}{
		(*Signature_OnBehalfOf_Uri)(nil),
		(*Signature_OnBehalfOf_Reference)(nil),
	}
}

func _Signature_OnBehalfOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Signature_OnBehalfOf)
	// on_behalf_of
	switch x := m.OnBehalfOf.(type) {
	case *Signature_OnBehalfOf_Uri:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *Signature_OnBehalfOf_Reference:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Signature_OnBehalfOf.OnBehalfOf has unexpected type %T", x)
	}
	return nil
}

func _Signature_OnBehalfOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Signature_OnBehalfOf)
	switch tag {
	case 1: // on_behalf_of.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.OnBehalfOf = &Signature_OnBehalfOf_Uri{msg}
		return true, err
	case 2: // on_behalf_of.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.OnBehalfOf = &Signature_OnBehalfOf_Reference{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Signature_OnBehalfOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Signature_OnBehalfOf)
	// on_behalf_of
	switch x := m.OnBehalfOf.(type) {
	case *Signature_OnBehalfOf_Uri:
		s := proto.Size(x.Uri)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Signature_OnBehalfOf_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Auto-generated from StructureDefinition for SimpleQuantity.
// A fixed quantity (no comparator).
// See http://hl7.org/fhir/StructureDefinition/SimpleQuantity
type SimpleQuantity struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code                 *Code    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleQuantity) Reset()         { *m = SimpleQuantity{} }
func (m *SimpleQuantity) String() string { return proto.CompactTextString(m) }
func (*SimpleQuantity) ProtoMessage()    {}
func (*SimpleQuantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{39}
}

func (m *SimpleQuantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleQuantity.Unmarshal(m, b)
}
func (m *SimpleQuantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleQuantity.Marshal(b, m, deterministic)
}
func (m *SimpleQuantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQuantity.Merge(m, src)
}
func (m *SimpleQuantity) XXX_Size() int {
	return xxx_messageInfo_SimpleQuantity.Size(m)
}
func (m *SimpleQuantity) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQuantity.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQuantity proto.InternalMessageInfo

func (m *SimpleQuantity) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SimpleQuantity) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *SimpleQuantity) GetValue() *Decimal {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SimpleQuantity) GetUnit() *String {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *SimpleQuantity) GetSystem() *Uri {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *SimpleQuantity) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Timing.
// A timing schedule that specifies an event that may occur multiple times.
// See http://hl7.org/fhir/StructureDefinition/Timing
type Timing struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// When the event occurs
	Event  []*DateTime    `protobuf:"bytes,3,rep,name=event,proto3" json:"event,omitempty"`
	Repeat *Timing_Repeat `protobuf:"bytes,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
	// BID | TID | QID | AM | PM | QD | QOD | Q4H | Q6H +
	Code                 *CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Timing) Reset()         { *m = Timing{} }
func (m *Timing) String() string { return proto.CompactTextString(m) }
func (*Timing) ProtoMessage()    {}
func (*Timing) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{40}
}

func (m *Timing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timing.Unmarshal(m, b)
}
func (m *Timing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timing.Marshal(b, m, deterministic)
}
func (m *Timing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timing.Merge(m, src)
}
func (m *Timing) XXX_Size() int {
	return xxx_messageInfo_Timing.Size(m)
}
func (m *Timing) XXX_DiscardUnknown() {
	xxx_messageInfo_Timing.DiscardUnknown(m)
}

var xxx_messageInfo_Timing proto.InternalMessageInfo

func (m *Timing) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Timing) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Timing) GetEvent() []*DateTime {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Timing) GetRepeat() *Timing_Repeat {
	if m != nil {
		return m.Repeat
	}
	return nil
}

func (m *Timing) GetCode() *CodeableConcept {
	if m != nil {
		return m.Code
	}
	return nil
}

// When the event is to occur
type Timing_Repeat struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension          `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Bounds    *Timing_Repeat_Bounds `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// Number of times to repeat
	Count *Integer `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum number of times to repeat
	CountMax *Integer `protobuf:"bytes,5,opt,name=count_max,json=countMax,proto3" json:"count_max,omitempty"`
	// How long when it happens
	Duration *Decimal `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// How long when it happens (Max)
	DurationMax *Decimal `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	// s | min | h | d | wk | mo | a - unit of time (UCUM)
	DurationUnit *UnitsOfTimeCode `protobuf:"bytes,8,opt,name=duration_unit,json=durationUnit,proto3" json:"duration_unit,omitempty"`
	// Event occurs frequency times per period
	Frequency *Integer `protobuf:"bytes,9,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Event occurs up to frequencyMax times per period
	FrequencyMax *Integer `protobuf:"bytes,10,opt,name=frequency_max,json=frequencyMax,proto3" json:"frequency_max,omitempty"`
	// Event occurs frequency times per period
	Period *Decimal `protobuf:"bytes,11,opt,name=period,proto3" json:"period,omitempty"`
	// Upper limit of period (3-4 hours)
	PeriodMax *Decimal `protobuf:"bytes,12,opt,name=period_max,json=periodMax,proto3" json:"period_max,omitempty"`
	// s | min | h | d | wk | mo | a - unit of time (UCUM)
	PeriodUnit *UnitsOfTimeCode `protobuf:"bytes,13,opt,name=period_unit,json=periodUnit,proto3" json:"period_unit,omitempty"`
	// mon | tue | wed | thu | fri | sat | sun
	DayOfWeek []*DaysOfWeekCode `protobuf:"bytes,14,rep,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	// Time of day for action
	TimeOfDay []*Time `protobuf:"bytes,15,rep,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	// Regular life events the event is tied to
	When []*EventTimingCode `protobuf:"bytes,16,rep,name=when,proto3" json:"when,omitempty"`
	// Minutes from event (before or after)
	Offset               *UnsignedInt `protobuf:"bytes,17,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Timing_Repeat) Reset()         { *m = Timing_Repeat{} }
func (m *Timing_Repeat) String() string { return proto.CompactTextString(m) }
func (*Timing_Repeat) ProtoMessage()    {}
func (*Timing_Repeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{40, 0}
}

func (m *Timing_Repeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timing_Repeat.Unmarshal(m, b)
}
func (m *Timing_Repeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timing_Repeat.Marshal(b, m, deterministic)
}
func (m *Timing_Repeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timing_Repeat.Merge(m, src)
}
func (m *Timing_Repeat) XXX_Size() int {
	return xxx_messageInfo_Timing_Repeat.Size(m)
}
func (m *Timing_Repeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Timing_Repeat.DiscardUnknown(m)
}

var xxx_messageInfo_Timing_Repeat proto.InternalMessageInfo

func (m *Timing_Repeat) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Timing_Repeat) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Timing_Repeat) GetBounds() *Timing_Repeat_Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Timing_Repeat) GetCount() *Integer {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *Timing_Repeat) GetCountMax() *Integer {
	if m != nil {
		return m.CountMax
	}
	return nil
}

func (m *Timing_Repeat) GetDuration() *Decimal {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Timing_Repeat) GetDurationMax() *Decimal {
	if m != nil {
		return m.DurationMax
	}
	return nil
}

func (m *Timing_Repeat) GetDurationUnit() *UnitsOfTimeCode {
	if m != nil {
		return m.DurationUnit
	}
	return nil
}

func (m *Timing_Repeat) GetFrequency() *Integer {
	if m != nil {
		return m.Frequency
	}
	return nil
}

func (m *Timing_Repeat) GetFrequencyMax() *Integer {
	if m != nil {
		return m.FrequencyMax
	}
	return nil
}

func (m *Timing_Repeat) GetPeriod() *Decimal {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *Timing_Repeat) GetPeriodMax() *Decimal {
	if m != nil {
		return m.PeriodMax
	}
	return nil
}

func (m *Timing_Repeat) GetPeriodUnit() *UnitsOfTimeCode {
	if m != nil {
		return m.PeriodUnit
	}
	return nil
}

func (m *Timing_Repeat) GetDayOfWeek() []*DaysOfWeekCode {
	if m != nil {
		return m.DayOfWeek
	}
	return nil
}

func (m *Timing_Repeat) GetTimeOfDay() []*Time {
	if m != nil {
		return m.TimeOfDay
	}
	return nil
}

func (m *Timing_Repeat) GetWhen() []*EventTimingCode {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *Timing_Repeat) GetOffset() *UnsignedInt {
	if m != nil {
		return m.Offset
	}
	return nil
}

// Length/Range of lengths, or (Start and/or end) limits
type Timing_Repeat_Bounds struct {
	// Types that are valid to be assigned to Bounds:
	//	*Timing_Repeat_Bounds_Duration
	//	*Timing_Repeat_Bounds_Range
	//	*Timing_Repeat_Bounds_Period
	Bounds               isTiming_Repeat_Bounds_Bounds `protobuf_oneof:"bounds"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Timing_Repeat_Bounds) Reset()         { *m = Timing_Repeat_Bounds{} }
func (m *Timing_Repeat_Bounds) String() string { return proto.CompactTextString(m) }
func (*Timing_Repeat_Bounds) ProtoMessage()    {}
func (*Timing_Repeat_Bounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{40, 0, 0}
}

func (m *Timing_Repeat_Bounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timing_Repeat_Bounds.Unmarshal(m, b)
}
func (m *Timing_Repeat_Bounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timing_Repeat_Bounds.Marshal(b, m, deterministic)
}
func (m *Timing_Repeat_Bounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timing_Repeat_Bounds.Merge(m, src)
}
func (m *Timing_Repeat_Bounds) XXX_Size() int {
	return xxx_messageInfo_Timing_Repeat_Bounds.Size(m)
}
func (m *Timing_Repeat_Bounds) XXX_DiscardUnknown() {
	xxx_messageInfo_Timing_Repeat_Bounds.DiscardUnknown(m)
}

var xxx_messageInfo_Timing_Repeat_Bounds proto.InternalMessageInfo

type isTiming_Repeat_Bounds_Bounds interface {
	isTiming_Repeat_Bounds_Bounds()
}

type Timing_Repeat_Bounds_Duration struct {
	Duration *Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type Timing_Repeat_Bounds_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Timing_Repeat_Bounds_Period struct {
	Period *Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

func (*Timing_Repeat_Bounds_Duration) isTiming_Repeat_Bounds_Bounds() {}

func (*Timing_Repeat_Bounds_Range) isTiming_Repeat_Bounds_Bounds() {}

func (*Timing_Repeat_Bounds_Period) isTiming_Repeat_Bounds_Bounds() {}

func (m *Timing_Repeat_Bounds) GetBounds() isTiming_Repeat_Bounds_Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Timing_Repeat_Bounds) GetDuration() *Duration {
	if x, ok := m.GetBounds().(*Timing_Repeat_Bounds_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *Timing_Repeat_Bounds) GetRange() *Range {
	if x, ok := m.GetBounds().(*Timing_Repeat_Bounds_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Timing_Repeat_Bounds) GetPeriod() *Period {
	if x, ok := m.GetBounds().(*Timing_Repeat_Bounds_Period); ok {
		return x.Period
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Timing_Repeat_Bounds) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Timing_Repeat_Bounds_OneofMarshaler, _Timing_Repeat_Bounds_OneofUnmarshaler, _Timing_Repeat_Bounds_OneofSizer, []interface{}{
		(*Timing_Repeat_Bounds_Duration)(nil),
		(*Timing_Repeat_Bounds_Range)(nil),
		(*Timing_Repeat_Bounds_Period)(nil),
	}
}

func _Timing_Repeat_Bounds_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Timing_Repeat_Bounds)
	// bounds
	switch x := m.Bounds.(type) {
	case *Timing_Repeat_Bounds_Duration:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *Timing_Repeat_Bounds_Range:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *Timing_Repeat_Bounds_Period:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Timing_Repeat_Bounds.Bounds has unexpected type %T", x)
	}
	return nil
}

func _Timing_Repeat_Bounds_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Timing_Repeat_Bounds)
	switch tag {
	case 1: // bounds.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Bounds = &Timing_Repeat_Bounds_Duration{msg}
		return true, err
	case 2: // bounds.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Bounds = &Timing_Repeat_Bounds_Range{msg}
		return true, err
	case 3: // bounds.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Bounds = &Timing_Repeat_Bounds_Period{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Timing_Repeat_Bounds_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Timing_Repeat_Bounds)
	// bounds
	switch x := m.Bounds.(type) {
	case *Timing_Repeat_Bounds_Duration:
		s := proto.Size(x.Duration)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Timing_Repeat_Bounds_Range:
		s := proto.Size(x.Range)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Timing_Repeat_Bounds_Period:
		s := proto.Size(x.Period)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Optional Extensions Element
// See https://www.hl7.org/fhir/datatypes.html#Extension
type Extension struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// identifies the meaning of the extension
	Url   *Uri             `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Value *Extension_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Extension) Reset()         { *m = Extension{} }
func (m *Extension) String() string { return proto.CompactTextString(m) }
func (*Extension) ProtoMessage()    {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{41}
}

func (m *Extension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extension.Unmarshal(m, b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return xxx_messageInfo_Extension.Size(m)
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

func (m *Extension) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Extension) GetUrl() *Uri {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Extension) GetValue() *Extension_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Extension) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Value of extension
type Extension_Value struct {
	// Types that are valid to be assigned to Value:
	//	*Extension_Value_Base64Binary
	//	*Extension_Value_Boolean
	//	*Extension_Value_Code
	//	*Extension_Value_Date
	//	*Extension_Value_DateTime
	//	*Extension_Value_Decimal
	//	*Extension_Value_Id
	//	*Extension_Value_Instant
	//	*Extension_Value_Integer
	//	*Extension_Value_Markdown
	//	*Extension_Value_Oid
	//	*Extension_Value_PositiveInt
	//	*Extension_Value_StringValue
	//	*Extension_Value_Time
	//	*Extension_Value_UnsignedInt
	//	*Extension_Value_Uri
	//	*Extension_Value_Address
	//	*Extension_Value_Age
	//	*Extension_Value_Annotation
	//	*Extension_Value_Attachment
	//	*Extension_Value_CodeableConcept
	//	*Extension_Value_Coding
	//	*Extension_Value_ContactPoint
	//	*Extension_Value_Count
	//	*Extension_Value_Distance
	//	*Extension_Value_Duration
	//	*Extension_Value_HumanName
	//	*Extension_Value_Identifier
	//	*Extension_Value_Money
	//	*Extension_Value_Period
	//	*Extension_Value_Quantity
	//	*Extension_Value_Range
	//	*Extension_Value_Ratio
	//	*Extension_Value_Reference
	//	*Extension_Value_SampledData
	//	*Extension_Value_Signature
	//	*Extension_Value_Timing
	//	*Extension_Value_Meta
	Value                isExtension_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Extension_Value) Reset()         { *m = Extension_Value{} }
func (m *Extension_Value) String() string { return proto.CompactTextString(m) }
func (*Extension_Value) ProtoMessage()    {}
func (*Extension_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{41, 0}
}

func (m *Extension_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extension_Value.Unmarshal(m, b)
}
func (m *Extension_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extension_Value.Marshal(b, m, deterministic)
}
func (m *Extension_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension_Value.Merge(m, src)
}
func (m *Extension_Value) XXX_Size() int {
	return xxx_messageInfo_Extension_Value.Size(m)
}
func (m *Extension_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Extension_Value proto.InternalMessageInfo

type isExtension_Value_Value interface {
	isExtension_Value_Value()
}

type Extension_Value_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type Extension_Value_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type Extension_Value_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type Extension_Value_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type Extension_Value_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Extension_Value_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type Extension_Value_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type Extension_Value_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type Extension_Value_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type Extension_Value_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type Extension_Value_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type Extension_Value_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type Extension_Value_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type Extension_Value_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type Extension_Value_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type Extension_Value_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type Extension_Value_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type Extension_Value_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type Extension_Value_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type Extension_Value_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type Extension_Value_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Extension_Value_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type Extension_Value_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type Extension_Value_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type Extension_Value_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type Extension_Value_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type Extension_Value_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type Extension_Value_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type Extension_Value_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type Extension_Value_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type Extension_Value_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type Extension_Value_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type Extension_Value_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type Extension_Value_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type Extension_Value_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Extension_Value_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type Extension_Value_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type Extension_Value_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*Extension_Value_Base64Binary) isExtension_Value_Value() {}

func (*Extension_Value_Boolean) isExtension_Value_Value() {}

func (*Extension_Value_Code) isExtension_Value_Value() {}

func (*Extension_Value_Date) isExtension_Value_Value() {}

func (*Extension_Value_DateTime) isExtension_Value_Value() {}

func (*Extension_Value_Decimal) isExtension_Value_Value() {}

func (*Extension_Value_Id) isExtension_Value_Value() {}

func (*Extension_Value_Instant) isExtension_Value_Value() {}

func (*Extension_Value_Integer) isExtension_Value_Value() {}

func (*Extension_Value_Markdown) isExtension_Value_Value() {}

func (*Extension_Value_Oid) isExtension_Value_Value() {}

func (*Extension_Value_PositiveInt) isExtension_Value_Value() {}

func (*Extension_Value_StringValue) isExtension_Value_Value() {}

func (*Extension_Value_Time) isExtension_Value_Value() {}

func (*Extension_Value_UnsignedInt) isExtension_Value_Value() {}

func (*Extension_Value_Uri) isExtension_Value_Value() {}

func (*Extension_Value_Address) isExtension_Value_Value() {}

func (*Extension_Value_Age) isExtension_Value_Value() {}

func (*Extension_Value_Annotation) isExtension_Value_Value() {}

func (*Extension_Value_Attachment) isExtension_Value_Value() {}

func (*Extension_Value_CodeableConcept) isExtension_Value_Value() {}

func (*Extension_Value_Coding) isExtension_Value_Value() {}

func (*Extension_Value_ContactPoint) isExtension_Value_Value() {}

func (*Extension_Value_Count) isExtension_Value_Value() {}

func (*Extension_Value_Distance) isExtension_Value_Value() {}

func (*Extension_Value_Duration) isExtension_Value_Value() {}

func (*Extension_Value_HumanName) isExtension_Value_Value() {}

func (*Extension_Value_Identifier) isExtension_Value_Value() {}

func (*Extension_Value_Money) isExtension_Value_Value() {}

func (*Extension_Value_Period) isExtension_Value_Value() {}

func (*Extension_Value_Quantity) isExtension_Value_Value() {}

func (*Extension_Value_Range) isExtension_Value_Value() {}

func (*Extension_Value_Ratio) isExtension_Value_Value() {}

func (*Extension_Value_Reference) isExtension_Value_Value() {}

func (*Extension_Value_SampledData) isExtension_Value_Value() {}

func (*Extension_Value_Signature) isExtension_Value_Value() {}

func (*Extension_Value_Timing) isExtension_Value_Value() {}

func (*Extension_Value_Meta) isExtension_Value_Value() {}

func (m *Extension_Value) GetValue() isExtension_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Extension_Value) GetBase64Binary() *Base64Binary {
	if x, ok := m.GetValue().(*Extension_Value_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (m *Extension_Value) GetBoolean() *Boolean {
	if x, ok := m.GetValue().(*Extension_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *Extension_Value) GetCode() *Code {
	if x, ok := m.GetValue().(*Extension_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (m *Extension_Value) GetDate() *Date {
	if x, ok := m.GetValue().(*Extension_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (m *Extension_Value) GetDateTime() *DateTime {
	if x, ok := m.GetValue().(*Extension_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *Extension_Value) GetDecimal() *Decimal {
	if x, ok := m.GetValue().(*Extension_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *Extension_Value) GetId() *Id {
	if x, ok := m.GetValue().(*Extension_Value_Id); ok {
		return x.Id
	}
	return nil
}

func (m *Extension_Value) GetInstant() *Instant {
	if x, ok := m.GetValue().(*Extension_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *Extension_Value) GetInteger() *Integer {
	if x, ok := m.GetValue().(*Extension_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *Extension_Value) GetMarkdown() *Markdown {
	if x, ok := m.GetValue().(*Extension_Value_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (m *Extension_Value) GetOid() *Oid {
	if x, ok := m.GetValue().(*Extension_Value_Oid); ok {
		return x.Oid
	}
	return nil
}

func (m *Extension_Value) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetValue().(*Extension_Value_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *Extension_Value) GetStringValue() *String {
	if x, ok := m.GetValue().(*Extension_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *Extension_Value) GetTime() *Time {
	if x, ok := m.GetValue().(*Extension_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (m *Extension_Value) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetValue().(*Extension_Value_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *Extension_Value) GetUri() *Uri {
	if x, ok := m.GetValue().(*Extension_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *Extension_Value) GetAddress() *Address {
	if x, ok := m.GetValue().(*Extension_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (m *Extension_Value) GetAge() *Age {
	if x, ok := m.GetValue().(*Extension_Value_Age); ok {
		return x.Age
	}
	return nil
}

func (m *Extension_Value) GetAnnotation() *Annotation {
	if x, ok := m.GetValue().(*Extension_Value_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (m *Extension_Value) GetAttachment() *Attachment {
	if x, ok := m.GetValue().(*Extension_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (m *Extension_Value) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetValue().(*Extension_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *Extension_Value) GetCoding() *Coding {
	if x, ok := m.GetValue().(*Extension_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (m *Extension_Value) GetContactPoint() *ContactPoint {
	if x, ok := m.GetValue().(*Extension_Value_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (m *Extension_Value) GetCount() *Count {
	if x, ok := m.GetValue().(*Extension_Value_Count); ok {
		return x.Count
	}
	return nil
}

func (m *Extension_Value) GetDistance() *Distance {
	if x, ok := m.GetValue().(*Extension_Value_Distance); ok {
		return x.Distance
	}
	return nil
}

func (m *Extension_Value) GetDuration() *Duration {
	if x, ok := m.GetValue().(*Extension_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *Extension_Value) GetHumanName() *HumanName {
	if x, ok := m.GetValue().(*Extension_Value_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (m *Extension_Value) GetIdentifier() *Identifier {
	if x, ok := m.GetValue().(*Extension_Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *Extension_Value) GetMoney() *Money {
	if x, ok := m.GetValue().(*Extension_Value_Money); ok {
		return x.Money
	}
	return nil
}

func (m *Extension_Value) GetPeriod() *Period {
	if x, ok := m.GetValue().(*Extension_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (m *Extension_Value) GetQuantity() *Quantity {
	if x, ok := m.GetValue().(*Extension_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *Extension_Value) GetRange() *Range {
	if x, ok := m.GetValue().(*Extension_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Extension_Value) GetRatio() *Ratio {
	if x, ok := m.GetValue().(*Extension_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *Extension_Value) GetReference() *Reference {
	if x, ok := m.GetValue().(*Extension_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *Extension_Value) GetSampledData() *SampledData {
	if x, ok := m.GetValue().(*Extension_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (m *Extension_Value) GetSignature() *Signature {
	if x, ok := m.GetValue().(*Extension_Value_Signature); ok {
		return x.Signature
	}
	return nil
}

func (m *Extension_Value) GetTiming() *Timing {
	if x, ok := m.GetValue().(*Extension_Value_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *Extension_Value) GetMeta() *Meta {
	if x, ok := m.GetValue().(*Extension_Value_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Extension_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Extension_Value_OneofMarshaler, _Extension_Value_OneofUnmarshaler, _Extension_Value_OneofSizer, []interface{}{
		(*Extension_Value_Base64Binary)(nil),
		(*Extension_Value_Boolean)(nil),
		(*Extension_Value_Code)(nil),
		(*Extension_Value_Date)(nil),
		(*Extension_Value_DateTime)(nil),
		(*Extension_Value_Decimal)(nil),
		(*Extension_Value_Id)(nil),
		(*Extension_Value_Instant)(nil),
		(*Extension_Value_Integer)(nil),
		(*Extension_Value_Markdown)(nil),
		(*Extension_Value_Oid)(nil),
		(*Extension_Value_PositiveInt)(nil),
		(*Extension_Value_StringValue)(nil),
		(*Extension_Value_Time)(nil),
		(*Extension_Value_UnsignedInt)(nil),
		(*Extension_Value_Uri)(nil),
		(*Extension_Value_Address)(nil),
		(*Extension_Value_Age)(nil),
		(*Extension_Value_Annotation)(nil),
		(*Extension_Value_Attachment)(nil),
		(*Extension_Value_CodeableConcept)(nil),
		(*Extension_Value_Coding)(nil),
		(*Extension_Value_ContactPoint)(nil),
		(*Extension_Value_Count)(nil),
		(*Extension_Value_Distance)(nil),
		(*Extension_Value_Duration)(nil),
		(*Extension_Value_HumanName)(nil),
		(*Extension_Value_Identifier)(nil),
		(*Extension_Value_Money)(nil),
		(*Extension_Value_Period)(nil),
		(*Extension_Value_Quantity)(nil),
		(*Extension_Value_Range)(nil),
		(*Extension_Value_Ratio)(nil),
		(*Extension_Value_Reference)(nil),
		(*Extension_Value_SampledData)(nil),
		(*Extension_Value_Signature)(nil),
		(*Extension_Value_Timing)(nil),
		(*Extension_Value_Meta)(nil),
	}
}

func _Extension_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Extension_Value)
	// value
	switch x := m.Value.(type) {
	case *Extension_Value_Base64Binary:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base64Binary); err != nil {
			return err
		}
	case *Extension_Value_Boolean:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *Extension_Value_Code:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *Extension_Value_Date:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *Extension_Value_DateTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *Extension_Value_Decimal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *Extension_Value_Id:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Id); err != nil {
			return err
		}
	case *Extension_Value_Instant:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *Extension_Value_Integer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *Extension_Value_Markdown:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Markdown); err != nil {
			return err
		}
	case *Extension_Value_Oid:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oid); err != nil {
			return err
		}
	case *Extension_Value_PositiveInt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *Extension_Value_StringValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *Extension_Value_Time:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *Extension_Value_UnsignedInt:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *Extension_Value_Uri:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *Extension_Value_Address:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *Extension_Value_Age:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Age); err != nil {
			return err
		}
	case *Extension_Value_Annotation:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *Extension_Value_Attachment:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attachment); err != nil {
			return err
		}
	case *Extension_Value_CodeableConcept:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *Extension_Value_Coding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coding); err != nil {
			return err
		}
	case *Extension_Value_ContactPoint:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactPoint); err != nil {
			return err
		}
	case *Extension_Value_Count:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Count); err != nil {
			return err
		}
	case *Extension_Value_Distance:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distance); err != nil {
			return err
		}
	case *Extension_Value_Duration:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *Extension_Value_HumanName:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanName); err != nil {
			return err
		}
	case *Extension_Value_Identifier:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identifier); err != nil {
			return err
		}
	case *Extension_Value_Money:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Money); err != nil {
			return err
		}
	case *Extension_Value_Period:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *Extension_Value_Quantity:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *Extension_Value_Range:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *Extension_Value_Ratio:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *Extension_Value_Reference:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *Extension_Value_SampledData:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SampledData); err != nil {
			return err
		}
	case *Extension_Value_Signature:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signature); err != nil {
			return err
		}
	case *Extension_Value_Timing:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *Extension_Value_Meta:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Extension_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Extension_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Extension_Value)
	switch tag {
	case 1: // value.base64_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Base64Binary)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Base64Binary{msg}
		return true, err
	case 2: // value.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Boolean{msg}
		return true, err
	case 3: // value.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Code{msg}
		return true, err
	case 4: // value.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Date{msg}
		return true, err
	case 5: // value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_DateTime{msg}
		return true, err
	case 6: // value.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Decimal{msg}
		return true, err
	case 7: // value.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Id)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Id{msg}
		return true, err
	case 8: // value.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Instant{msg}
		return true, err
	case 9: // value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Integer{msg}
		return true, err
	case 10: // value.markdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Markdown)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Markdown{msg}
		return true, err
	case 11: // value.oid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oid)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Oid{msg}
		return true, err
	case 12: // value.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_PositiveInt{msg}
		return true, err
	case 13: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_StringValue{msg}
		return true, err
	case 14: // value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Time{msg}
		return true, err
	case 15: // value.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_UnsignedInt{msg}
		return true, err
	case 16: // value.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Uri{msg}
		return true, err
	case 17: // value.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Address)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Address{msg}
		return true, err
	case 18: // value.age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Age)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Age{msg}
		return true, err
	case 19: // value.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Annotation)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Annotation{msg}
		return true, err
	case 20: // value.attachment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attachment)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Attachment{msg}
		return true, err
	case 21: // value.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_CodeableConcept{msg}
		return true, err
	case 22: // value.coding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Coding)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Coding{msg}
		return true, err
	case 23: // value.contact_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactPoint)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_ContactPoint{msg}
		return true, err
	case 24: // value.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Count)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Count{msg}
		return true, err
	case 25: // value.distance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distance)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Distance{msg}
		return true, err
	case 26: // value.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Duration{msg}
		return true, err
	case 27: // value.human_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanName)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_HumanName{msg}
		return true, err
	case 28: // value.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Identifier)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Identifier{msg}
		return true, err
	case 29: // value.money
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Money)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Money{msg}
		return true, err
	case 30: // value.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Period{msg}
		return true, err
	case 31: // value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Quantity{msg}
		return true, err
	case 32: // value.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Range{msg}
		return true, err
	case 33: // value.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Ratio{msg}
		return true, err
	case 34: // value.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Reference{msg}
		return true, err
	case 35: // value.sampled_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SampledData)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_SampledData{msg}
		return true, err
	case 36: // value.signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signature)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Signature{msg}
		return true, err
	case 37: // value.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Timing{msg}
		return true, err
	case 38: // value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Meta)
		err := b.DecodeMessage(msg)
		m.Value = &Extension_Value_Meta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Extension_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Extension_Value)
	// value
	switch x := m.Value.(type) {
	case *Extension_Value_Base64Binary:
		s := proto.Size(x.Base64Binary)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Code:
		s := proto.Size(x.Code)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Id:
		s := proto.Size(x.Id)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Markdown:
		s := proto.Size(x.Markdown)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Oid:
		s := proto.Size(x.Oid)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Uri:
		s := proto.Size(x.Uri)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Address:
		s := proto.Size(x.Address)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Age:
		s := proto.Size(x.Age)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Annotation:
		s := proto.Size(x.Annotation)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Attachment:
		s := proto.Size(x.Attachment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Coding:
		s := proto.Size(x.Coding)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_ContactPoint:
		s := proto.Size(x.ContactPoint)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Count:
		s := proto.Size(x.Count)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Distance:
		s := proto.Size(x.Distance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Duration:
		s := proto.Size(x.Duration)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_HumanName:
		s := proto.Size(x.HumanName)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Identifier:
		s := proto.Size(x.Identifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Money:
		s := proto.Size(x.Money)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Period:
		s := proto.Size(x.Period)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Quantity:
		s := proto.Size(x.Quantity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Ratio:
		s := proto.Size(x.Ratio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Reference:
		s := proto.Size(x.Reference)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_SampledData:
		s := proto.Size(x.SampledData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Signature:
		s := proto.Size(x.Signature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Timing:
		s := proto.Size(x.Timing)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Extension_Value_Meta:
		s := proto.Size(x.Meta)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Specialization of Coding that drops the system field.
// Fields that use this message must be annotated with
// fhir_inlined_coding_system.
type CodingWithFixedSystem struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Symbol in syntax defined by the system
	Code *Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected         *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodingWithFixedSystem) Reset()         { *m = CodingWithFixedSystem{} }
func (m *CodingWithFixedSystem) String() string { return proto.CompactTextString(m) }
func (*CodingWithFixedSystem) ProtoMessage()    {}
func (*CodingWithFixedSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{42}
}

func (m *CodingWithFixedSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodingWithFixedSystem.Unmarshal(m, b)
}
func (m *CodingWithFixedSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodingWithFixedSystem.Marshal(b, m, deterministic)
}
func (m *CodingWithFixedSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodingWithFixedSystem.Merge(m, src)
}
func (m *CodingWithFixedSystem) XXX_Size() int {
	return xxx_messageInfo_CodingWithFixedSystem.Size(m)
}
func (m *CodingWithFixedSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_CodingWithFixedSystem.DiscardUnknown(m)
}

var xxx_messageInfo_CodingWithFixedSystem proto.InternalMessageInfo

func (m *CodingWithFixedSystem) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CodingWithFixedSystem) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *CodingWithFixedSystem) GetVersion() *String {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CodingWithFixedSystem) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CodingWithFixedSystem) GetDisplay() *String {
	if m != nil {
		return m.Display
	}
	return nil
}

func (m *CodingWithFixedSystem) GetUserSelected() *Boolean {
	if m != nil {
		return m.UserSelected
	}
	return nil
}

// Specialization of Coding that drops the system and code fields.
// Fields that use this message must be annotated with
// fhir_inlined_coding_system and fhir_inlined_coding_code.
type CodingWithFixedCode struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected         *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodingWithFixedCode) Reset()         { *m = CodingWithFixedCode{} }
func (m *CodingWithFixedCode) String() string { return proto.CompactTextString(m) }
func (*CodingWithFixedCode) ProtoMessage()    {}
func (*CodingWithFixedCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{43}
}

func (m *CodingWithFixedCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodingWithFixedCode.Unmarshal(m, b)
}
func (m *CodingWithFixedCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodingWithFixedCode.Marshal(b, m, deterministic)
}
func (m *CodingWithFixedCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodingWithFixedCode.Merge(m, src)
}
func (m *CodingWithFixedCode) XXX_Size() int {
	return xxx_messageInfo_CodingWithFixedCode.Size(m)
}
func (m *CodingWithFixedCode) XXX_DiscardUnknown() {
	xxx_messageInfo_CodingWithFixedCode.DiscardUnknown(m)
}

var xxx_messageInfo_CodingWithFixedCode proto.InternalMessageInfo

func (m *CodingWithFixedCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CodingWithFixedCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *CodingWithFixedCode) GetVersion() *String {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CodingWithFixedCode) GetDisplay() *String {
	if m != nil {
		return m.Display
	}
	return nil
}

func (m *CodingWithFixedCode) GetUserSelected() *Boolean {
	if m != nil {
		return m.UserSelected
	}
	return nil
}

// A reference from one resource to another
// See https://www.hl7.org/fhir/datatypes.html#Reference
type Reference struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Literal reference, Relative, internal or absolute URL
	//
	// Types that are valid to be assigned to Reference:
	//	*Reference_Uri
	//	*Reference_Fragment
	//	*Reference_AccountId
	//	*Reference_ActivityDefinitionId
	//	*Reference_AdverseEventId
	//	*Reference_AllergyIntoleranceId
	//	*Reference_AppointmentId
	//	*Reference_AppointmentResponseId
	//	*Reference_AuditEventId
	//	*Reference_BasicId
	//	*Reference_BinaryId
	//	*Reference_BodySiteId
	//	*Reference_BundleId
	//	*Reference_CapabilityStatementId
	//	*Reference_CarePlanId
	//	*Reference_CareTeamId
	//	*Reference_ChargeItemId
	//	*Reference_ClaimId
	//	*Reference_ClaimResponseId
	//	*Reference_ClinicalImpressionId
	//	*Reference_CodeSystemId
	//	*Reference_CommunicationId
	//	*Reference_CommunicationRequestId
	//	*Reference_CompartmentDefinitionId
	//	*Reference_CompositionId
	//	*Reference_ConceptMapId
	//	*Reference_ConditionId
	//	*Reference_ConsentId
	//	*Reference_ContractId
	//	*Reference_CoverageId
	//	*Reference_DataElementId
	//	*Reference_DetectedIssueId
	//	*Reference_DeviceId
	//	*Reference_DeviceComponentId
	//	*Reference_DeviceMetricId
	//	*Reference_DeviceRequestId
	//	*Reference_DeviceUsestatementId
	//	*Reference_DiagnosticReportId
	//	*Reference_DocumentManifestId
	//	*Reference_DocumentReferenceId
	//	*Reference_EligibilityRequestId
	//	*Reference_EligibilityResponseId
	//	*Reference_EncounterId
	//	*Reference_EndpointId
	//	*Reference_EnrollmentRequestId
	//	*Reference_EnrollmentResponseId
	//	*Reference_EpisodeOfcareId
	//	*Reference_ExpansionProfileId
	//	*Reference_ExplanationOfbenefitId
	//	*Reference_FamilyMemberhistoryId
	//	*Reference_FlagId
	//	*Reference_GoalId
	//	*Reference_GraphDefinitionId
	//	*Reference_GroupId
	//	*Reference_GuidanceResponseId
	//	*Reference_HealthcareServiceId
	//	*Reference_ImagingManifestId
	//	*Reference_ImagingStudyId
	//	*Reference_ImmunizationId
	//	*Reference_ImmunizationRecommendationId
	//	*Reference_ImplementationGuideId
	//	*Reference_LibraryId
	//	*Reference_LinkageId
	//	*Reference_ListId
	//	*Reference_LocationId
	//	*Reference_MeasureId
	//	*Reference_MeasureReportId
	//	*Reference_MediaId
	//	*Reference_MedicationId
	//	*Reference_MedicationAdministrationId
	//	*Reference_MedicationDispenseId
	//	*Reference_MedicationRequestId
	//	*Reference_MedicationStatementId
	//	*Reference_MessageDefinitionId
	//	*Reference_MessageHeaderId
	//	*Reference_NamingSystemId
	//	*Reference_NutritionOrderId
	//	*Reference_ObservationId
	//	*Reference_OperationDefinitionId
	//	*Reference_OperationOutcomeId
	//	*Reference_OrganizationId
	//	*Reference_ParametersId
	//	*Reference_PatientId
	//	*Reference_PaymentNoticeId
	//	*Reference_PaymentReconciliationId
	//	*Reference_PersonId
	//	*Reference_PlanDefinitionId
	//	*Reference_PractitionerId
	//	*Reference_PractitionerRoleId
	//	*Reference_ProcedureId
	//	*Reference_ProcedureRequestId
	//	*Reference_ProcessRequestId
	//	*Reference_ProcessResponseId
	//	*Reference_ProvenanceId
	//	*Reference_QuestionnaireId
	//	*Reference_QuestionnaireResponseId
	//	*Reference_ReferralRequestId
	//	*Reference_RelatedPersonId
	//	*Reference_RequestGroupId
	//	*Reference_ResearchStudyId
	//	*Reference_ResearchSubjectId
	//	*Reference_RiskAssessmentId
	//	*Reference_ScheduleId
	//	*Reference_SearchParameterId
	//	*Reference_SequenceId
	//	*Reference_ServiceDefinitionId
	//	*Reference_SlotId
	//	*Reference_SpecimenId
	//	*Reference_StructureDefinitionId
	//	*Reference_StructureMapId
	//	*Reference_SubscriptionId
	//	*Reference_SubstanceId
	//	*Reference_SupplyDeliveryId
	//	*Reference_SupplyRequestId
	//	*Reference_TaskId
	//	*Reference_TestReportId
	//	*Reference_TestScriptId
	//	*Reference_ValueSetId
	//	*Reference_VisionPrescriptionId
	Reference isReference_Reference `protobuf_oneof:"reference"`
	// Logical reference, when literal reference is not known
	Identifier *Identifier `protobuf:"bytes,122,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Text alternative for the resource
	Display              *String  `protobuf:"bytes,123,opt,name=display,proto3" json:"display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reference) Reset()         { *m = Reference{} }
func (m *Reference) String() string { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()    {}
func (*Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{44}
}

func (m *Reference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reference.Unmarshal(m, b)
}
func (m *Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reference.Marshal(b, m, deterministic)
}
func (m *Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reference.Merge(m, src)
}
func (m *Reference) XXX_Size() int {
	return xxx_messageInfo_Reference.Size(m)
}
func (m *Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_Reference proto.InternalMessageInfo

func (m *Reference) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Reference) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

type isReference_Reference interface {
	isReference_Reference()
}

type Reference_Uri struct {
	Uri *String `protobuf:"bytes,3,opt,name=uri,json=reference,proto3,oneof"`
}

type Reference_Fragment struct {
	Fragment *String `protobuf:"bytes,4,opt,name=fragment,proto3,oneof"`
}

type Reference_AccountId struct {
	AccountId *ReferenceId `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3,oneof"`
}

type Reference_ActivityDefinitionId struct {
	ActivityDefinitionId *ReferenceId `protobuf:"bytes,6,opt,name=activity_definition_id,json=activityDefinitionId,proto3,oneof"`
}

type Reference_AdverseEventId struct {
	AdverseEventId *ReferenceId `protobuf:"bytes,7,opt,name=adverse_event_id,json=adverseEventId,proto3,oneof"`
}

type Reference_AllergyIntoleranceId struct {
	AllergyIntoleranceId *ReferenceId `protobuf:"bytes,8,opt,name=allergy_intolerance_id,json=allergyIntoleranceId,proto3,oneof"`
}

type Reference_AppointmentId struct {
	AppointmentId *ReferenceId `protobuf:"bytes,9,opt,name=appointment_id,json=appointmentId,proto3,oneof"`
}

type Reference_AppointmentResponseId struct {
	AppointmentResponseId *ReferenceId `protobuf:"bytes,10,opt,name=appointment_response_id,json=appointmentResponseId,proto3,oneof"`
}

type Reference_AuditEventId struct {
	AuditEventId *ReferenceId `protobuf:"bytes,11,opt,name=audit_event_id,json=auditEventId,proto3,oneof"`
}

type Reference_BasicId struct {
	BasicId *ReferenceId `protobuf:"bytes,12,opt,name=basic_id,json=basicId,proto3,oneof"`
}

type Reference_BinaryId struct {
	BinaryId *ReferenceId `protobuf:"bytes,13,opt,name=binary_id,json=binaryId,proto3,oneof"`
}

type Reference_BodySiteId struct {
	BodySiteId *ReferenceId `protobuf:"bytes,14,opt,name=body_site_id,json=bodySiteId,proto3,oneof"`
}

type Reference_BundleId struct {
	BundleId *ReferenceId `protobuf:"bytes,15,opt,name=bundle_id,json=bundleId,proto3,oneof"`
}

type Reference_CapabilityStatementId struct {
	CapabilityStatementId *ReferenceId `protobuf:"bytes,16,opt,name=capability_statement_id,json=capabilityStatementId,proto3,oneof"`
}

type Reference_CarePlanId struct {
	CarePlanId *ReferenceId `protobuf:"bytes,17,opt,name=care_plan_id,json=carePlanId,proto3,oneof"`
}

type Reference_CareTeamId struct {
	CareTeamId *ReferenceId `protobuf:"bytes,18,opt,name=care_team_id,json=careTeamId,proto3,oneof"`
}

type Reference_ChargeItemId struct {
	ChargeItemId *ReferenceId `protobuf:"bytes,19,opt,name=charge_item_id,json=chargeItemId,proto3,oneof"`
}

type Reference_ClaimId struct {
	ClaimId *ReferenceId `protobuf:"bytes,20,opt,name=claim_id,json=claimId,proto3,oneof"`
}

type Reference_ClaimResponseId struct {
	ClaimResponseId *ReferenceId `protobuf:"bytes,21,opt,name=claim_response_id,json=claimResponseId,proto3,oneof"`
}

type Reference_ClinicalImpressionId struct {
	ClinicalImpressionId *ReferenceId `protobuf:"bytes,22,opt,name=clinical_impression_id,json=clinicalImpressionId,proto3,oneof"`
}

type Reference_CodeSystemId struct {
	CodeSystemId *ReferenceId `protobuf:"bytes,23,opt,name=code_system_id,json=codeSystemId,proto3,oneof"`
}

type Reference_CommunicationId struct {
	CommunicationId *ReferenceId `protobuf:"bytes,24,opt,name=communication_id,json=communicationId,proto3,oneof"`
}

type Reference_CommunicationRequestId struct {
	CommunicationRequestId *ReferenceId `protobuf:"bytes,25,opt,name=communication_request_id,json=communicationRequestId,proto3,oneof"`
}

type Reference_CompartmentDefinitionId struct {
	CompartmentDefinitionId *ReferenceId `protobuf:"bytes,26,opt,name=compartment_definition_id,json=compartmentDefinitionId,proto3,oneof"`
}

type Reference_CompositionId struct {
	CompositionId *ReferenceId `protobuf:"bytes,27,opt,name=composition_id,json=compositionId,proto3,oneof"`
}

type Reference_ConceptMapId struct {
	ConceptMapId *ReferenceId `protobuf:"bytes,28,opt,name=concept_map_id,json=conceptMapId,proto3,oneof"`
}

type Reference_ConditionId struct {
	ConditionId *ReferenceId `protobuf:"bytes,29,opt,name=condition_id,json=conditionId,proto3,oneof"`
}

type Reference_ConsentId struct {
	ConsentId *ReferenceId `protobuf:"bytes,30,opt,name=consent_id,json=consentId,proto3,oneof"`
}

type Reference_ContractId struct {
	ContractId *ReferenceId `protobuf:"bytes,31,opt,name=contract_id,json=contractId,proto3,oneof"`
}

type Reference_CoverageId struct {
	CoverageId *ReferenceId `protobuf:"bytes,32,opt,name=coverage_id,json=coverageId,proto3,oneof"`
}

type Reference_DataElementId struct {
	DataElementId *ReferenceId `protobuf:"bytes,33,opt,name=data_element_id,json=dataElementId,proto3,oneof"`
}

type Reference_DetectedIssueId struct {
	DetectedIssueId *ReferenceId `protobuf:"bytes,34,opt,name=detected_issue_id,json=detectedIssueId,proto3,oneof"`
}

type Reference_DeviceId struct {
	DeviceId *ReferenceId `protobuf:"bytes,35,opt,name=device_id,json=deviceId,proto3,oneof"`
}

type Reference_DeviceComponentId struct {
	DeviceComponentId *ReferenceId `protobuf:"bytes,36,opt,name=device_component_id,json=deviceComponentId,proto3,oneof"`
}

type Reference_DeviceMetricId struct {
	DeviceMetricId *ReferenceId `protobuf:"bytes,37,opt,name=device_metric_id,json=deviceMetricId,proto3,oneof"`
}

type Reference_DeviceRequestId struct {
	DeviceRequestId *ReferenceId `protobuf:"bytes,38,opt,name=device_request_id,json=deviceRequestId,proto3,oneof"`
}

type Reference_DeviceUsestatementId struct {
	DeviceUsestatementId *ReferenceId `protobuf:"bytes,39,opt,name=device_usestatement_id,json=deviceUsestatementId,proto3,oneof"`
}

type Reference_DiagnosticReportId struct {
	DiagnosticReportId *ReferenceId `protobuf:"bytes,40,opt,name=diagnostic_report_id,json=diagnosticReportId,proto3,oneof"`
}

type Reference_DocumentManifestId struct {
	DocumentManifestId *ReferenceId `protobuf:"bytes,41,opt,name=document_manifest_id,json=documentManifestId,proto3,oneof"`
}

type Reference_DocumentReferenceId struct {
	DocumentReferenceId *ReferenceId `protobuf:"bytes,42,opt,name=document_reference_id,json=documentReferenceId,proto3,oneof"`
}

type Reference_EligibilityRequestId struct {
	EligibilityRequestId *ReferenceId `protobuf:"bytes,43,opt,name=eligibility_request_id,json=eligibilityRequestId,proto3,oneof"`
}

type Reference_EligibilityResponseId struct {
	EligibilityResponseId *ReferenceId `protobuf:"bytes,44,opt,name=eligibility_response_id,json=eligibilityResponseId,proto3,oneof"`
}

type Reference_EncounterId struct {
	EncounterId *ReferenceId `protobuf:"bytes,45,opt,name=encounter_id,json=encounterId,proto3,oneof"`
}

type Reference_EndpointId struct {
	EndpointId *ReferenceId `protobuf:"bytes,46,opt,name=endpoint_id,json=endpointId,proto3,oneof"`
}

type Reference_EnrollmentRequestId struct {
	EnrollmentRequestId *ReferenceId `protobuf:"bytes,47,opt,name=enrollment_request_id,json=enrollmentRequestId,proto3,oneof"`
}

type Reference_EnrollmentResponseId struct {
	EnrollmentResponseId *ReferenceId `protobuf:"bytes,48,opt,name=enrollment_response_id,json=enrollmentResponseId,proto3,oneof"`
}

type Reference_EpisodeOfcareId struct {
	EpisodeOfcareId *ReferenceId `protobuf:"bytes,49,opt,name=episode_ofcare_id,json=episodeOfcareId,proto3,oneof"`
}

type Reference_ExpansionProfileId struct {
	ExpansionProfileId *ReferenceId `protobuf:"bytes,50,opt,name=expansion_profile_id,json=expansionProfileId,proto3,oneof"`
}

type Reference_ExplanationOfbenefitId struct {
	ExplanationOfbenefitId *ReferenceId `protobuf:"bytes,51,opt,name=explanation_ofbenefit_id,json=explanationOfbenefitId,proto3,oneof"`
}

type Reference_FamilyMemberhistoryId struct {
	FamilyMemberhistoryId *ReferenceId `protobuf:"bytes,52,opt,name=family_memberhistory_id,json=familyMemberhistoryId,proto3,oneof"`
}

type Reference_FlagId struct {
	FlagId *ReferenceId `protobuf:"bytes,53,opt,name=flag_id,json=flagId,proto3,oneof"`
}

type Reference_GoalId struct {
	GoalId *ReferenceId `protobuf:"bytes,54,opt,name=goal_id,json=goalId,proto3,oneof"`
}

type Reference_GraphDefinitionId struct {
	GraphDefinitionId *ReferenceId `protobuf:"bytes,55,opt,name=graph_definition_id,json=graphDefinitionId,proto3,oneof"`
}

type Reference_GroupId struct {
	GroupId *ReferenceId `protobuf:"bytes,56,opt,name=group_id,json=groupId,proto3,oneof"`
}

type Reference_GuidanceResponseId struct {
	GuidanceResponseId *ReferenceId `protobuf:"bytes,57,opt,name=guidance_response_id,json=guidanceResponseId,proto3,oneof"`
}

type Reference_HealthcareServiceId struct {
	HealthcareServiceId *ReferenceId `protobuf:"bytes,58,opt,name=healthcare_service_id,json=healthcareServiceId,proto3,oneof"`
}

type Reference_ImagingManifestId struct {
	ImagingManifestId *ReferenceId `protobuf:"bytes,59,opt,name=imaging_manifest_id,json=imagingManifestId,proto3,oneof"`
}

type Reference_ImagingStudyId struct {
	ImagingStudyId *ReferenceId `protobuf:"bytes,60,opt,name=imaging_study_id,json=imagingStudyId,proto3,oneof"`
}

type Reference_ImmunizationId struct {
	ImmunizationId *ReferenceId `protobuf:"bytes,61,opt,name=immunization_id,json=immunizationId,proto3,oneof"`
}

type Reference_ImmunizationRecommendationId struct {
	ImmunizationRecommendationId *ReferenceId `protobuf:"bytes,62,opt,name=immunization_recommendation_id,json=immunizationRecommendationId,proto3,oneof"`
}

type Reference_ImplementationGuideId struct {
	ImplementationGuideId *ReferenceId `protobuf:"bytes,63,opt,name=implementation_guide_id,json=implementationGuideId,proto3,oneof"`
}

type Reference_LibraryId struct {
	LibraryId *ReferenceId `protobuf:"bytes,64,opt,name=library_id,json=libraryId,proto3,oneof"`
}

type Reference_LinkageId struct {
	LinkageId *ReferenceId `protobuf:"bytes,65,opt,name=linkage_id,json=linkageId,proto3,oneof"`
}

type Reference_ListId struct {
	ListId *ReferenceId `protobuf:"bytes,66,opt,name=list_id,json=listId,proto3,oneof"`
}

type Reference_LocationId struct {
	LocationId *ReferenceId `protobuf:"bytes,67,opt,name=location_id,json=locationId,proto3,oneof"`
}

type Reference_MeasureId struct {
	MeasureId *ReferenceId `protobuf:"bytes,68,opt,name=measure_id,json=measureId,proto3,oneof"`
}

type Reference_MeasureReportId struct {
	MeasureReportId *ReferenceId `protobuf:"bytes,69,opt,name=measure_report_id,json=measureReportId,proto3,oneof"`
}

type Reference_MediaId struct {
	MediaId *ReferenceId `protobuf:"bytes,70,opt,name=media_id,json=mediaId,proto3,oneof"`
}

type Reference_MedicationId struct {
	MedicationId *ReferenceId `protobuf:"bytes,71,opt,name=medication_id,json=medicationId,proto3,oneof"`
}

type Reference_MedicationAdministrationId struct {
	MedicationAdministrationId *ReferenceId `protobuf:"bytes,72,opt,name=medication_administration_id,json=medicationAdministrationId,proto3,oneof"`
}

type Reference_MedicationDispenseId struct {
	MedicationDispenseId *ReferenceId `protobuf:"bytes,73,opt,name=medication_dispense_id,json=medicationDispenseId,proto3,oneof"`
}

type Reference_MedicationRequestId struct {
	MedicationRequestId *ReferenceId `protobuf:"bytes,74,opt,name=medication_request_id,json=medicationRequestId,proto3,oneof"`
}

type Reference_MedicationStatementId struct {
	MedicationStatementId *ReferenceId `protobuf:"bytes,75,opt,name=medication_statement_id,json=medicationStatementId,proto3,oneof"`
}

type Reference_MessageDefinitionId struct {
	MessageDefinitionId *ReferenceId `protobuf:"bytes,76,opt,name=message_definition_id,json=messageDefinitionId,proto3,oneof"`
}

type Reference_MessageHeaderId struct {
	MessageHeaderId *ReferenceId `protobuf:"bytes,77,opt,name=message_header_id,json=messageHeaderId,proto3,oneof"`
}

type Reference_NamingSystemId struct {
	NamingSystemId *ReferenceId `protobuf:"bytes,78,opt,name=naming_system_id,json=namingSystemId,proto3,oneof"`
}

type Reference_NutritionOrderId struct {
	NutritionOrderId *ReferenceId `protobuf:"bytes,79,opt,name=nutrition_order_id,json=nutritionOrderId,proto3,oneof"`
}

type Reference_ObservationId struct {
	ObservationId *ReferenceId `protobuf:"bytes,80,opt,name=observation_id,json=observationId,proto3,oneof"`
}

type Reference_OperationDefinitionId struct {
	OperationDefinitionId *ReferenceId `protobuf:"bytes,81,opt,name=operation_definition_id,json=operationDefinitionId,proto3,oneof"`
}

type Reference_OperationOutcomeId struct {
	OperationOutcomeId *ReferenceId `protobuf:"bytes,82,opt,name=operation_outcome_id,json=operationOutcomeId,proto3,oneof"`
}

type Reference_OrganizationId struct {
	OrganizationId *ReferenceId `protobuf:"bytes,83,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type Reference_ParametersId struct {
	ParametersId *ReferenceId `protobuf:"bytes,84,opt,name=parameters_id,json=parametersId,proto3,oneof"`
}

type Reference_PatientId struct {
	PatientId *ReferenceId `protobuf:"bytes,85,opt,name=patient_id,json=patientId,proto3,oneof"`
}

type Reference_PaymentNoticeId struct {
	PaymentNoticeId *ReferenceId `protobuf:"bytes,86,opt,name=payment_notice_id,json=paymentNoticeId,proto3,oneof"`
}

type Reference_PaymentReconciliationId struct {
	PaymentReconciliationId *ReferenceId `protobuf:"bytes,87,opt,name=payment_reconciliation_id,json=paymentReconciliationId,proto3,oneof"`
}

type Reference_PersonId struct {
	PersonId *ReferenceId `protobuf:"bytes,88,opt,name=person_id,json=personId,proto3,oneof"`
}

type Reference_PlanDefinitionId struct {
	PlanDefinitionId *ReferenceId `protobuf:"bytes,89,opt,name=plan_definition_id,json=planDefinitionId,proto3,oneof"`
}

type Reference_PractitionerId struct {
	PractitionerId *ReferenceId `protobuf:"bytes,90,opt,name=practitioner_id,json=practitionerId,proto3,oneof"`
}

type Reference_PractitionerRoleId struct {
	PractitionerRoleId *ReferenceId `protobuf:"bytes,91,opt,name=practitioner_role_id,json=practitionerRoleId,proto3,oneof"`
}

type Reference_ProcedureId struct {
	ProcedureId *ReferenceId `protobuf:"bytes,92,opt,name=procedure_id,json=procedureId,proto3,oneof"`
}

type Reference_ProcedureRequestId struct {
	ProcedureRequestId *ReferenceId `protobuf:"bytes,93,opt,name=procedure_request_id,json=procedureRequestId,proto3,oneof"`
}

type Reference_ProcessRequestId struct {
	ProcessRequestId *ReferenceId `protobuf:"bytes,94,opt,name=process_request_id,json=processRequestId,proto3,oneof"`
}

type Reference_ProcessResponseId struct {
	ProcessResponseId *ReferenceId `protobuf:"bytes,95,opt,name=process_response_id,json=processResponseId,proto3,oneof"`
}

type Reference_ProvenanceId struct {
	ProvenanceId *ReferenceId `protobuf:"bytes,96,opt,name=provenance_id,json=provenanceId,proto3,oneof"`
}

type Reference_QuestionnaireId struct {
	QuestionnaireId *ReferenceId `protobuf:"bytes,97,opt,name=questionnaire_id,json=questionnaireId,proto3,oneof"`
}

type Reference_QuestionnaireResponseId struct {
	QuestionnaireResponseId *ReferenceId `protobuf:"bytes,98,opt,name=questionnaire_response_id,json=questionnaireResponseId,proto3,oneof"`
}

type Reference_ReferralRequestId struct {
	ReferralRequestId *ReferenceId `protobuf:"bytes,99,opt,name=referral_request_id,json=referralRequestId,proto3,oneof"`
}

type Reference_RelatedPersonId struct {
	RelatedPersonId *ReferenceId `protobuf:"bytes,100,opt,name=related_person_id,json=relatedPersonId,proto3,oneof"`
}

type Reference_RequestGroupId struct {
	RequestGroupId *ReferenceId `protobuf:"bytes,101,opt,name=request_group_id,json=requestGroupId,proto3,oneof"`
}

type Reference_ResearchStudyId struct {
	ResearchStudyId *ReferenceId `protobuf:"bytes,102,opt,name=research_study_id,json=researchStudyId,proto3,oneof"`
}

type Reference_ResearchSubjectId struct {
	ResearchSubjectId *ReferenceId `protobuf:"bytes,103,opt,name=research_subject_id,json=researchSubjectId,proto3,oneof"`
}

type Reference_RiskAssessmentId struct {
	RiskAssessmentId *ReferenceId `protobuf:"bytes,104,opt,name=risk_assessment_id,json=riskAssessmentId,proto3,oneof"`
}

type Reference_ScheduleId struct {
	ScheduleId *ReferenceId `protobuf:"bytes,105,opt,name=schedule_id,json=scheduleId,proto3,oneof"`
}

type Reference_SearchParameterId struct {
	SearchParameterId *ReferenceId `protobuf:"bytes,106,opt,name=search_parameter_id,json=searchParameterId,proto3,oneof"`
}

type Reference_SequenceId struct {
	SequenceId *ReferenceId `protobuf:"bytes,107,opt,name=sequence_id,json=sequenceId,proto3,oneof"`
}

type Reference_ServiceDefinitionId struct {
	ServiceDefinitionId *ReferenceId `protobuf:"bytes,108,opt,name=service_definition_id,json=serviceDefinitionId,proto3,oneof"`
}

type Reference_SlotId struct {
	SlotId *ReferenceId `protobuf:"bytes,109,opt,name=slot_id,json=slotId,proto3,oneof"`
}

type Reference_SpecimenId struct {
	SpecimenId *ReferenceId `protobuf:"bytes,110,opt,name=specimen_id,json=specimenId,proto3,oneof"`
}

type Reference_StructureDefinitionId struct {
	StructureDefinitionId *ReferenceId `protobuf:"bytes,111,opt,name=structure_definition_id,json=structureDefinitionId,proto3,oneof"`
}

type Reference_StructureMapId struct {
	StructureMapId *ReferenceId `protobuf:"bytes,112,opt,name=structure_map_id,json=structureMapId,proto3,oneof"`
}

type Reference_SubscriptionId struct {
	SubscriptionId *ReferenceId `protobuf:"bytes,113,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type Reference_SubstanceId struct {
	SubstanceId *ReferenceId `protobuf:"bytes,114,opt,name=substance_id,json=substanceId,proto3,oneof"`
}

type Reference_SupplyDeliveryId struct {
	SupplyDeliveryId *ReferenceId `protobuf:"bytes,115,opt,name=supply_delivery_id,json=supplyDeliveryId,proto3,oneof"`
}

type Reference_SupplyRequestId struct {
	SupplyRequestId *ReferenceId `protobuf:"bytes,116,opt,name=supply_request_id,json=supplyRequestId,proto3,oneof"`
}

type Reference_TaskId struct {
	TaskId *ReferenceId `protobuf:"bytes,117,opt,name=task_id,json=taskId,proto3,oneof"`
}

type Reference_TestReportId struct {
	TestReportId *ReferenceId `protobuf:"bytes,118,opt,name=test_report_id,json=testReportId,proto3,oneof"`
}

type Reference_TestScriptId struct {
	TestScriptId *ReferenceId `protobuf:"bytes,119,opt,name=test_script_id,json=testScriptId,proto3,oneof"`
}

type Reference_ValueSetId struct {
	ValueSetId *ReferenceId `protobuf:"bytes,120,opt,name=value_set_id,json=valueSetId,proto3,oneof"`
}

type Reference_VisionPrescriptionId struct {
	VisionPrescriptionId *ReferenceId `protobuf:"bytes,121,opt,name=vision_prescription_id,json=visionPrescriptionId,proto3,oneof"`
}

func (*Reference_Uri) isReference_Reference() {}

func (*Reference_Fragment) isReference_Reference() {}

func (*Reference_AccountId) isReference_Reference() {}

func (*Reference_ActivityDefinitionId) isReference_Reference() {}

func (*Reference_AdverseEventId) isReference_Reference() {}

func (*Reference_AllergyIntoleranceId) isReference_Reference() {}

func (*Reference_AppointmentId) isReference_Reference() {}

func (*Reference_AppointmentResponseId) isReference_Reference() {}

func (*Reference_AuditEventId) isReference_Reference() {}

func (*Reference_BasicId) isReference_Reference() {}

func (*Reference_BinaryId) isReference_Reference() {}

func (*Reference_BodySiteId) isReference_Reference() {}

func (*Reference_BundleId) isReference_Reference() {}

func (*Reference_CapabilityStatementId) isReference_Reference() {}

func (*Reference_CarePlanId) isReference_Reference() {}

func (*Reference_CareTeamId) isReference_Reference() {}

func (*Reference_ChargeItemId) isReference_Reference() {}

func (*Reference_ClaimId) isReference_Reference() {}

func (*Reference_ClaimResponseId) isReference_Reference() {}

func (*Reference_ClinicalImpressionId) isReference_Reference() {}

func (*Reference_CodeSystemId) isReference_Reference() {}

func (*Reference_CommunicationId) isReference_Reference() {}

func (*Reference_CommunicationRequestId) isReference_Reference() {}

func (*Reference_CompartmentDefinitionId) isReference_Reference() {}

func (*Reference_CompositionId) isReference_Reference() {}

func (*Reference_ConceptMapId) isReference_Reference() {}

func (*Reference_ConditionId) isReference_Reference() {}

func (*Reference_ConsentId) isReference_Reference() {}

func (*Reference_ContractId) isReference_Reference() {}

func (*Reference_CoverageId) isReference_Reference() {}

func (*Reference_DataElementId) isReference_Reference() {}

func (*Reference_DetectedIssueId) isReference_Reference() {}

func (*Reference_DeviceId) isReference_Reference() {}

func (*Reference_DeviceComponentId) isReference_Reference() {}

func (*Reference_DeviceMetricId) isReference_Reference() {}

func (*Reference_DeviceRequestId) isReference_Reference() {}

func (*Reference_DeviceUsestatementId) isReference_Reference() {}

func (*Reference_DiagnosticReportId) isReference_Reference() {}

func (*Reference_DocumentManifestId) isReference_Reference() {}

func (*Reference_DocumentReferenceId) isReference_Reference() {}

func (*Reference_EligibilityRequestId) isReference_Reference() {}

func (*Reference_EligibilityResponseId) isReference_Reference() {}

func (*Reference_EncounterId) isReference_Reference() {}

func (*Reference_EndpointId) isReference_Reference() {}

func (*Reference_EnrollmentRequestId) isReference_Reference() {}

func (*Reference_EnrollmentResponseId) isReference_Reference() {}

func (*Reference_EpisodeOfcareId) isReference_Reference() {}

func (*Reference_ExpansionProfileId) isReference_Reference() {}

func (*Reference_ExplanationOfbenefitId) isReference_Reference() {}

func (*Reference_FamilyMemberhistoryId) isReference_Reference() {}

func (*Reference_FlagId) isReference_Reference() {}

func (*Reference_GoalId) isReference_Reference() {}

func (*Reference_GraphDefinitionId) isReference_Reference() {}

func (*Reference_GroupId) isReference_Reference() {}

func (*Reference_GuidanceResponseId) isReference_Reference() {}

func (*Reference_HealthcareServiceId) isReference_Reference() {}

func (*Reference_ImagingManifestId) isReference_Reference() {}

func (*Reference_ImagingStudyId) isReference_Reference() {}

func (*Reference_ImmunizationId) isReference_Reference() {}

func (*Reference_ImmunizationRecommendationId) isReference_Reference() {}

func (*Reference_ImplementationGuideId) isReference_Reference() {}

func (*Reference_LibraryId) isReference_Reference() {}

func (*Reference_LinkageId) isReference_Reference() {}

func (*Reference_ListId) isReference_Reference() {}

func (*Reference_LocationId) isReference_Reference() {}

func (*Reference_MeasureId) isReference_Reference() {}

func (*Reference_MeasureReportId) isReference_Reference() {}

func (*Reference_MediaId) isReference_Reference() {}

func (*Reference_MedicationId) isReference_Reference() {}

func (*Reference_MedicationAdministrationId) isReference_Reference() {}

func (*Reference_MedicationDispenseId) isReference_Reference() {}

func (*Reference_MedicationRequestId) isReference_Reference() {}

func (*Reference_MedicationStatementId) isReference_Reference() {}

func (*Reference_MessageDefinitionId) isReference_Reference() {}

func (*Reference_MessageHeaderId) isReference_Reference() {}

func (*Reference_NamingSystemId) isReference_Reference() {}

func (*Reference_NutritionOrderId) isReference_Reference() {}

func (*Reference_ObservationId) isReference_Reference() {}

func (*Reference_OperationDefinitionId) isReference_Reference() {}

func (*Reference_OperationOutcomeId) isReference_Reference() {}

func (*Reference_OrganizationId) isReference_Reference() {}

func (*Reference_ParametersId) isReference_Reference() {}

func (*Reference_PatientId) isReference_Reference() {}

func (*Reference_PaymentNoticeId) isReference_Reference() {}

func (*Reference_PaymentReconciliationId) isReference_Reference() {}

func (*Reference_PersonId) isReference_Reference() {}

func (*Reference_PlanDefinitionId) isReference_Reference() {}

func (*Reference_PractitionerId) isReference_Reference() {}

func (*Reference_PractitionerRoleId) isReference_Reference() {}

func (*Reference_ProcedureId) isReference_Reference() {}

func (*Reference_ProcedureRequestId) isReference_Reference() {}

func (*Reference_ProcessRequestId) isReference_Reference() {}

func (*Reference_ProcessResponseId) isReference_Reference() {}

func (*Reference_ProvenanceId) isReference_Reference() {}

func (*Reference_QuestionnaireId) isReference_Reference() {}

func (*Reference_QuestionnaireResponseId) isReference_Reference() {}

func (*Reference_ReferralRequestId) isReference_Reference() {}

func (*Reference_RelatedPersonId) isReference_Reference() {}

func (*Reference_RequestGroupId) isReference_Reference() {}

func (*Reference_ResearchStudyId) isReference_Reference() {}

func (*Reference_ResearchSubjectId) isReference_Reference() {}

func (*Reference_RiskAssessmentId) isReference_Reference() {}

func (*Reference_ScheduleId) isReference_Reference() {}

func (*Reference_SearchParameterId) isReference_Reference() {}

func (*Reference_SequenceId) isReference_Reference() {}

func (*Reference_ServiceDefinitionId) isReference_Reference() {}

func (*Reference_SlotId) isReference_Reference() {}

func (*Reference_SpecimenId) isReference_Reference() {}

func (*Reference_StructureDefinitionId) isReference_Reference() {}

func (*Reference_StructureMapId) isReference_Reference() {}

func (*Reference_SubscriptionId) isReference_Reference() {}

func (*Reference_SubstanceId) isReference_Reference() {}

func (*Reference_SupplyDeliveryId) isReference_Reference() {}

func (*Reference_SupplyRequestId) isReference_Reference() {}

func (*Reference_TaskId) isReference_Reference() {}

func (*Reference_TestReportId) isReference_Reference() {}

func (*Reference_TestScriptId) isReference_Reference() {}

func (*Reference_ValueSetId) isReference_Reference() {}

func (*Reference_VisionPrescriptionId) isReference_Reference() {}

func (m *Reference) GetReference() isReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *Reference) GetUri() *String {
	if x, ok := m.GetReference().(*Reference_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *Reference) GetFragment() *String {
	if x, ok := m.GetReference().(*Reference_Fragment); ok {
		return x.Fragment
	}
	return nil
}

func (m *Reference) GetAccountId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *Reference) GetActivityDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ActivityDefinitionId); ok {
		return x.ActivityDefinitionId
	}
	return nil
}

func (m *Reference) GetAdverseEventId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AdverseEventId); ok {
		return x.AdverseEventId
	}
	return nil
}

func (m *Reference) GetAllergyIntoleranceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AllergyIntoleranceId); ok {
		return x.AllergyIntoleranceId
	}
	return nil
}

func (m *Reference) GetAppointmentId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AppointmentId); ok {
		return x.AppointmentId
	}
	return nil
}

func (m *Reference) GetAppointmentResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AppointmentResponseId); ok {
		return x.AppointmentResponseId
	}
	return nil
}

func (m *Reference) GetAuditEventId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_AuditEventId); ok {
		return x.AuditEventId
	}
	return nil
}

func (m *Reference) GetBasicId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_BasicId); ok {
		return x.BasicId
	}
	return nil
}

func (m *Reference) GetBinaryId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_BinaryId); ok {
		return x.BinaryId
	}
	return nil
}

func (m *Reference) GetBodySiteId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_BodySiteId); ok {
		return x.BodySiteId
	}
	return nil
}

func (m *Reference) GetBundleId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_BundleId); ok {
		return x.BundleId
	}
	return nil
}

func (m *Reference) GetCapabilityStatementId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CapabilityStatementId); ok {
		return x.CapabilityStatementId
	}
	return nil
}

func (m *Reference) GetCarePlanId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CarePlanId); ok {
		return x.CarePlanId
	}
	return nil
}

func (m *Reference) GetCareTeamId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CareTeamId); ok {
		return x.CareTeamId
	}
	return nil
}

func (m *Reference) GetChargeItemId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ChargeItemId); ok {
		return x.ChargeItemId
	}
	return nil
}

func (m *Reference) GetClaimId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ClaimId); ok {
		return x.ClaimId
	}
	return nil
}

func (m *Reference) GetClaimResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ClaimResponseId); ok {
		return x.ClaimResponseId
	}
	return nil
}

func (m *Reference) GetClinicalImpressionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ClinicalImpressionId); ok {
		return x.ClinicalImpressionId
	}
	return nil
}

func (m *Reference) GetCodeSystemId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CodeSystemId); ok {
		return x.CodeSystemId
	}
	return nil
}

func (m *Reference) GetCommunicationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CommunicationId); ok {
		return x.CommunicationId
	}
	return nil
}

func (m *Reference) GetCommunicationRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CommunicationRequestId); ok {
		return x.CommunicationRequestId
	}
	return nil
}

func (m *Reference) GetCompartmentDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CompartmentDefinitionId); ok {
		return x.CompartmentDefinitionId
	}
	return nil
}

func (m *Reference) GetCompositionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CompositionId); ok {
		return x.CompositionId
	}
	return nil
}

func (m *Reference) GetConceptMapId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ConceptMapId); ok {
		return x.ConceptMapId
	}
	return nil
}

func (m *Reference) GetConditionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ConditionId); ok {
		return x.ConditionId
	}
	return nil
}

func (m *Reference) GetConsentId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ConsentId); ok {
		return x.ConsentId
	}
	return nil
}

func (m *Reference) GetContractId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ContractId); ok {
		return x.ContractId
	}
	return nil
}

func (m *Reference) GetCoverageId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_CoverageId); ok {
		return x.CoverageId
	}
	return nil
}

func (m *Reference) GetDataElementId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DataElementId); ok {
		return x.DataElementId
	}
	return nil
}

func (m *Reference) GetDetectedIssueId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DetectedIssueId); ok {
		return x.DetectedIssueId
	}
	return nil
}

func (m *Reference) GetDeviceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DeviceId); ok {
		return x.DeviceId
	}
	return nil
}

func (m *Reference) GetDeviceComponentId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DeviceComponentId); ok {
		return x.DeviceComponentId
	}
	return nil
}

func (m *Reference) GetDeviceMetricId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DeviceMetricId); ok {
		return x.DeviceMetricId
	}
	return nil
}

func (m *Reference) GetDeviceRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DeviceRequestId); ok {
		return x.DeviceRequestId
	}
	return nil
}

func (m *Reference) GetDeviceUsestatementId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DeviceUsestatementId); ok {
		return x.DeviceUsestatementId
	}
	return nil
}

func (m *Reference) GetDiagnosticReportId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DiagnosticReportId); ok {
		return x.DiagnosticReportId
	}
	return nil
}

func (m *Reference) GetDocumentManifestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DocumentManifestId); ok {
		return x.DocumentManifestId
	}
	return nil
}

func (m *Reference) GetDocumentReferenceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_DocumentReferenceId); ok {
		return x.DocumentReferenceId
	}
	return nil
}

func (m *Reference) GetEligibilityRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EligibilityRequestId); ok {
		return x.EligibilityRequestId
	}
	return nil
}

func (m *Reference) GetEligibilityResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EligibilityResponseId); ok {
		return x.EligibilityResponseId
	}
	return nil
}

func (m *Reference) GetEncounterId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EncounterId); ok {
		return x.EncounterId
	}
	return nil
}

func (m *Reference) GetEndpointId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EndpointId); ok {
		return x.EndpointId
	}
	return nil
}

func (m *Reference) GetEnrollmentRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EnrollmentRequestId); ok {
		return x.EnrollmentRequestId
	}
	return nil
}

func (m *Reference) GetEnrollmentResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EnrollmentResponseId); ok {
		return x.EnrollmentResponseId
	}
	return nil
}

func (m *Reference) GetEpisodeOfcareId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_EpisodeOfcareId); ok {
		return x.EpisodeOfcareId
	}
	return nil
}

func (m *Reference) GetExpansionProfileId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ExpansionProfileId); ok {
		return x.ExpansionProfileId
	}
	return nil
}

func (m *Reference) GetExplanationOfbenefitId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ExplanationOfbenefitId); ok {
		return x.ExplanationOfbenefitId
	}
	return nil
}

func (m *Reference) GetFamilyMemberhistoryId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_FamilyMemberhistoryId); ok {
		return x.FamilyMemberhistoryId
	}
	return nil
}

func (m *Reference) GetFlagId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_FlagId); ok {
		return x.FlagId
	}
	return nil
}

func (m *Reference) GetGoalId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_GoalId); ok {
		return x.GoalId
	}
	return nil
}

func (m *Reference) GetGraphDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_GraphDefinitionId); ok {
		return x.GraphDefinitionId
	}
	return nil
}

func (m *Reference) GetGroupId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_GroupId); ok {
		return x.GroupId
	}
	return nil
}

func (m *Reference) GetGuidanceResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_GuidanceResponseId); ok {
		return x.GuidanceResponseId
	}
	return nil
}

func (m *Reference) GetHealthcareServiceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_HealthcareServiceId); ok {
		return x.HealthcareServiceId
	}
	return nil
}

func (m *Reference) GetImagingManifestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ImagingManifestId); ok {
		return x.ImagingManifestId
	}
	return nil
}

func (m *Reference) GetImagingStudyId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ImagingStudyId); ok {
		return x.ImagingStudyId
	}
	return nil
}

func (m *Reference) GetImmunizationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ImmunizationId); ok {
		return x.ImmunizationId
	}
	return nil
}

func (m *Reference) GetImmunizationRecommendationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ImmunizationRecommendationId); ok {
		return x.ImmunizationRecommendationId
	}
	return nil
}

func (m *Reference) GetImplementationGuideId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ImplementationGuideId); ok {
		return x.ImplementationGuideId
	}
	return nil
}

func (m *Reference) GetLibraryId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_LibraryId); ok {
		return x.LibraryId
	}
	return nil
}

func (m *Reference) GetLinkageId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_LinkageId); ok {
		return x.LinkageId
	}
	return nil
}

func (m *Reference) GetListId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ListId); ok {
		return x.ListId
	}
	return nil
}

func (m *Reference) GetLocationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_LocationId); ok {
		return x.LocationId
	}
	return nil
}

func (m *Reference) GetMeasureId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MeasureId); ok {
		return x.MeasureId
	}
	return nil
}

func (m *Reference) GetMeasureReportId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MeasureReportId); ok {
		return x.MeasureReportId
	}
	return nil
}

func (m *Reference) GetMediaId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MediaId); ok {
		return x.MediaId
	}
	return nil
}

func (m *Reference) GetMedicationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MedicationId); ok {
		return x.MedicationId
	}
	return nil
}

func (m *Reference) GetMedicationAdministrationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MedicationAdministrationId); ok {
		return x.MedicationAdministrationId
	}
	return nil
}

func (m *Reference) GetMedicationDispenseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MedicationDispenseId); ok {
		return x.MedicationDispenseId
	}
	return nil
}

func (m *Reference) GetMedicationRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MedicationRequestId); ok {
		return x.MedicationRequestId
	}
	return nil
}

func (m *Reference) GetMedicationStatementId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MedicationStatementId); ok {
		return x.MedicationStatementId
	}
	return nil
}

func (m *Reference) GetMessageDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MessageDefinitionId); ok {
		return x.MessageDefinitionId
	}
	return nil
}

func (m *Reference) GetMessageHeaderId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_MessageHeaderId); ok {
		return x.MessageHeaderId
	}
	return nil
}

func (m *Reference) GetNamingSystemId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_NamingSystemId); ok {
		return x.NamingSystemId
	}
	return nil
}

func (m *Reference) GetNutritionOrderId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_NutritionOrderId); ok {
		return x.NutritionOrderId
	}
	return nil
}

func (m *Reference) GetObservationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ObservationId); ok {
		return x.ObservationId
	}
	return nil
}

func (m *Reference) GetOperationDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_OperationDefinitionId); ok {
		return x.OperationDefinitionId
	}
	return nil
}

func (m *Reference) GetOperationOutcomeId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_OperationOutcomeId); ok {
		return x.OperationOutcomeId
	}
	return nil
}

func (m *Reference) GetOrganizationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_OrganizationId); ok {
		return x.OrganizationId
	}
	return nil
}

func (m *Reference) GetParametersId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ParametersId); ok {
		return x.ParametersId
	}
	return nil
}

func (m *Reference) GetPatientId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PatientId); ok {
		return x.PatientId
	}
	return nil
}

func (m *Reference) GetPaymentNoticeId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PaymentNoticeId); ok {
		return x.PaymentNoticeId
	}
	return nil
}

func (m *Reference) GetPaymentReconciliationId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PaymentReconciliationId); ok {
		return x.PaymentReconciliationId
	}
	return nil
}

func (m *Reference) GetPersonId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PersonId); ok {
		return x.PersonId
	}
	return nil
}

func (m *Reference) GetPlanDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PlanDefinitionId); ok {
		return x.PlanDefinitionId
	}
	return nil
}

func (m *Reference) GetPractitionerId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PractitionerId); ok {
		return x.PractitionerId
	}
	return nil
}

func (m *Reference) GetPractitionerRoleId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_PractitionerRoleId); ok {
		return x.PractitionerRoleId
	}
	return nil
}

func (m *Reference) GetProcedureId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ProcedureId); ok {
		return x.ProcedureId
	}
	return nil
}

func (m *Reference) GetProcedureRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ProcedureRequestId); ok {
		return x.ProcedureRequestId
	}
	return nil
}

func (m *Reference) GetProcessRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ProcessRequestId); ok {
		return x.ProcessRequestId
	}
	return nil
}

func (m *Reference) GetProcessResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ProcessResponseId); ok {
		return x.ProcessResponseId
	}
	return nil
}

func (m *Reference) GetProvenanceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ProvenanceId); ok {
		return x.ProvenanceId
	}
	return nil
}

func (m *Reference) GetQuestionnaireId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_QuestionnaireId); ok {
		return x.QuestionnaireId
	}
	return nil
}

func (m *Reference) GetQuestionnaireResponseId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_QuestionnaireResponseId); ok {
		return x.QuestionnaireResponseId
	}
	return nil
}

func (m *Reference) GetReferralRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ReferralRequestId); ok {
		return x.ReferralRequestId
	}
	return nil
}

func (m *Reference) GetRelatedPersonId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_RelatedPersonId); ok {
		return x.RelatedPersonId
	}
	return nil
}

func (m *Reference) GetRequestGroupId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_RequestGroupId); ok {
		return x.RequestGroupId
	}
	return nil
}

func (m *Reference) GetResearchStudyId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ResearchStudyId); ok {
		return x.ResearchStudyId
	}
	return nil
}

func (m *Reference) GetResearchSubjectId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ResearchSubjectId); ok {
		return x.ResearchSubjectId
	}
	return nil
}

func (m *Reference) GetRiskAssessmentId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_RiskAssessmentId); ok {
		return x.RiskAssessmentId
	}
	return nil
}

func (m *Reference) GetScheduleId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ScheduleId); ok {
		return x.ScheduleId
	}
	return nil
}

func (m *Reference) GetSearchParameterId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SearchParameterId); ok {
		return x.SearchParameterId
	}
	return nil
}

func (m *Reference) GetSequenceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SequenceId); ok {
		return x.SequenceId
	}
	return nil
}

func (m *Reference) GetServiceDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ServiceDefinitionId); ok {
		return x.ServiceDefinitionId
	}
	return nil
}

func (m *Reference) GetSlotId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SlotId); ok {
		return x.SlotId
	}
	return nil
}

func (m *Reference) GetSpecimenId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SpecimenId); ok {
		return x.SpecimenId
	}
	return nil
}

func (m *Reference) GetStructureDefinitionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_StructureDefinitionId); ok {
		return x.StructureDefinitionId
	}
	return nil
}

func (m *Reference) GetStructureMapId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_StructureMapId); ok {
		return x.StructureMapId
	}
	return nil
}

func (m *Reference) GetSubscriptionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return nil
}

func (m *Reference) GetSubstanceId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SubstanceId); ok {
		return x.SubstanceId
	}
	return nil
}

func (m *Reference) GetSupplyDeliveryId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SupplyDeliveryId); ok {
		return x.SupplyDeliveryId
	}
	return nil
}

func (m *Reference) GetSupplyRequestId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_SupplyRequestId); ok {
		return x.SupplyRequestId
	}
	return nil
}

func (m *Reference) GetTaskId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_TaskId); ok {
		return x.TaskId
	}
	return nil
}

func (m *Reference) GetTestReportId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_TestReportId); ok {
		return x.TestReportId
	}
	return nil
}

func (m *Reference) GetTestScriptId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_TestScriptId); ok {
		return x.TestScriptId
	}
	return nil
}

func (m *Reference) GetValueSetId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_ValueSetId); ok {
		return x.ValueSetId
	}
	return nil
}

func (m *Reference) GetVisionPrescriptionId() *ReferenceId {
	if x, ok := m.GetReference().(*Reference_VisionPrescriptionId); ok {
		return x.VisionPrescriptionId
	}
	return nil
}

func (m *Reference) GetIdentifier() *Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Reference) GetDisplay() *String {
	if m != nil {
		return m.Display
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Reference) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Reference_OneofMarshaler, _Reference_OneofUnmarshaler, _Reference_OneofSizer, []interface{}{
		(*Reference_Uri)(nil),
		(*Reference_Fragment)(nil),
		(*Reference_AccountId)(nil),
		(*Reference_ActivityDefinitionId)(nil),
		(*Reference_AdverseEventId)(nil),
		(*Reference_AllergyIntoleranceId)(nil),
		(*Reference_AppointmentId)(nil),
		(*Reference_AppointmentResponseId)(nil),
		(*Reference_AuditEventId)(nil),
		(*Reference_BasicId)(nil),
		(*Reference_BinaryId)(nil),
		(*Reference_BodySiteId)(nil),
		(*Reference_BundleId)(nil),
		(*Reference_CapabilityStatementId)(nil),
		(*Reference_CarePlanId)(nil),
		(*Reference_CareTeamId)(nil),
		(*Reference_ChargeItemId)(nil),
		(*Reference_ClaimId)(nil),
		(*Reference_ClaimResponseId)(nil),
		(*Reference_ClinicalImpressionId)(nil),
		(*Reference_CodeSystemId)(nil),
		(*Reference_CommunicationId)(nil),
		(*Reference_CommunicationRequestId)(nil),
		(*Reference_CompartmentDefinitionId)(nil),
		(*Reference_CompositionId)(nil),
		(*Reference_ConceptMapId)(nil),
		(*Reference_ConditionId)(nil),
		(*Reference_ConsentId)(nil),
		(*Reference_ContractId)(nil),
		(*Reference_CoverageId)(nil),
		(*Reference_DataElementId)(nil),
		(*Reference_DetectedIssueId)(nil),
		(*Reference_DeviceId)(nil),
		(*Reference_DeviceComponentId)(nil),
		(*Reference_DeviceMetricId)(nil),
		(*Reference_DeviceRequestId)(nil),
		(*Reference_DeviceUsestatementId)(nil),
		(*Reference_DiagnosticReportId)(nil),
		(*Reference_DocumentManifestId)(nil),
		(*Reference_DocumentReferenceId)(nil),
		(*Reference_EligibilityRequestId)(nil),
		(*Reference_EligibilityResponseId)(nil),
		(*Reference_EncounterId)(nil),
		(*Reference_EndpointId)(nil),
		(*Reference_EnrollmentRequestId)(nil),
		(*Reference_EnrollmentResponseId)(nil),
		(*Reference_EpisodeOfcareId)(nil),
		(*Reference_ExpansionProfileId)(nil),
		(*Reference_ExplanationOfbenefitId)(nil),
		(*Reference_FamilyMemberhistoryId)(nil),
		(*Reference_FlagId)(nil),
		(*Reference_GoalId)(nil),
		(*Reference_GraphDefinitionId)(nil),
		(*Reference_GroupId)(nil),
		(*Reference_GuidanceResponseId)(nil),
		(*Reference_HealthcareServiceId)(nil),
		(*Reference_ImagingManifestId)(nil),
		(*Reference_ImagingStudyId)(nil),
		(*Reference_ImmunizationId)(nil),
		(*Reference_ImmunizationRecommendationId)(nil),
		(*Reference_ImplementationGuideId)(nil),
		(*Reference_LibraryId)(nil),
		(*Reference_LinkageId)(nil),
		(*Reference_ListId)(nil),
		(*Reference_LocationId)(nil),
		(*Reference_MeasureId)(nil),
		(*Reference_MeasureReportId)(nil),
		(*Reference_MediaId)(nil),
		(*Reference_MedicationId)(nil),
		(*Reference_MedicationAdministrationId)(nil),
		(*Reference_MedicationDispenseId)(nil),
		(*Reference_MedicationRequestId)(nil),
		(*Reference_MedicationStatementId)(nil),
		(*Reference_MessageDefinitionId)(nil),
		(*Reference_MessageHeaderId)(nil),
		(*Reference_NamingSystemId)(nil),
		(*Reference_NutritionOrderId)(nil),
		(*Reference_ObservationId)(nil),
		(*Reference_OperationDefinitionId)(nil),
		(*Reference_OperationOutcomeId)(nil),
		(*Reference_OrganizationId)(nil),
		(*Reference_ParametersId)(nil),
		(*Reference_PatientId)(nil),
		(*Reference_PaymentNoticeId)(nil),
		(*Reference_PaymentReconciliationId)(nil),
		(*Reference_PersonId)(nil),
		(*Reference_PlanDefinitionId)(nil),
		(*Reference_PractitionerId)(nil),
		(*Reference_PractitionerRoleId)(nil),
		(*Reference_ProcedureId)(nil),
		(*Reference_ProcedureRequestId)(nil),
		(*Reference_ProcessRequestId)(nil),
		(*Reference_ProcessResponseId)(nil),
		(*Reference_ProvenanceId)(nil),
		(*Reference_QuestionnaireId)(nil),
		(*Reference_QuestionnaireResponseId)(nil),
		(*Reference_ReferralRequestId)(nil),
		(*Reference_RelatedPersonId)(nil),
		(*Reference_RequestGroupId)(nil),
		(*Reference_ResearchStudyId)(nil),
		(*Reference_ResearchSubjectId)(nil),
		(*Reference_RiskAssessmentId)(nil),
		(*Reference_ScheduleId)(nil),
		(*Reference_SearchParameterId)(nil),
		(*Reference_SequenceId)(nil),
		(*Reference_ServiceDefinitionId)(nil),
		(*Reference_SlotId)(nil),
		(*Reference_SpecimenId)(nil),
		(*Reference_StructureDefinitionId)(nil),
		(*Reference_StructureMapId)(nil),
		(*Reference_SubscriptionId)(nil),
		(*Reference_SubstanceId)(nil),
		(*Reference_SupplyDeliveryId)(nil),
		(*Reference_SupplyRequestId)(nil),
		(*Reference_TaskId)(nil),
		(*Reference_TestReportId)(nil),
		(*Reference_TestScriptId)(nil),
		(*Reference_ValueSetId)(nil),
		(*Reference_VisionPrescriptionId)(nil),
	}
}

func _Reference_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Reference)
	// reference
	switch x := m.Reference.(type) {
	case *Reference_Uri:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *Reference_Fragment:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fragment); err != nil {
			return err
		}
	case *Reference_AccountId:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountId); err != nil {
			return err
		}
	case *Reference_ActivityDefinitionId:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActivityDefinitionId); err != nil {
			return err
		}
	case *Reference_AdverseEventId:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdverseEventId); err != nil {
			return err
		}
	case *Reference_AllergyIntoleranceId:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllergyIntoleranceId); err != nil {
			return err
		}
	case *Reference_AppointmentId:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppointmentId); err != nil {
			return err
		}
	case *Reference_AppointmentResponseId:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppointmentResponseId); err != nil {
			return err
		}
	case *Reference_AuditEventId:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuditEventId); err != nil {
			return err
		}
	case *Reference_BasicId:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicId); err != nil {
			return err
		}
	case *Reference_BinaryId:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinaryId); err != nil {
			return err
		}
	case *Reference_BodySiteId:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BodySiteId); err != nil {
			return err
		}
	case *Reference_BundleId:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BundleId); err != nil {
			return err
		}
	case *Reference_CapabilityStatementId:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CapabilityStatementId); err != nil {
			return err
		}
	case *Reference_CarePlanId:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarePlanId); err != nil {
			return err
		}
	case *Reference_CareTeamId:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CareTeamId); err != nil {
			return err
		}
	case *Reference_ChargeItemId:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChargeItemId); err != nil {
			return err
		}
	case *Reference_ClaimId:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClaimId); err != nil {
			return err
		}
	case *Reference_ClaimResponseId:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClaimResponseId); err != nil {
			return err
		}
	case *Reference_ClinicalImpressionId:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClinicalImpressionId); err != nil {
			return err
		}
	case *Reference_CodeSystemId:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeSystemId); err != nil {
			return err
		}
	case *Reference_CommunicationId:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommunicationId); err != nil {
			return err
		}
	case *Reference_CommunicationRequestId:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommunicationRequestId); err != nil {
			return err
		}
	case *Reference_CompartmentDefinitionId:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CompartmentDefinitionId); err != nil {
			return err
		}
	case *Reference_CompositionId:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CompositionId); err != nil {
			return err
		}
	case *Reference_ConceptMapId:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConceptMapId); err != nil {
			return err
		}
	case *Reference_ConditionId:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConditionId); err != nil {
			return err
		}
	case *Reference_ConsentId:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsentId); err != nil {
			return err
		}
	case *Reference_ContractId:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractId); err != nil {
			return err
		}
	case *Reference_CoverageId:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CoverageId); err != nil {
			return err
		}
	case *Reference_DataElementId:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataElementId); err != nil {
			return err
		}
	case *Reference_DetectedIssueId:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DetectedIssueId); err != nil {
			return err
		}
	case *Reference_DeviceId:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceId); err != nil {
			return err
		}
	case *Reference_DeviceComponentId:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceComponentId); err != nil {
			return err
		}
	case *Reference_DeviceMetricId:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceMetricId); err != nil {
			return err
		}
	case *Reference_DeviceRequestId:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceRequestId); err != nil {
			return err
		}
	case *Reference_DeviceUsestatementId:
		b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceUsestatementId); err != nil {
			return err
		}
	case *Reference_DiagnosticReportId:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DiagnosticReportId); err != nil {
			return err
		}
	case *Reference_DocumentManifestId:
		b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DocumentManifestId); err != nil {
			return err
		}
	case *Reference_DocumentReferenceId:
		b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DocumentReferenceId); err != nil {
			return err
		}
	case *Reference_EligibilityRequestId:
		b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EligibilityRequestId); err != nil {
			return err
		}
	case *Reference_EligibilityResponseId:
		b.EncodeVarint(44<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EligibilityResponseId); err != nil {
			return err
		}
	case *Reference_EncounterId:
		b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncounterId); err != nil {
			return err
		}
	case *Reference_EndpointId:
		b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EndpointId); err != nil {
			return err
		}
	case *Reference_EnrollmentRequestId:
		b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnrollmentRequestId); err != nil {
			return err
		}
	case *Reference_EnrollmentResponseId:
		b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnrollmentResponseId); err != nil {
			return err
		}
	case *Reference_EpisodeOfcareId:
		b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpisodeOfcareId); err != nil {
			return err
		}
	case *Reference_ExpansionProfileId:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExpansionProfileId); err != nil {
			return err
		}
	case *Reference_ExplanationOfbenefitId:
		b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExplanationOfbenefitId); err != nil {
			return err
		}
	case *Reference_FamilyMemberhistoryId:
		b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FamilyMemberhistoryId); err != nil {
			return err
		}
	case *Reference_FlagId:
		b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlagId); err != nil {
			return err
		}
	case *Reference_GoalId:
		b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GoalId); err != nil {
			return err
		}
	case *Reference_GraphDefinitionId:
		b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphDefinitionId); err != nil {
			return err
		}
	case *Reference_GroupId:
		b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupId); err != nil {
			return err
		}
	case *Reference_GuidanceResponseId:
		b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GuidanceResponseId); err != nil {
			return err
		}
	case *Reference_HealthcareServiceId:
		b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HealthcareServiceId); err != nil {
			return err
		}
	case *Reference_ImagingManifestId:
		b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImagingManifestId); err != nil {
			return err
		}
	case *Reference_ImagingStudyId:
		b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImagingStudyId); err != nil {
			return err
		}
	case *Reference_ImmunizationId:
		b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImmunizationId); err != nil {
			return err
		}
	case *Reference_ImmunizationRecommendationId:
		b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImmunizationRecommendationId); err != nil {
			return err
		}
	case *Reference_ImplementationGuideId:
		b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImplementationGuideId); err != nil {
			return err
		}
	case *Reference_LibraryId:
		b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LibraryId); err != nil {
			return err
		}
	case *Reference_LinkageId:
		b.EncodeVarint(65<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkageId); err != nil {
			return err
		}
	case *Reference_ListId:
		b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListId); err != nil {
			return err
		}
	case *Reference_LocationId:
		b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocationId); err != nil {
			return err
		}
	case *Reference_MeasureId:
		b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MeasureId); err != nil {
			return err
		}
	case *Reference_MeasureReportId:
		b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MeasureReportId); err != nil {
			return err
		}
	case *Reference_MediaId:
		b.EncodeVarint(70<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MediaId); err != nil {
			return err
		}
	case *Reference_MedicationId:
		b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationId); err != nil {
			return err
		}
	case *Reference_MedicationAdministrationId:
		b.EncodeVarint(72<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationAdministrationId); err != nil {
			return err
		}
	case *Reference_MedicationDispenseId:
		b.EncodeVarint(73<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationDispenseId); err != nil {
			return err
		}
	case *Reference_MedicationRequestId:
		b.EncodeVarint(74<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationRequestId); err != nil {
			return err
		}
	case *Reference_MedicationStatementId:
		b.EncodeVarint(75<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationStatementId); err != nil {
			return err
		}
	case *Reference_MessageDefinitionId:
		b.EncodeVarint(76<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageDefinitionId); err != nil {
			return err
		}
	case *Reference_MessageHeaderId:
		b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageHeaderId); err != nil {
			return err
		}
	case *Reference_NamingSystemId:
		b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NamingSystemId); err != nil {
			return err
		}
	case *Reference_NutritionOrderId:
		b.EncodeVarint(79<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NutritionOrderId); err != nil {
			return err
		}
	case *Reference_ObservationId:
		b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObservationId); err != nil {
			return err
		}
	case *Reference_OperationDefinitionId:
		b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OperationDefinitionId); err != nil {
			return err
		}
	case *Reference_OperationOutcomeId:
		b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OperationOutcomeId); err != nil {
			return err
		}
	case *Reference_OrganizationId:
		b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrganizationId); err != nil {
			return err
		}
	case *Reference_ParametersId:
		b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParametersId); err != nil {
			return err
		}
	case *Reference_PatientId:
		b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PatientId); err != nil {
			return err
		}
	case *Reference_PaymentNoticeId:
		b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PaymentNoticeId); err != nil {
			return err
		}
	case *Reference_PaymentReconciliationId:
		b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PaymentReconciliationId); err != nil {
			return err
		}
	case *Reference_PersonId:
		b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersonId); err != nil {
			return err
		}
	case *Reference_PlanDefinitionId:
		b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlanDefinitionId); err != nil {
			return err
		}
	case *Reference_PractitionerId:
		b.EncodeVarint(90<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PractitionerId); err != nil {
			return err
		}
	case *Reference_PractitionerRoleId:
		b.EncodeVarint(91<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PractitionerRoleId); err != nil {
			return err
		}
	case *Reference_ProcedureId:
		b.EncodeVarint(92<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcedureId); err != nil {
			return err
		}
	case *Reference_ProcedureRequestId:
		b.EncodeVarint(93<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcedureRequestId); err != nil {
			return err
		}
	case *Reference_ProcessRequestId:
		b.EncodeVarint(94<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcessRequestId); err != nil {
			return err
		}
	case *Reference_ProcessResponseId:
		b.EncodeVarint(95<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcessResponseId); err != nil {
			return err
		}
	case *Reference_ProvenanceId:
		b.EncodeVarint(96<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvenanceId); err != nil {
			return err
		}
	case *Reference_QuestionnaireId:
		b.EncodeVarint(97<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuestionnaireId); err != nil {
			return err
		}
	case *Reference_QuestionnaireResponseId:
		b.EncodeVarint(98<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuestionnaireResponseId); err != nil {
			return err
		}
	case *Reference_ReferralRequestId:
		b.EncodeVarint(99<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReferralRequestId); err != nil {
			return err
		}
	case *Reference_RelatedPersonId:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RelatedPersonId); err != nil {
			return err
		}
	case *Reference_RequestGroupId:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestGroupId); err != nil {
			return err
		}
	case *Reference_ResearchStudyId:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResearchStudyId); err != nil {
			return err
		}
	case *Reference_ResearchSubjectId:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResearchSubjectId); err != nil {
			return err
		}
	case *Reference_RiskAssessmentId:
		b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RiskAssessmentId); err != nil {
			return err
		}
	case *Reference_ScheduleId:
		b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ScheduleId); err != nil {
			return err
		}
	case *Reference_SearchParameterId:
		b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchParameterId); err != nil {
			return err
		}
	case *Reference_SequenceId:
		b.EncodeVarint(107<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SequenceId); err != nil {
			return err
		}
	case *Reference_ServiceDefinitionId:
		b.EncodeVarint(108<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceDefinitionId); err != nil {
			return err
		}
	case *Reference_SlotId:
		b.EncodeVarint(109<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SlotId); err != nil {
			return err
		}
	case *Reference_SpecimenId:
		b.EncodeVarint(110<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpecimenId); err != nil {
			return err
		}
	case *Reference_StructureDefinitionId:
		b.EncodeVarint(111<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructureDefinitionId); err != nil {
			return err
		}
	case *Reference_StructureMapId:
		b.EncodeVarint(112<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructureMapId); err != nil {
			return err
		}
	case *Reference_SubscriptionId:
		b.EncodeVarint(113<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscriptionId); err != nil {
			return err
		}
	case *Reference_SubstanceId:
		b.EncodeVarint(114<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubstanceId); err != nil {
			return err
		}
	case *Reference_SupplyDeliveryId:
		b.EncodeVarint(115<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SupplyDeliveryId); err != nil {
			return err
		}
	case *Reference_SupplyRequestId:
		b.EncodeVarint(116<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SupplyRequestId); err != nil {
			return err
		}
	case *Reference_TaskId:
		b.EncodeVarint(117<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskId); err != nil {
			return err
		}
	case *Reference_TestReportId:
		b.EncodeVarint(118<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TestReportId); err != nil {
			return err
		}
	case *Reference_TestScriptId:
		b.EncodeVarint(119<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TestScriptId); err != nil {
			return err
		}
	case *Reference_ValueSetId:
		b.EncodeVarint(120<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueSetId); err != nil {
			return err
		}
	case *Reference_VisionPrescriptionId:
		b.EncodeVarint(121<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VisionPrescriptionId); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Reference.Reference has unexpected type %T", x)
	}
	return nil
}

func _Reference_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Reference)
	switch tag {
	case 3: // reference.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_Uri{msg}
		return true, err
	case 4: // reference.fragment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_Fragment{msg}
		return true, err
	case 5: // reference.account_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AccountId{msg}
		return true, err
	case 6: // reference.activity_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ActivityDefinitionId{msg}
		return true, err
	case 7: // reference.adverse_event_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AdverseEventId{msg}
		return true, err
	case 8: // reference.allergy_intolerance_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AllergyIntoleranceId{msg}
		return true, err
	case 9: // reference.appointment_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AppointmentId{msg}
		return true, err
	case 10: // reference.appointment_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AppointmentResponseId{msg}
		return true, err
	case 11: // reference.audit_event_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_AuditEventId{msg}
		return true, err
	case 12: // reference.basic_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_BasicId{msg}
		return true, err
	case 13: // reference.binary_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_BinaryId{msg}
		return true, err
	case 14: // reference.body_site_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_BodySiteId{msg}
		return true, err
	case 15: // reference.bundle_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_BundleId{msg}
		return true, err
	case 16: // reference.capability_statement_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CapabilityStatementId{msg}
		return true, err
	case 17: // reference.care_plan_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CarePlanId{msg}
		return true, err
	case 18: // reference.care_team_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CareTeamId{msg}
		return true, err
	case 19: // reference.charge_item_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ChargeItemId{msg}
		return true, err
	case 20: // reference.claim_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ClaimId{msg}
		return true, err
	case 21: // reference.claim_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ClaimResponseId{msg}
		return true, err
	case 22: // reference.clinical_impression_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ClinicalImpressionId{msg}
		return true, err
	case 23: // reference.code_system_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CodeSystemId{msg}
		return true, err
	case 24: // reference.communication_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CommunicationId{msg}
		return true, err
	case 25: // reference.communication_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CommunicationRequestId{msg}
		return true, err
	case 26: // reference.compartment_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CompartmentDefinitionId{msg}
		return true, err
	case 27: // reference.composition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CompositionId{msg}
		return true, err
	case 28: // reference.concept_map_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ConceptMapId{msg}
		return true, err
	case 29: // reference.condition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ConditionId{msg}
		return true, err
	case 30: // reference.consent_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ConsentId{msg}
		return true, err
	case 31: // reference.contract_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ContractId{msg}
		return true, err
	case 32: // reference.coverage_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_CoverageId{msg}
		return true, err
	case 33: // reference.data_element_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DataElementId{msg}
		return true, err
	case 34: // reference.detected_issue_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DetectedIssueId{msg}
		return true, err
	case 35: // reference.device_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DeviceId{msg}
		return true, err
	case 36: // reference.device_component_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DeviceComponentId{msg}
		return true, err
	case 37: // reference.device_metric_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DeviceMetricId{msg}
		return true, err
	case 38: // reference.device_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DeviceRequestId{msg}
		return true, err
	case 39: // reference.device_usestatement_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DeviceUsestatementId{msg}
		return true, err
	case 40: // reference.diagnostic_report_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DiagnosticReportId{msg}
		return true, err
	case 41: // reference.document_manifest_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DocumentManifestId{msg}
		return true, err
	case 42: // reference.document_reference_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_DocumentReferenceId{msg}
		return true, err
	case 43: // reference.eligibility_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EligibilityRequestId{msg}
		return true, err
	case 44: // reference.eligibility_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EligibilityResponseId{msg}
		return true, err
	case 45: // reference.encounter_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EncounterId{msg}
		return true, err
	case 46: // reference.endpoint_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EndpointId{msg}
		return true, err
	case 47: // reference.enrollment_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EnrollmentRequestId{msg}
		return true, err
	case 48: // reference.enrollment_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EnrollmentResponseId{msg}
		return true, err
	case 49: // reference.episode_ofcare_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_EpisodeOfcareId{msg}
		return true, err
	case 50: // reference.expansion_profile_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ExpansionProfileId{msg}
		return true, err
	case 51: // reference.explanation_ofbenefit_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ExplanationOfbenefitId{msg}
		return true, err
	case 52: // reference.family_memberhistory_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_FamilyMemberhistoryId{msg}
		return true, err
	case 53: // reference.flag_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_FlagId{msg}
		return true, err
	case 54: // reference.goal_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_GoalId{msg}
		return true, err
	case 55: // reference.graph_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_GraphDefinitionId{msg}
		return true, err
	case 56: // reference.group_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_GroupId{msg}
		return true, err
	case 57: // reference.guidance_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_GuidanceResponseId{msg}
		return true, err
	case 58: // reference.healthcare_service_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_HealthcareServiceId{msg}
		return true, err
	case 59: // reference.imaging_manifest_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ImagingManifestId{msg}
		return true, err
	case 60: // reference.imaging_study_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ImagingStudyId{msg}
		return true, err
	case 61: // reference.immunization_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ImmunizationId{msg}
		return true, err
	case 62: // reference.immunization_recommendation_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ImmunizationRecommendationId{msg}
		return true, err
	case 63: // reference.implementation_guide_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ImplementationGuideId{msg}
		return true, err
	case 64: // reference.library_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_LibraryId{msg}
		return true, err
	case 65: // reference.linkage_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_LinkageId{msg}
		return true, err
	case 66: // reference.list_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ListId{msg}
		return true, err
	case 67: // reference.location_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_LocationId{msg}
		return true, err
	case 68: // reference.measure_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MeasureId{msg}
		return true, err
	case 69: // reference.measure_report_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MeasureReportId{msg}
		return true, err
	case 70: // reference.media_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MediaId{msg}
		return true, err
	case 71: // reference.medication_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MedicationId{msg}
		return true, err
	case 72: // reference.medication_administration_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MedicationAdministrationId{msg}
		return true, err
	case 73: // reference.medication_dispense_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MedicationDispenseId{msg}
		return true, err
	case 74: // reference.medication_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MedicationRequestId{msg}
		return true, err
	case 75: // reference.medication_statement_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MedicationStatementId{msg}
		return true, err
	case 76: // reference.message_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MessageDefinitionId{msg}
		return true, err
	case 77: // reference.message_header_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_MessageHeaderId{msg}
		return true, err
	case 78: // reference.naming_system_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_NamingSystemId{msg}
		return true, err
	case 79: // reference.nutrition_order_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_NutritionOrderId{msg}
		return true, err
	case 80: // reference.observation_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ObservationId{msg}
		return true, err
	case 81: // reference.operation_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_OperationDefinitionId{msg}
		return true, err
	case 82: // reference.operation_outcome_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_OperationOutcomeId{msg}
		return true, err
	case 83: // reference.organization_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_OrganizationId{msg}
		return true, err
	case 84: // reference.parameters_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ParametersId{msg}
		return true, err
	case 85: // reference.patient_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PatientId{msg}
		return true, err
	case 86: // reference.payment_notice_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PaymentNoticeId{msg}
		return true, err
	case 87: // reference.payment_reconciliation_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PaymentReconciliationId{msg}
		return true, err
	case 88: // reference.person_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PersonId{msg}
		return true, err
	case 89: // reference.plan_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PlanDefinitionId{msg}
		return true, err
	case 90: // reference.practitioner_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PractitionerId{msg}
		return true, err
	case 91: // reference.practitioner_role_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_PractitionerRoleId{msg}
		return true, err
	case 92: // reference.procedure_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ProcedureId{msg}
		return true, err
	case 93: // reference.procedure_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ProcedureRequestId{msg}
		return true, err
	case 94: // reference.process_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ProcessRequestId{msg}
		return true, err
	case 95: // reference.process_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ProcessResponseId{msg}
		return true, err
	case 96: // reference.provenance_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ProvenanceId{msg}
		return true, err
	case 97: // reference.questionnaire_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_QuestionnaireId{msg}
		return true, err
	case 98: // reference.questionnaire_response_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_QuestionnaireResponseId{msg}
		return true, err
	case 99: // reference.referral_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ReferralRequestId{msg}
		return true, err
	case 100: // reference.related_person_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_RelatedPersonId{msg}
		return true, err
	case 101: // reference.request_group_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_RequestGroupId{msg}
		return true, err
	case 102: // reference.research_study_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ResearchStudyId{msg}
		return true, err
	case 103: // reference.research_subject_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ResearchSubjectId{msg}
		return true, err
	case 104: // reference.risk_assessment_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_RiskAssessmentId{msg}
		return true, err
	case 105: // reference.schedule_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ScheduleId{msg}
		return true, err
	case 106: // reference.search_parameter_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SearchParameterId{msg}
		return true, err
	case 107: // reference.sequence_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SequenceId{msg}
		return true, err
	case 108: // reference.service_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ServiceDefinitionId{msg}
		return true, err
	case 109: // reference.slot_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SlotId{msg}
		return true, err
	case 110: // reference.specimen_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SpecimenId{msg}
		return true, err
	case 111: // reference.structure_definition_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_StructureDefinitionId{msg}
		return true, err
	case 112: // reference.structure_map_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_StructureMapId{msg}
		return true, err
	case 113: // reference.subscription_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SubscriptionId{msg}
		return true, err
	case 114: // reference.substance_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SubstanceId{msg}
		return true, err
	case 115: // reference.supply_delivery_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SupplyDeliveryId{msg}
		return true, err
	case 116: // reference.supply_request_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_SupplyRequestId{msg}
		return true, err
	case 117: // reference.task_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_TaskId{msg}
		return true, err
	case 118: // reference.test_report_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_TestReportId{msg}
		return true, err
	case 119: // reference.test_script_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_TestScriptId{msg}
		return true, err
	case 120: // reference.value_set_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_ValueSetId{msg}
		return true, err
	case 121: // reference.vision_prescription_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferenceId)
		err := b.DecodeMessage(msg)
		m.Reference = &Reference_VisionPrescriptionId{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Reference_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Reference)
	// reference
	switch x := m.Reference.(type) {
	case *Reference_Uri:
		s := proto.Size(x.Uri)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_Fragment:
		s := proto.Size(x.Fragment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AccountId:
		s := proto.Size(x.AccountId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ActivityDefinitionId:
		s := proto.Size(x.ActivityDefinitionId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AdverseEventId:
		s := proto.Size(x.AdverseEventId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AllergyIntoleranceId:
		s := proto.Size(x.AllergyIntoleranceId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AppointmentId:
		s := proto.Size(x.AppointmentId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AppointmentResponseId:
		s := proto.Size(x.AppointmentResponseId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_AuditEventId:
		s := proto.Size(x.AuditEventId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_BasicId:
		s := proto.Size(x.BasicId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_BinaryId:
		s := proto.Size(x.BinaryId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_BodySiteId:
		s := proto.Size(x.BodySiteId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_BundleId:
		s := proto.Size(x.BundleId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CapabilityStatementId:
		s := proto.Size(x.CapabilityStatementId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CarePlanId:
		s := proto.Size(x.CarePlanId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CareTeamId:
		s := proto.Size(x.CareTeamId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ChargeItemId:
		s := proto.Size(x.ChargeItemId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ClaimId:
		s := proto.Size(x.ClaimId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ClaimResponseId:
		s := proto.Size(x.ClaimResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ClinicalImpressionId:
		s := proto.Size(x.ClinicalImpressionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CodeSystemId:
		s := proto.Size(x.CodeSystemId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CommunicationId:
		s := proto.Size(x.CommunicationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CommunicationRequestId:
		s := proto.Size(x.CommunicationRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CompartmentDefinitionId:
		s := proto.Size(x.CompartmentDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CompositionId:
		s := proto.Size(x.CompositionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ConceptMapId:
		s := proto.Size(x.ConceptMapId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ConditionId:
		s := proto.Size(x.ConditionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ConsentId:
		s := proto.Size(x.ConsentId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ContractId:
		s := proto.Size(x.ContractId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_CoverageId:
		s := proto.Size(x.CoverageId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DataElementId:
		s := proto.Size(x.DataElementId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DetectedIssueId:
		s := proto.Size(x.DetectedIssueId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DeviceId:
		s := proto.Size(x.DeviceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DeviceComponentId:
		s := proto.Size(x.DeviceComponentId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DeviceMetricId:
		s := proto.Size(x.DeviceMetricId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DeviceRequestId:
		s := proto.Size(x.DeviceRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DeviceUsestatementId:
		s := proto.Size(x.DeviceUsestatementId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DiagnosticReportId:
		s := proto.Size(x.DiagnosticReportId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DocumentManifestId:
		s := proto.Size(x.DocumentManifestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_DocumentReferenceId:
		s := proto.Size(x.DocumentReferenceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EligibilityRequestId:
		s := proto.Size(x.EligibilityRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EligibilityResponseId:
		s := proto.Size(x.EligibilityResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EncounterId:
		s := proto.Size(x.EncounterId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EndpointId:
		s := proto.Size(x.EndpointId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EnrollmentRequestId:
		s := proto.Size(x.EnrollmentRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EnrollmentResponseId:
		s := proto.Size(x.EnrollmentResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_EpisodeOfcareId:
		s := proto.Size(x.EpisodeOfcareId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ExpansionProfileId:
		s := proto.Size(x.ExpansionProfileId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ExplanationOfbenefitId:
		s := proto.Size(x.ExplanationOfbenefitId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_FamilyMemberhistoryId:
		s := proto.Size(x.FamilyMemberhistoryId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_FlagId:
		s := proto.Size(x.FlagId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_GoalId:
		s := proto.Size(x.GoalId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_GraphDefinitionId:
		s := proto.Size(x.GraphDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_GroupId:
		s := proto.Size(x.GroupId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_GuidanceResponseId:
		s := proto.Size(x.GuidanceResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_HealthcareServiceId:
		s := proto.Size(x.HealthcareServiceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ImagingManifestId:
		s := proto.Size(x.ImagingManifestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ImagingStudyId:
		s := proto.Size(x.ImagingStudyId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ImmunizationId:
		s := proto.Size(x.ImmunizationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ImmunizationRecommendationId:
		s := proto.Size(x.ImmunizationRecommendationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ImplementationGuideId:
		s := proto.Size(x.ImplementationGuideId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_LibraryId:
		s := proto.Size(x.LibraryId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_LinkageId:
		s := proto.Size(x.LinkageId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ListId:
		s := proto.Size(x.ListId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_LocationId:
		s := proto.Size(x.LocationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MeasureId:
		s := proto.Size(x.MeasureId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MeasureReportId:
		s := proto.Size(x.MeasureReportId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MediaId:
		s := proto.Size(x.MediaId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MedicationId:
		s := proto.Size(x.MedicationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MedicationAdministrationId:
		s := proto.Size(x.MedicationAdministrationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MedicationDispenseId:
		s := proto.Size(x.MedicationDispenseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MedicationRequestId:
		s := proto.Size(x.MedicationRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MedicationStatementId:
		s := proto.Size(x.MedicationStatementId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MessageDefinitionId:
		s := proto.Size(x.MessageDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_MessageHeaderId:
		s := proto.Size(x.MessageHeaderId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_NamingSystemId:
		s := proto.Size(x.NamingSystemId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_NutritionOrderId:
		s := proto.Size(x.NutritionOrderId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ObservationId:
		s := proto.Size(x.ObservationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_OperationDefinitionId:
		s := proto.Size(x.OperationDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_OperationOutcomeId:
		s := proto.Size(x.OperationOutcomeId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_OrganizationId:
		s := proto.Size(x.OrganizationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ParametersId:
		s := proto.Size(x.ParametersId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PatientId:
		s := proto.Size(x.PatientId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PaymentNoticeId:
		s := proto.Size(x.PaymentNoticeId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PaymentReconciliationId:
		s := proto.Size(x.PaymentReconciliationId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PersonId:
		s := proto.Size(x.PersonId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PlanDefinitionId:
		s := proto.Size(x.PlanDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PractitionerId:
		s := proto.Size(x.PractitionerId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_PractitionerRoleId:
		s := proto.Size(x.PractitionerRoleId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ProcedureId:
		s := proto.Size(x.ProcedureId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ProcedureRequestId:
		s := proto.Size(x.ProcedureRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ProcessRequestId:
		s := proto.Size(x.ProcessRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ProcessResponseId:
		s := proto.Size(x.ProcessResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ProvenanceId:
		s := proto.Size(x.ProvenanceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_QuestionnaireId:
		s := proto.Size(x.QuestionnaireId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_QuestionnaireResponseId:
		s := proto.Size(x.QuestionnaireResponseId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ReferralRequestId:
		s := proto.Size(x.ReferralRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_RelatedPersonId:
		s := proto.Size(x.RelatedPersonId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_RequestGroupId:
		s := proto.Size(x.RequestGroupId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ResearchStudyId:
		s := proto.Size(x.ResearchStudyId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ResearchSubjectId:
		s := proto.Size(x.ResearchSubjectId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_RiskAssessmentId:
		s := proto.Size(x.RiskAssessmentId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ScheduleId:
		s := proto.Size(x.ScheduleId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SearchParameterId:
		s := proto.Size(x.SearchParameterId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SequenceId:
		s := proto.Size(x.SequenceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ServiceDefinitionId:
		s := proto.Size(x.ServiceDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SlotId:
		s := proto.Size(x.SlotId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SpecimenId:
		s := proto.Size(x.SpecimenId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_StructureDefinitionId:
		s := proto.Size(x.StructureDefinitionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_StructureMapId:
		s := proto.Size(x.StructureMapId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SubscriptionId:
		s := proto.Size(x.SubscriptionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SubstanceId:
		s := proto.Size(x.SubstanceId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SupplyDeliveryId:
		s := proto.Size(x.SupplyDeliveryId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_SupplyRequestId:
		s := proto.Size(x.SupplyRequestId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_TaskId:
		s := proto.Size(x.TaskId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_TestReportId:
		s := proto.Size(x.TestReportId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_TestScriptId:
		s := proto.Size(x.TestScriptId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_ValueSetId:
		s := proto.Size(x.ValueSetId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Reference_VisionPrescriptionId:
		s := proto.Size(x.VisionPrescriptionId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReferenceId struct {
	// Primitive value for id
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// History version, if present.
	History *Id `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReferenceId) Reset()         { *m = ReferenceId{} }
func (m *ReferenceId) String() string { return proto.CompactTextString(m) }
func (*ReferenceId) ProtoMessage()    {}
func (*ReferenceId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{45}
}

func (m *ReferenceId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceId.Unmarshal(m, b)
}
func (m *ReferenceId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceId.Marshal(b, m, deterministic)
}
func (m *ReferenceId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceId.Merge(m, src)
}
func (m *ReferenceId) XXX_Size() int {
	return xxx_messageInfo_ReferenceId.Size(m)
}
func (m *ReferenceId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceId.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceId proto.InternalMessageInfo

func (m *ReferenceId) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ReferenceId) GetHistory() *Id {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ReferenceId) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReferenceId) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// The type of an address (physical / postal)
// See http://hl7.org/fhir/ValueSet/address-type
type AddressTypeCode struct {
	Value AddressTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AddressTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddressTypeCode) Reset()         { *m = AddressTypeCode{} }
func (m *AddressTypeCode) String() string { return proto.CompactTextString(m) }
func (*AddressTypeCode) ProtoMessage()    {}
func (*AddressTypeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{46}
}

func (m *AddressTypeCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressTypeCode.Unmarshal(m, b)
}
func (m *AddressTypeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressTypeCode.Marshal(b, m, deterministic)
}
func (m *AddressTypeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressTypeCode.Merge(m, src)
}
func (m *AddressTypeCode) XXX_Size() int {
	return xxx_messageInfo_AddressTypeCode.Size(m)
}
func (m *AddressTypeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressTypeCode.DiscardUnknown(m)
}

var xxx_messageInfo_AddressTypeCode proto.InternalMessageInfo

func (m *AddressTypeCode) GetValue() AddressTypeCode_Value {
	if m != nil {
		return m.Value
	}
	return AddressTypeCode_INVALID_UNINITIALIZED
}

func (m *AddressTypeCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AddressTypeCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// The use of an address
// See http://hl7.org/fhir/ValueSet/address-use
type AddressUseCode struct {
	Value AddressUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AddressUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddressUseCode) Reset()         { *m = AddressUseCode{} }
func (m *AddressUseCode) String() string { return proto.CompactTextString(m) }
func (*AddressUseCode) ProtoMessage()    {}
func (*AddressUseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{47}
}

func (m *AddressUseCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressUseCode.Unmarshal(m, b)
}
func (m *AddressUseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressUseCode.Marshal(b, m, deterministic)
}
func (m *AddressUseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressUseCode.Merge(m, src)
}
func (m *AddressUseCode) XXX_Size() int {
	return xxx_messageInfo_AddressUseCode.Size(m)
}
func (m *AddressUseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressUseCode.DiscardUnknown(m)
}

var xxx_messageInfo_AddressUseCode proto.InternalMessageInfo

func (m *AddressUseCode) GetValue() AddressUseCode_Value {
	if m != nil {
		return m.Value
	}
	return AddressUseCode_INVALID_UNINITIALIZED
}

func (m *AddressUseCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AddressUseCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Telecommunications form for contact point
// See http://hl7.org/fhir/ValueSet/contact-point-system
type ContactPointSystemCode struct {
	Value ContactPointSystemCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContactPointSystemCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ContactPointSystemCode) Reset()         { *m = ContactPointSystemCode{} }
func (m *ContactPointSystemCode) String() string { return proto.CompactTextString(m) }
func (*ContactPointSystemCode) ProtoMessage()    {}
func (*ContactPointSystemCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{48}
}

func (m *ContactPointSystemCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactPointSystemCode.Unmarshal(m, b)
}
func (m *ContactPointSystemCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactPointSystemCode.Marshal(b, m, deterministic)
}
func (m *ContactPointSystemCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactPointSystemCode.Merge(m, src)
}
func (m *ContactPointSystemCode) XXX_Size() int {
	return xxx_messageInfo_ContactPointSystemCode.Size(m)
}
func (m *ContactPointSystemCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactPointSystemCode.DiscardUnknown(m)
}

var xxx_messageInfo_ContactPointSystemCode proto.InternalMessageInfo

func (m *ContactPointSystemCode) GetValue() ContactPointSystemCode_Value {
	if m != nil {
		return m.Value
	}
	return ContactPointSystemCode_INVALID_UNINITIALIZED
}

func (m *ContactPointSystemCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ContactPointSystemCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Use of contact point
// See http://hl7.org/fhir/ValueSet/contact-point-use
type ContactPointUseCode struct {
	Value ContactPointUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContactPointUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ContactPointUseCode) Reset()         { *m = ContactPointUseCode{} }
func (m *ContactPointUseCode) String() string { return proto.CompactTextString(m) }
func (*ContactPointUseCode) ProtoMessage()    {}
func (*ContactPointUseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{49}
}

func (m *ContactPointUseCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactPointUseCode.Unmarshal(m, b)
}
func (m *ContactPointUseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactPointUseCode.Marshal(b, m, deterministic)
}
func (m *ContactPointUseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactPointUseCode.Merge(m, src)
}
func (m *ContactPointUseCode) XXX_Size() int {
	return xxx_messageInfo_ContactPointUseCode.Size(m)
}
func (m *ContactPointUseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactPointUseCode.DiscardUnknown(m)
}

var xxx_messageInfo_ContactPointUseCode proto.InternalMessageInfo

func (m *ContactPointUseCode) GetValue() ContactPointUseCode_Value {
	if m != nil {
		return m.Value
	}
	return ContactPointUseCode_INVALID_UNINITIALIZED
}

func (m *ContactPointUseCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ContactPointUseCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// The days of the week.
// See http://hl7.org/fhir/ValueSet/days-of-week
type DaysOfWeekCode struct {
	Value DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DaysOfWeekCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DaysOfWeekCode) Reset()         { *m = DaysOfWeekCode{} }
func (m *DaysOfWeekCode) String() string { return proto.CompactTextString(m) }
func (*DaysOfWeekCode) ProtoMessage()    {}
func (*DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{50}
}

func (m *DaysOfWeekCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaysOfWeekCode.Unmarshal(m, b)
}
func (m *DaysOfWeekCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaysOfWeekCode.Marshal(b, m, deterministic)
}
func (m *DaysOfWeekCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaysOfWeekCode.Merge(m, src)
}
func (m *DaysOfWeekCode) XXX_Size() int {
	return xxx_messageInfo_DaysOfWeekCode.Size(m)
}
func (m *DaysOfWeekCode) XXX_DiscardUnknown() {
	xxx_messageInfo_DaysOfWeekCode.DiscardUnknown(m)
}

var xxx_messageInfo_DaysOfWeekCode proto.InternalMessageInfo

func (m *DaysOfWeekCode) GetValue() DaysOfWeekCode_Value {
	if m != nil {
		return m.Value
	}
	return DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (m *DaysOfWeekCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DaysOfWeekCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Real world event relating to the schedule.
// See http://hl7.org/fhir/ValueSet/event-timing
type EventTimingCode struct {
	Value EventTimingCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EventTimingCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EventTimingCode) Reset()         { *m = EventTimingCode{} }
func (m *EventTimingCode) String() string { return proto.CompactTextString(m) }
func (*EventTimingCode) ProtoMessage()    {}
func (*EventTimingCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{51}
}

func (m *EventTimingCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTimingCode.Unmarshal(m, b)
}
func (m *EventTimingCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTimingCode.Marshal(b, m, deterministic)
}
func (m *EventTimingCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTimingCode.Merge(m, src)
}
func (m *EventTimingCode) XXX_Size() int {
	return xxx_messageInfo_EventTimingCode.Size(m)
}
func (m *EventTimingCode) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTimingCode.DiscardUnknown(m)
}

var xxx_messageInfo_EventTimingCode proto.InternalMessageInfo

func (m *EventTimingCode) GetValue() EventTimingCode_Value {
	if m != nil {
		return m.Value
	}
	return EventTimingCode_INVALID_UNINITIALIZED
}

func (m *EventTimingCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EventTimingCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Identifies the purpose for this identifier, if known .
// See http://hl7.org/fhir/ValueSet/identifier-use
type IdentifierUseCode struct {
	Value IdentifierUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.IdentifierUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IdentifierUseCode) Reset()         { *m = IdentifierUseCode{} }
func (m *IdentifierUseCode) String() string { return proto.CompactTextString(m) }
func (*IdentifierUseCode) ProtoMessage()    {}
func (*IdentifierUseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{52}
}

func (m *IdentifierUseCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentifierUseCode.Unmarshal(m, b)
}
func (m *IdentifierUseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentifierUseCode.Marshal(b, m, deterministic)
}
func (m *IdentifierUseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentifierUseCode.Merge(m, src)
}
func (m *IdentifierUseCode) XXX_Size() int {
	return xxx_messageInfo_IdentifierUseCode.Size(m)
}
func (m *IdentifierUseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentifierUseCode.DiscardUnknown(m)
}

var xxx_messageInfo_IdentifierUseCode proto.InternalMessageInfo

func (m *IdentifierUseCode) GetValue() IdentifierUseCode_Value {
	if m != nil {
		return m.Value
	}
	return IdentifierUseCode_INVALID_UNINITIALIZED
}

func (m *IdentifierUseCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IdentifierUseCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// This value set includes all possible codes from BCP-47
// (http://tools.ietf.org/html/bcp47)
// See http://hl7.org/fhir/ValueSet/all-languages
type AllLanguageCode struct {
	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AllLanguageCode) Reset()         { *m = AllLanguageCode{} }
func (m *AllLanguageCode) String() string { return proto.CompactTextString(m) }
func (*AllLanguageCode) ProtoMessage()    {}
func (*AllLanguageCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{53}
}

func (m *AllLanguageCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllLanguageCode.Unmarshal(m, b)
}
func (m *AllLanguageCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllLanguageCode.Marshal(b, m, deterministic)
}
func (m *AllLanguageCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllLanguageCode.Merge(m, src)
}
func (m *AllLanguageCode) XXX_Size() int {
	return xxx_messageInfo_AllLanguageCode.Size(m)
}
func (m *AllLanguageCode) XXX_DiscardUnknown() {
	xxx_messageInfo_AllLanguageCode.DiscardUnknown(m)
}

var xxx_messageInfo_AllLanguageCode proto.InternalMessageInfo

func (m *AllLanguageCode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *AllLanguageCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AllLanguageCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// This value set includes common codes from BCP-47
// (http://tools.ietf.org/html/bcp47)
// See http://hl7.org/fhir/ValueSet/languages
// Note: For historical reasons, this does not use an enum to represent value.
type LanguageCode struct {
	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LanguageCode) Reset()         { *m = LanguageCode{} }
func (m *LanguageCode) String() string { return proto.CompactTextString(m) }
func (*LanguageCode) ProtoMessage()    {}
func (*LanguageCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{54}
}

func (m *LanguageCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LanguageCode.Unmarshal(m, b)
}
func (m *LanguageCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LanguageCode.Marshal(b, m, deterministic)
}
func (m *LanguageCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageCode.Merge(m, src)
}
func (m *LanguageCode) XXX_Size() int {
	return xxx_messageInfo_LanguageCode.Size(m)
}
func (m *LanguageCode) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageCode.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageCode proto.InternalMessageInfo

func (m *LanguageCode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LanguageCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LanguageCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Any valid MimeType.
// See http://www.rfc-editor.org/bcp/bcp13.txt
type MimeTypeCode struct {
	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MimeTypeCode) Reset()         { *m = MimeTypeCode{} }
func (m *MimeTypeCode) String() string { return proto.CompactTextString(m) }
func (*MimeTypeCode) ProtoMessage()    {}
func (*MimeTypeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{55}
}

func (m *MimeTypeCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MimeTypeCode.Unmarshal(m, b)
}
func (m *MimeTypeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MimeTypeCode.Marshal(b, m, deterministic)
}
func (m *MimeTypeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MimeTypeCode.Merge(m, src)
}
func (m *MimeTypeCode) XXX_Size() int {
	return xxx_messageInfo_MimeTypeCode.Size(m)
}
func (m *MimeTypeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_MimeTypeCode.DiscardUnknown(m)
}

var xxx_messageInfo_MimeTypeCode proto.InternalMessageInfo

func (m *MimeTypeCode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MimeTypeCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MimeTypeCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// The use of a human name
// See http://hl7.org/fhir/ValueSet/name-use
type NameUseCode struct {
	Value NameUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NameUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NameUseCode) Reset()         { *m = NameUseCode{} }
func (m *NameUseCode) String() string { return proto.CompactTextString(m) }
func (*NameUseCode) ProtoMessage()    {}
func (*NameUseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{56}
}

func (m *NameUseCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameUseCode.Unmarshal(m, b)
}
func (m *NameUseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameUseCode.Marshal(b, m, deterministic)
}
func (m *NameUseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameUseCode.Merge(m, src)
}
func (m *NameUseCode) XXX_Size() int {
	return xxx_messageInfo_NameUseCode.Size(m)
}
func (m *NameUseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_NameUseCode.DiscardUnknown(m)
}

var xxx_messageInfo_NameUseCode proto.InternalMessageInfo

func (m *NameUseCode) GetValue() NameUseCode_Value {
	if m != nil {
		return m.Value
	}
	return NameUseCode_INVALID_UNINITIALIZED
}

func (m *NameUseCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NameUseCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// How the Quantity should be understood and represented.
// See http://hl7.org/fhir/ValueSet/quantity-comparator
type QuantityComparatorCode struct {
	Value QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuantityComparatorCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QuantityComparatorCode) Reset()         { *m = QuantityComparatorCode{} }
func (m *QuantityComparatorCode) String() string { return proto.CompactTextString(m) }
func (*QuantityComparatorCode) ProtoMessage()    {}
func (*QuantityComparatorCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{57}
}

func (m *QuantityComparatorCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuantityComparatorCode.Unmarshal(m, b)
}
func (m *QuantityComparatorCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuantityComparatorCode.Marshal(b, m, deterministic)
}
func (m *QuantityComparatorCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuantityComparatorCode.Merge(m, src)
}
func (m *QuantityComparatorCode) XXX_Size() int {
	return xxx_messageInfo_QuantityComparatorCode.Size(m)
}
func (m *QuantityComparatorCode) XXX_DiscardUnknown() {
	xxx_messageInfo_QuantityComparatorCode.DiscardUnknown(m)
}

var xxx_messageInfo_QuantityComparatorCode proto.InternalMessageInfo

func (m *QuantityComparatorCode) GetValue() QuantityComparatorCode_Value {
	if m != nil {
		return m.Value
	}
	return QuantityComparatorCode_INVALID_UNINITIALIZED
}

func (m *QuantityComparatorCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *QuantityComparatorCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// A unit of time (units from UCUM). See
// http://hl7.org/fhir/ValueSet/units-of-time
type UnitsOfTimeCode struct {
	Value UnitsOfTimeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UnitsOfTimeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UnitsOfTimeCode) Reset()         { *m = UnitsOfTimeCode{} }
func (m *UnitsOfTimeCode) String() string { return proto.CompactTextString(m) }
func (*UnitsOfTimeCode) ProtoMessage()    {}
func (*UnitsOfTimeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c460b0e41d635, []int{58}
}

func (m *UnitsOfTimeCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitsOfTimeCode.Unmarshal(m, b)
}
func (m *UnitsOfTimeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitsOfTimeCode.Marshal(b, m, deterministic)
}
func (m *UnitsOfTimeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitsOfTimeCode.Merge(m, src)
}
func (m *UnitsOfTimeCode) XXX_Size() int {
	return xxx_messageInfo_UnitsOfTimeCode.Size(m)
}
func (m *UnitsOfTimeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitsOfTimeCode.DiscardUnknown(m)
}

var xxx_messageInfo_UnitsOfTimeCode proto.InternalMessageInfo

func (m *UnitsOfTimeCode) GetValue() UnitsOfTimeCode_Value {
	if m != nil {
		return m.Value
	}
	return UnitsOfTimeCode_INVALID_UNINITIALIZED
}

func (m *UnitsOfTimeCode) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UnitsOfTimeCode) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.fhir.stu3.proto.Date_Precision", Date_Precision_name, Date_Precision_value)
	proto.RegisterEnum("google.fhir.stu3.proto.DateTime_Precision", DateTime_Precision_name, DateTime_Precision_value)
	proto.RegisterEnum("google.fhir.stu3.proto.Instant_Precision", Instant_Precision_name, Instant_Precision_value)
	proto.RegisterEnum("google.fhir.stu3.proto.Time_Precision", Time_Precision_name, Time_Precision_value)
	proto.RegisterEnum("google.fhir.stu3.proto.AddressTypeCode_Value", AddressTypeCode_Value_name, AddressTypeCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.AddressUseCode_Value", AddressUseCode_Value_name, AddressUseCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.ContactPointSystemCode_Value", ContactPointSystemCode_Value_name, ContactPointSystemCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.ContactPointUseCode_Value", ContactPointUseCode_Value_name, ContactPointUseCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.DaysOfWeekCode_Value", DaysOfWeekCode_Value_name, DaysOfWeekCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.EventTimingCode_Value", EventTimingCode_Value_name, EventTimingCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.IdentifierUseCode_Value", IdentifierUseCode_Value_name, IdentifierUseCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.NameUseCode_Value", NameUseCode_Value_name, NameUseCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.QuantityComparatorCode_Value", QuantityComparatorCode_Value_name, QuantityComparatorCode_Value_value)
	proto.RegisterEnum("google.fhir.stu3.proto.UnitsOfTimeCode_Value", UnitsOfTimeCode_Value_name, UnitsOfTimeCode_Value_value)
	proto.RegisterType((*Base64Binary)(nil), "google.fhir.stu3.proto.Base64Binary")
	proto.RegisterType((*Boolean)(nil), "google.fhir.stu3.proto.Boolean")
	proto.RegisterType((*Code)(nil), "google.fhir.stu3.proto.Code")
	proto.RegisterType((*Date)(nil), "google.fhir.stu3.proto.Date")
	proto.RegisterType((*DateTime)(nil), "google.fhir.stu3.proto.DateTime")
	proto.RegisterType((*Decimal)(nil), "google.fhir.stu3.proto.Decimal")
	proto.RegisterType((*Id)(nil), "google.fhir.stu3.proto.Id")
	proto.RegisterType((*Instant)(nil), "google.fhir.stu3.proto.Instant")
	proto.RegisterType((*Integer)(nil), "google.fhir.stu3.proto.Integer")
	proto.RegisterType((*Markdown)(nil), "google.fhir.stu3.proto.Markdown")
	proto.RegisterType((*Oid)(nil), "google.fhir.stu3.proto.Oid")
	proto.RegisterType((*PositiveInt)(nil), "google.fhir.stu3.proto.PositiveInt")
	proto.RegisterType((*String)(nil), "google.fhir.stu3.proto.String")
	proto.RegisterType((*Time)(nil), "google.fhir.stu3.proto.Time")
	proto.RegisterType((*UnsignedInt)(nil), "google.fhir.stu3.proto.UnsignedInt")
	proto.RegisterType((*Uri)(nil), "google.fhir.stu3.proto.Uri")
	proto.RegisterType((*Uuid)(nil), "google.fhir.stu3.proto.Uuid")
	proto.RegisterType((*Xhtml)(nil), "google.fhir.stu3.proto.Xhtml")
	proto.RegisterType((*Address)(nil), "google.fhir.stu3.proto.Address")
	proto.RegisterType((*Age)(nil), "google.fhir.stu3.proto.Age")
	proto.RegisterType((*Annotation)(nil), "google.fhir.stu3.proto.Annotation")
	proto.RegisterType((*Annotation_Author)(nil), "google.fhir.stu3.proto.Annotation.Author")
	proto.RegisterType((*Attachment)(nil), "google.fhir.stu3.proto.Attachment")
	proto.RegisterType((*CodeableConcept)(nil), "google.fhir.stu3.proto.CodeableConcept")
	proto.RegisterType((*Coding)(nil), "google.fhir.stu3.proto.Coding")
	proto.RegisterType((*ContactPoint)(nil), "google.fhir.stu3.proto.ContactPoint")
	proto.RegisterType((*Count)(nil), "google.fhir.stu3.proto.Count")
	proto.RegisterType((*Distance)(nil), "google.fhir.stu3.proto.Distance")
	proto.RegisterType((*Dosage)(nil), "google.fhir.stu3.proto.Dosage")
	proto.RegisterType((*Dosage_AsNeeded)(nil), "google.fhir.stu3.proto.Dosage.AsNeeded")
	proto.RegisterType((*Dosage_Dose)(nil), "google.fhir.stu3.proto.Dosage.Dose")
	proto.RegisterType((*Dosage_Rate)(nil), "google.fhir.stu3.proto.Dosage.Rate")
	proto.RegisterType((*Duration)(nil), "google.fhir.stu3.proto.Duration")
	proto.RegisterType((*HumanName)(nil), "google.fhir.stu3.proto.HumanName")
	proto.RegisterType((*Identifier)(nil), "google.fhir.stu3.proto.Identifier")
	proto.RegisterType((*Meta)(nil), "google.fhir.stu3.proto.Meta")
	proto.RegisterType((*Money)(nil), "google.fhir.stu3.proto.Money")
	proto.RegisterType((*Period)(nil), "google.fhir.stu3.proto.Period")
	proto.RegisterType((*Quantity)(nil), "google.fhir.stu3.proto.Quantity")
	proto.RegisterType((*Range)(nil), "google.fhir.stu3.proto.Range")
	proto.RegisterType((*Ratio)(nil), "google.fhir.stu3.proto.Ratio")
	proto.RegisterType((*SampledData)(nil), "google.fhir.stu3.proto.SampledData")
	proto.RegisterType((*Signature)(nil), "google.fhir.stu3.proto.Signature")
	proto.RegisterType((*Signature_Who)(nil), "google.fhir.stu3.proto.Signature.Who")
	proto.RegisterType((*Signature_OnBehalfOf)(nil), "google.fhir.stu3.proto.Signature.OnBehalfOf")
	proto.RegisterType((*SimpleQuantity)(nil), "google.fhir.stu3.proto.SimpleQuantity")
	proto.RegisterType((*Timing)(nil), "google.fhir.stu3.proto.Timing")
	proto.RegisterType((*Timing_Repeat)(nil), "google.fhir.stu3.proto.Timing.Repeat")
	proto.RegisterType((*Timing_Repeat_Bounds)(nil), "google.fhir.stu3.proto.Timing.Repeat.Bounds")
	proto.RegisterType((*Extension)(nil), "google.fhir.stu3.proto.Extension")
	proto.RegisterType((*Extension_Value)(nil), "google.fhir.stu3.proto.Extension.Value")
	proto.RegisterType((*CodingWithFixedSystem)(nil), "google.fhir.stu3.proto.CodingWithFixedSystem")
	proto.RegisterType((*CodingWithFixedCode)(nil), "google.fhir.stu3.proto.CodingWithFixedCode")
	proto.RegisterType((*Reference)(nil), "google.fhir.stu3.proto.Reference")
	proto.RegisterType((*ReferenceId)(nil), "google.fhir.stu3.proto.ReferenceId")
	proto.RegisterType((*AddressTypeCode)(nil), "google.fhir.stu3.proto.AddressTypeCode")
	proto.RegisterType((*AddressUseCode)(nil), "google.fhir.stu3.proto.AddressUseCode")
	proto.RegisterType((*ContactPointSystemCode)(nil), "google.fhir.stu3.proto.ContactPointSystemCode")
	proto.RegisterType((*ContactPointUseCode)(nil), "google.fhir.stu3.proto.ContactPointUseCode")
	proto.RegisterType((*DaysOfWeekCode)(nil), "google.fhir.stu3.proto.DaysOfWeekCode")
	proto.RegisterType((*EventTimingCode)(nil), "google.fhir.stu3.proto.EventTimingCode")
	proto.RegisterType((*IdentifierUseCode)(nil), "google.fhir.stu3.proto.IdentifierUseCode")
	proto.RegisterType((*AllLanguageCode)(nil), "google.fhir.stu3.proto.AllLanguageCode")
	proto.RegisterType((*LanguageCode)(nil), "google.fhir.stu3.proto.LanguageCode")
	proto.RegisterType((*MimeTypeCode)(nil), "google.fhir.stu3.proto.MimeTypeCode")
	proto.RegisterType((*NameUseCode)(nil), "google.fhir.stu3.proto.NameUseCode")
	proto.RegisterType((*QuantityComparatorCode)(nil), "google.fhir.stu3.proto.QuantityComparatorCode")
	proto.RegisterType((*UnitsOfTimeCode)(nil), "google.fhir.stu3.proto.UnitsOfTimeCode")
}

func init() { proto.RegisterFile("proto/stu3/datatypes.proto", fileDescriptor_7e7c460b0e41d635) }

var fileDescriptor_7e7c460b0e41d635 = []byte{
	// 7278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x6c, 0x24, 0xd9,
	0x59, 0x76, 0xdf, 0xbb, 0x7f, 0xdf, 0x6a, 0x6a, 0x2e, 0xdb, 0xeb, 0x9d, 0xec, 0x6e, 0x7a, 0xb3,
	0xbb, 0xf6, 0xce, 0xb6, 0xc7, 0xf6, 0xcc, 0xce, 0xa5, 0xe7, 0xda, 0x76, 0x7b, 0xa6, 0x7b, 0xc7,
	0xed, 0xf6, 0x96, 0xed, 0x99, 0xcc, 0x7a, 0x26, 0x4d, 0xb9, 0xeb, 0xb8, 0xfb, 0x64, 0xba, 0xab,
	0x7a, 0xab, 0xaa, 0x67, 0xc6, 0x7b, 0x79, 0x8a, 0x10, 0x28, 0x84, 0x08, 0x25, 0x52, 0x12, 0x10,
	0x02, 0x05, 0xf1, 0x42, 0x94, 0x07, 0xb4, 0x28, 0x41, 0x82, 0x3c, 0x44, 0x89, 0x00, 0x05, 0x14,
	0x11, 0x10, 0x01, 0x04, 0x08, 0x14, 0x82, 0x10, 0x52, 0x50, 0x82, 0x40, 0x42, 0x80, 0x80, 0xa0,
	0x73, 0xa9, 0xdb, 0xcc, 0xb8, 0xbb, 0x8e, 0x37, 0x8c, 0x9d, 0x68, 0x1f, 0x56, 0xdb, 0xae, 0x39,
	0xdf, 0x57, 0xe7, 0xfc, 0xff, 0x7f, 0xfe, 0xcb, 0xa9, 0x73, 0xaa, 0x60, 0xa2, 0x6b, 0x1a, 0xb6,
	0x71, 0xdc, 0xb2, 0x7b, 0x27, 0x8e, 0x6b, 0xaa, 0xad, 0xda, 0xdb, 0x5d, 0x64, 0x4d, 0xd3, 0x8b,
	0xf2, 0x91, 0xa6, 0x61, 0x34, 0xdb, 0x68, 0x7a, 0xab, 0x85, 0xcd, 0x69, 0xd2, 0x82, 0x5d, 0x9f,
	0x38, 0xea, 0xc3, 0xa8, 0xba, 0x6e, 0xd8, 0xaa, 0x8d, 0x0d, 0x9d, 0xa3, 0x72, 0x7f, 0x11, 0x81,
	0x91, 0x79, 0xd5, 0x42, 0xa7, 0x4e, 0xce, 0x63, 0x5d, 0x35, 0xb7, 0xe5, 0x43, 0x90, 0xb8, 0xab,
	0xb6, 0x7b, 0x28, 0x1b, 0x79, 0x36, 0x32, 0x39, 0xa2, 0xb0, 0x3f, 0xe4, 0x69, 0x88, 0x62, 0x2d,
	0x1b, 0x7d, 0x36, 0x32, 0x39, 0x3c, 0xf7, 0xf4, 0xf4, 0xa3, 0xef, 0x34, 0xbd, 0x6a, 0x9b, 0x58,
	0x6f, 0x2a, 0x51, 0xac, 0xc9, 0x97, 0x20, 0x83, 0xee, 0xdb, 0x48, 0xb7, 0xb0, 0xa1, 0x67, 0x63,
	0xcf, 0xc6, 0x26, 0x87, 0xe7, 0x3e, 0xb8, 0x13, 0x6c, 0xd1, 0x69, 0xa8, 0x78, 0x98, 0xc2, 0xe5,
	0xaf, 0xfe, 0xea, 0x77, 0xbf, 0x9c, 0x88, 0xbc, 0xfb, 0xbf, 0xff, 0xf0, 0xd9, 0xe4, 0xc9, 0x96,
	0x6d, 0x77, 0x0b, 0xc7, 0x8f, 0xb7, 0xda, 0xa7, 0xa7, 0x0d, 0xb3, 0x79, 0x9c, 0x10, 0x1c, 0x5f,
	0xb5, 0xcd, 0x5e, 0xc3, 0xee, 0x99, 0xa8, 0x84, 0xb6, 0xb0, 0x8e, 0xc9, 0x98, 0x8e, 0x6f, 0xfa,
	0x06, 0x92, 0xfb, 0x66, 0x04, 0x52, 0xf3, 0x86, 0xd1, 0x46, 0xaa, 0x1e, 0x1c, 0x54, 0x7a, 0xcf,
	0x06, 0x75, 0xce, 0x37, 0xa8, 0xe3, 0xa1, 0x07, 0xc5, 0xc6, 0x90, 0xfb, 0x4e, 0x04, 0xe2, 0x0b,
	0x86, 0x86, 0x82, 0x83, 0xc9, 0xec, 0xd9, 0x60, 0x14, 0x36, 0x98, 0x4f, 0xfd, 0xd7, 0xaf, 0x7d,
	0x22, 0x79, 0x68, 0xe3, 0x23, 0xb7, 0xac, 0xdb, 0xc7, 0x26, 0x37, 0x6e, 0x59, 0xb7, 0x2f, 0xb1,
	0xdf, 0x53, 0x2f, 0xd1, 0x61, 0xbe, 0x1c, 0x76, 0x98, 0x0d, 0x43, 0x43, 0xb9, 0x2f, 0xc5, 0x20,
	0x5e, 0x52, 0x6d, 0x24, 0x3f, 0x09, 0x69, 0x3a, 0xac, 0x7a, 0xcf, 0xa2, 0xc3, 0x8c, 0x29, 0x29,
	0xfa, 0xf7, 0xba, 0x25, 0x4f, 0x40, 0xda, 0xc6, 0x1d, 0xf4, 0xa6, 0xa1, 0x23, 0x3a, 0xdc, 0x8c,
	0xe2, 0xfe, 0x2d, 0x97, 0x20, 0xd3, 0x35, 0x51, 0x03, 0xf3, 0x41, 0x45, 0x26, 0xc7, 0xe6, 0x5e,
	0xd8, 0x69, 0x50, 0xe4, 0x3e, 0xd3, 0x2b, 0x4e, 0x6b, 0xc5, 0x03, 0x72, 0x51, 0xc6, 0x77, 0x27,
	0xca, 0x84, 0xb8, 0x28, 0x73, 0x25, 0xc8, 0xb8, 0x1d, 0x91, 0x9f, 0x84, 0xc3, 0x2b, 0xca, 0xe2,
	0x42, 0x65, 0xb5, 0x52, 0x5b, 0xae, 0xaf, 0x2f, 0xaf, 0xae, 0x2c, 0x2e, 0x54, 0xae, 0x54, 0x16,
	0x4b, 0xd2, 0x90, 0x9c, 0x86, 0xf8, 0xcd, 0xc5, 0xa2, 0x22, 0x45, 0xe4, 0x0c, 0x24, 0xaa, 0xb5,
	0xe5, 0xb5, 0xb2, 0x14, 0x95, 0x53, 0x10, 0x2b, 0x15, 0x6f, 0x4a, 0xb1, 0xc2, 0xb6, 0x4f, 0x21,
	0xe7, 0xf2, 0x97, 0x36, 0x66, 0xf2, 0x67, 0x6f, 0xbf, 0x75, 0xf2, 0x9d, 0xc9, 0xfc, 0xe4, 0xcc,
	0xc6, 0x6c, 0xfe, 0xec, 0xed, 0xb7, 0x67, 0x37, 0x66, 0xf2, 0x73, 0xb7, 0xa7, 0xe8, 0x05, 0xf2,
	0x8f, 0x6f, 0x6f, 0xcc, 0xe6, 0xe7, 0x6e, 0xb3, 0x9f, 0x27, 0x36, 0x66, 0xf2, 0xb3, 0xb7, 0xa7,
	0xa6, 0x2e, 0x4d, 0x5d, 0x12, 0xd3, 0x9b, 0xa6, 0xda, 0x28, 0xf7, 0x67, 0x71, 0x48, 0x13, 0x79,
	0xae, 0xe1, 0xce, 0xae, 0x75, 0x57, 0x7e, 0x58, 0x77, 0x2f, 0xf5, 0xd3, 0x1d, 0xb9, 0xd7, 0x3e,
	0xd1, 0x9f, 0xf9, 0xa3, 0xd0, 0x9f, 0x0c, 0x90, 0x5c, 0x5d, 0x5c, 0xa8, 0x2d, 0x97, 0xa4, 0xb8,
	0x3c, 0x0e, 0xc3, 0xd5, 0xca, 0xd2, 0x52, 0x85, 0x5f, 0x48, 0xb0, 0x0b, 0x0b, 0x4a, 0x8d, 0x5f,
	0x48, 0x16, 0xbe, 0x13, 0xf1, 0xa9, 0xfb, 0x57, 0x22, 0xbb, 0xd4, 0xf7, 0xe4, 0xda, 0xe4, 0xc6,
	0xcc, 0x2c, 0xbf, 0x36, 0xb7, 0x31, 0x93, 0x3f, 0x71, 0x7b, 0xaa, 0xb0, 0x31, 0x93, 0x7f, 0x85,
	0x5d, 0xf2, 0xfd, 0x9c, 0xbc, 0x35, 0x4d, 0xff, 0x7f, 0x6c, 0xea, 0xd2, 0xe4, 0xeb, 0x6f, 0x4f,
	0xde, 0x3a, 0xf6, 0x76, 0x7e, 0x6a, 0xd2, 0x21, 0x9e, 0x7d, 0x08, 0xf9, 0xf6, 0xec, 0xc9, 0xc2,
	0xcc, 0xcc, 0x14, 0x35, 0x28, 0x6e, 0x52, 0x33, 0x22, 0x26, 0x45, 0xb4, 0x9b, 0xfb, 0xb7, 0x08,
	0xa4, 0x4a, 0xa8, 0x81, 0x3b, 0x6a, 0x7b, 0xbf, 0x78, 0x3d, 0xd5, 0x27, 0xf5, 0x67, 0xf3, 0x97,
	0x26, 0x37, 0x66, 0x6e, 0xbf, 0x3d, 0x49, 0xc5, 0x4d, 0x87, 0xfd, 0xd2, 0xd4, 0x94, 0x4f, 0x50,
	0x62, 0x8e, 0x5e, 0x63, 0x23, 0xcd, 0xfd, 0x6d, 0x04, 0xa2, 0x15, 0x6d, 0xbf, 0x0c, 0xf8, 0x35,
	0xdf, 0x80, 0x0f, 0x6f, 0x14, 0xf3, 0xaf, 0xab, 0xf9, 0x37, 0x67, 0xf2, 0x67, 0x6f, 0xe5, 0x6f,
	0x4d, 0xdf, 0x7e, 0x6b, 0xf6, 0xe5, 0x53, 0x27, 0xdf, 0xa1, 0xa3, 0x7c, 0x29, 0xec, 0x28, 0xb1,
	0x96, 0xfb, 0xf9, 0x18, 0xa4, 0x2a, 0xba, 0x65, 0xab, 0xba, 0xbd, 0x5b, 0x67, 0x71, 0xf5, 0x61,
	0x67, 0x31, 0xb5, 0xd3, 0xb0, 0xf8, 0xad, 0xf6, 0x89, 0xaf, 0x58, 0x0b, 0xe9, 0x2b, 0x3c, 0x6f,
	0x10, 0x79, 0xd0, 0x1b, 0x44, 0x1f, 0xf4, 0x06, 0xb1, 0xdd, 0x65, 0x16, 0x98, 0x09, 0x26, 0xf7,
	0x4f, 0x11, 0xa2, 0x0f, 0x1b, 0x35, 0x91, 0x19, 0xb4, 0xba, 0x03, 0x7b, 0x66, 0x75, 0xd7, 0xfd,
	0x56, 0xf7, 0xc8, 0x69, 0x26, 0x3a, 0x54, 0x3a, 0xbc, 0xdc, 0x1f, 0x47, 0x20, 0x5d, 0x55, 0xcd,
	0x3b, 0x9a, 0x71, 0x4f, 0xdf, 0x2f, 0x33, 0xec, 0xbc, 0x4f, 0x77, 0xa1, 0x7d, 0x64, 0x87, 0x0f,
	0x22, 0xf7, 0xef, 0x11, 0x88, 0xd5, 0xf0, 0xbe, 0x71, 0x17, 0x2d, 0x9f, 0xe2, 0x8e, 0xf5, 0x4c,
	0xbd, 0x60, 0x60, 0xad, 0x30, 0x39, 0xf3, 0xb6, 0x5f, 0x77, 0x93, 0xb7, 0xa6, 0x1f, 0xb8, 0xc2,
	0x93, 0xc5, 0x63, 0x61, 0x47, 0x6f, 0x60, 0x2d, 0xf7, 0x8f, 0x11, 0x18, 0x5e, 0x31, 0x2c, 0x6c,
	0xe3, 0xbb, 0xa8, 0xa2, 0xdb, 0x41, 0x01, 0x8c, 0xee, 0x99, 0x00, 0x56, 0x7c, 0x02, 0x18, 0xf6,
	0x8d, 0x91, 0x0e, 0xf0, 0x44, 0xd8, 0x01, 0x76, 0xbd, 0x81, 0xe5, 0xfe, 0x28, 0x02, 0x49, 0xd6,
	0xc3, 0xfd, 0xa2, 0xe4, 0x82, 0xcf, 0x62, 0xa7, 0xc3, 0x0e, 0xc9, 0xa2, 0x1d, 0xc8, 0x7d, 0x3e,
	0x06, 0xf1, 0x41, 0x69, 0x62, 0x20, 0x8d, 0x8f, 0xf6, 0x4f, 0xe3, 0x07, 0xa5, 0x81, 0xb1, 0xdd,
	0x89, 0x25, 0xbe, 0x6f, 0x5c, 0xfb, 0x1b, 0x3e, 0x83, 0x3a, 0xb1, 0x8b, 0x6c, 0x4d, 0x2c, 0x9d,
	0x27, 0x11, 0x36, 0xf7, 0xcf, 0x11, 0x18, 0x5e, 0xd7, 0x2d, 0xdc, 0xd4, 0x91, 0xb6, 0x8f, 0xa6,
	0x96, 0x3f, 0x28, 0x1c, 0x78, 0x28, 0x22, 0x88, 0x4d, 0xb0, 0x9e, 0x37, 0xbc, 0xdc, 0xef, 0x45,
	0x20, 0xb6, 0x6e, 0xe2, 0xfd, 0x32, 0xbb, 0x4e, 0xfb, 0x66, 0x57, 0x68, 0x8f, 0xd8, 0x33, 0x71,
	0xee, 0xd3, 0x51, 0x88, 0xaf, 0xf7, 0xf6, 0x4f, 0x2c, 0xf8, 0x98, 0xbf, 0x44, 0x59, 0x24, 0xc1,
	0xa0, 0xd7, 0xc3, 0x1a, 0xb1, 0xd2, 0xb3, 0x6a, 0x7e, 0xeb, 0xf6, 0x5b, 0x67, 0xde, 0xc9, 0xbb,
	0xbf, 0x4f, 0x86, 0xf8, 0x3d, 0x3b, 0xf7, 0x8e, 0x98, 0x31, 0x93, 0xdb, 0xe5, 0x7e, 0x21, 0x02,
	0x89, 0x0f, 0xb7, 0xec, 0x4e, 0x5b, 0x3e, 0x1a, 0x10, 0xcb, 0x7c, 0xf2, 0x5f, 0xbe, 0xf5, 0x33,
	0xdf, 0x8b, 0x47, 0x76, 0x29, 0x9e, 0xc2, 0x59, 0x9f, 0x9a, 0xf2, 0x61, 0x7b, 0x74, 0x9f, 0x74,
	0x24, 0xf7, 0x83, 0x04, 0xa4, 0x8a, 0x9a, 0x66, 0x22, 0xcb, 0xe2, 0xb7, 0x8d, 0xec, 0x4e, 0x2b,
	0x51, 0x71, 0xad, 0xc8, 0x67, 0x20, 0xd6, 0xb3, 0x10, 0xf7, 0x8b, 0x3b, 0xba, 0x55, 0xde, 0xbd,
	0x75, 0x0b, 0x2d, 0x18, 0x1a, 0x52, 0x08, 0x44, 0x3e, 0x07, 0x71, 0x7b, 0xbb, 0x8b, 0x78, 0xb6,
	0xfc, 0xe2, 0x00, 0xe8, 0xda, 0x76, 0x97, 0x61, 0x29, 0x48, 0x9e, 0x83, 0xb8, 0x8d, 0xee, 0xdb,
	0xd9, 0x44, 0xa8, 0x91, 0xd2, 0xb6, 0x04, 0xd3, 0xc6, 0x3a, 0xca, 0x26, 0xe9, 0x30, 0x07, 0x62,
	0x48, 0x5b, 0x82, 0x69, 0x60, 0x7b, 0x3b, 0x9b, 0x0a, 0x77, 0x1f, 0xd2, 0x56, 0x2e, 0x40, 0x5a,
	0xc3, 0x24, 0x3e, 0x35, 0xec, 0x6c, 0x3a, 0x14, 0xce, 0x6d, 0x2f, 0x9f, 0x84, 0x84, 0x65, 0xab,
	0x36, 0xca, 0x66, 0x42, 0x01, 0x59, 0x63, 0xf9, 0x12, 0x0c, 0x77, 0x0d, 0xcb, 0x56, 0xdb, 0xf5,
	0x86, 0xa1, 0xa1, 0x2c, 0x84, 0xc2, 0x02, 0x83, 0xd0, 0x45, 0xc0, 0x33, 0x90, 0x6a, 0x18, 0x3d,
	0xdd, 0x36, 0xb7, 0xb3, 0xc3, 0xa1, 0xc0, 0x4e, 0x73, 0xf9, 0x14, 0x24, 0xbb, 0xc8, 0xc4, 0x86,
	0x96, 0x1d, 0xe9, 0x0f, 0x5c, 0xa1, 0xad, 0x14, 0xde, 0x9a, 0x97, 0x18, 0x51, 0xb1, 0xbc, 0x9b,
	0xdb, 0x42, 0xee, 0x4f, 0x62, 0x10, 0x2b, 0x36, 0xd1, 0xe3, 0xb7, 0xf6, 0x57, 0x9c, 0x39, 0xcf,
	0xec, 0xfd, 0x99, 0x1d, 0x57, 0x94, 0x58, 0xf1, 0xed, 0x38, 0x83, 0x65, 0x80, 0x86, 0xd1, 0xe9,
	0xaa, 0xa6, 0x6a, 0x1b, 0x26, 0x37, 0xf8, 0xe9, 0x9d, 0xb0, 0xaf, 0xf5, 0x54, 0xdd, 0xc6, 0xf6,
	0xf6, 0x82, 0x8b, 0xa0, 0x76, 0xef, 0x63, 0x20, 0x56, 0xd9, 0xd3, 0x71, 0x68, 0xeb, 0x27, 0x6d,
	0xe5, 0x13, 0x90, 0xb4, 0xb6, 0x2d, 0x1b, 0x75, 0xb2, 0x49, 0x8a, 0x7a, 0x6a, 0x27, 0xd4, 0xba,
	0x89, 0x15, 0xde, 0x54, 0x9e, 0x81, 0x38, 0xb5, 0x28, 0x66, 0xfe, 0x47, 0x77, 0x82, 0xb0, 0x89,
	0x49, 0x5a, 0xf2, 0x70, 0x13, 0x15, 0x0b, 0x37, 0xc5, 0x26, 0xca, 0x7d, 0x35, 0x01, 0x50, 0x74,
	0x1f, 0x28, 0x3c, 0x7e, 0xd5, 0x56, 0x20, 0xa9, 0xf6, 0xec, 0x96, 0x61, 0x72, 0xdd, 0xee, 0xb8,
	0x00, 0xe0, 0x75, 0x72, 0xba, 0x48, 0x01, 0xf3, 0xc9, 0xff, 0xf8, 0xce, 0x77, 0xbf, 0x91, 0x88,
	0x28, 0x9c, 0x40, 0x3e, 0x09, 0x71, 0x92, 0xf8, 0x70, 0x45, 0x3f, 0x3b, 0x68, 0xd9, 0x51, 0xa1,
	0xad, 0xe5, 0x82, 0x88, 0x4b, 0x73, 0xc3, 0x0d, 0xc5, 0x4c, 0x7c, 0x3d, 0x0a, 0x49, 0xd6, 0x19,
	0xf9, 0xfb, 0x11, 0xc8, 0x98, 0x68, 0x0b, 0x99, 0x48, 0x6f, 0x20, 0x2e, 0xc0, 0x1d, 0x25, 0xa1,
	0x38, 0x0d, 0xe7, 0xbf, 0x10, 0xf9, 0xd7, 0x1f, 0xfe, 0xf7, 0xd7, 0xc2, 0x3f, 0x1c, 0x59, 0x31,
	0xd5, 0x86, 0x4d, 0x7f, 0x22, 0x93, 0x22, 0x43, 0x4f, 0xe2, 0x15, 0xd5, 0xc6, 0x48, 0xb7, 0x29,
	0xe8, 0x95, 0xb0, 0x20, 0x05, 0xb5, 0x55, 0x1b, 0x69, 0x2b, 0xc8, 0xb4, 0x0c, 0xbd, 0x3c, 0xa4,
	0x78, 0x43, 0x94, 0x2f, 0xc2, 0x08, 0x2b, 0x06, 0xea, 0x6c, 0x6a, 0x86, 0x8a, 0xb9, 0xe5, 0x21,
	0x25, 0xc9, 0x50, 0xf3, 0x69, 0x47, 0xf1, 0x85, 0x8b, 0x3e, 0xdb, 0x9d, 0x0b, 0x6d, 0xbb, 0xae,
	0x39, 0xe4, 0x3e, 0x47, 0x4c, 0xd8, 0xb6, 0xd5, 0x46, 0xab, 0x83, 0x74, 0xfb, 0xf1, 0x9b, 0xf0,
	0x55, 0x18, 0x69, 0x18, 0xba, 0x8d, 0x74, 0xbb, 0x4e, 0x23, 0x2b, 0x33, 0xe4, 0x0f, 0xed, 0xc4,
	0x51, 0xc5, 0x1d, 0xe4, 0x86, 0xd5, 0x61, 0x8e, 0x24, 0x17, 0xe4, 0xcb, 0x90, 0x6e, 0xab, 0x7a,
	0xb3, 0xa7, 0x36, 0x1d, 0x23, 0xde, 0x91, 0x64, 0x89, 0xb7, 0xa3, 0x24, 0x2e, 0x4a, 0x3e, 0x03,
	0x71, 0x4d, 0xb5, 0x55, 0x6e, 0xcc, 0x3b, 0xa2, 0xfd, 0xcf, 0x0a, 0x15, 0x8a, 0x90, 0xf3, 0x10,
	0xeb, 0x99, 0xed, 0x30, 0x4e, 0x8a, 0xb4, 0x93, 0x4f, 0x43, 0xdc, 0xc2, 0x6f, 0x3a, 0x1e, 0xea,
	0xb9, 0x1d, 0xdb, 0x7b, 0x09, 0xba, 0x42, 0x01, 0xa4, 0x87, 0x2d, 0xd5, 0x6a, 0xf1, 0x08, 0x1d,
	0xb2, 0x87, 0x04, 0x41, 0x62, 0xb4, 0x8d, 0xed, 0x76, 0xe8, 0x18, 0x4d, 0x1b, 0xcb, 0xe7, 0x21,
	0xdd, 0x30, 0x11, 0x35, 0x14, 0x1e, 0xa0, 0x07, 0x3b, 0x06, 0x17, 0xb1, 0x4b, 0xd3, 0x74, 0x6d,
	0x31, 0xf7, 0x5b, 0x51, 0x18, 0x27, 0x2a, 0x52, 0x37, 0xdb, 0x68, 0xc1, 0xd0, 0x1b, 0xa8, 0xbb,
	0x07, 0xf6, 0x79, 0x0a, 0x92, 0x0d, 0x43, 0xc3, 0x7a, 0x93, 0xe7, 0xff, 0x4f, 0xf7, 0x89, 0x27,
	0xe4, 0xa6, 0xbc, 0xb5, 0x9b, 0xec, 0xc5, 0xc3, 0x27, 0x7b, 0x85, 0x05, 0x9f, 0xc0, 0x4e, 0x87,
	0x15, 0xd8, 0x03, 0x12, 0xca, 0xfd, 0x79, 0x0c, 0x92, 0xac, 0x2f, 0x8f, 0x5f, 0x58, 0x5e, 0xbc,
	0x8e, 0x85, 0x8f, 0xd7, 0x67, 0x20, 0x75, 0x17, 0x99, 0x7c, 0xc9, 0x21, 0x54, 0x1e, 0xc7, 0x9b,
	0xbb, 0x91, 0x3e, 0x11, 0x36, 0xd2, 0x93, 0x7b, 0x69, 0xd8, 0xea, 0xb6, 0xd5, 0x6d, 0x3e, 0x59,
	0x07, 0xde, 0x8b, 0x37, 0x97, 0x4b, 0x30, 0xda, 0xb3, 0x90, 0x59, 0xb7, 0x50, 0x1b, 0x35, 0x6c,
	0xa4, 0xf1, 0xc9, 0xbb, 0x63, 0x36, 0xc5, 0x9f, 0xbb, 0x2b, 0x23, 0x04, 0xb5, 0xca, 0x41, 0x7c,
	0xd9, 0x28, 0x2a, 0xb6, 0x6c, 0xc4, 0xb4, 0x99, 0xfb, 0x41, 0x0c, 0x46, 0x16, 0x0c, 0xdd, 0x56,
	0x1b, 0xf6, 0x8a, 0x81, 0xf7, 0xc2, 0x57, 0x5f, 0x79, 0x40, 0xbd, 0xd3, 0x3b, 0x4b, 0xdc, 0xeb,
	0xe6, 0x2a, 0x45, 0x50, 0x1d, 0x38, 0x1a, 0x3f, 0xe9, 0x64, 0xa4, 0xe1, 0xf4, 0xcd, 0x13, 0xd2,
	0x0b, 0xac, 0x6a, 0x63, 0xca, 0x3e, 0x16, 0xe6, 0xd6, 0x81, 0xd2, 0xed, 0x34, 0xc4, 0x4d, 0x55,
	0xbf, 0xc3, 0xf5, 0xbe, 0xa3, 0xd3, 0xf5, 0xad, 0xa7, 0x2a, 0x14, 0xe0, 0xab, 0x16, 0x52, 0x42,
	0xd5, 0xc2, 0x65, 0x9f, 0xae, 0x4f, 0x86, 0xd7, 0xb5, 0xd7, 0xfd, 0xdc, 0xb7, 0x63, 0x90, 0x58,
	0x20, 0x35, 0xcb, 0xfb, 0x45, 0xc3, 0xfe, 0x2b, 0x1a, 0xce, 0xfa, 0xd4, 0x9b, 0x0f, 0xaf, 0xde,
	0x9e, 0x6e, 0xe7, 0xfe, 0x3a, 0x06, 0xe9, 0x12, 0xb6, 0x6c, 0x95, 0xa4, 0x82, 0xef, 0xab, 0x76,
	0xdf, 0xa9, 0xf6, 0xbc, 0x4f, 0xb5, 0xa1, 0x1f, 0x47, 0x39, 0x0a, 0xcd, 0x7d, 0x71, 0x14, 0x92,
	0x25, 0xc3, 0x52, 0xf7, 0xa2, 0xd6, 0x3f, 0x07, 0x69, 0x0b, 0xbd, 0xd1, 0xa3, 0x65, 0xd4, 0x00,
	0xf5, 0xf2, 0xc7, 0x9d, 0x8a, 0x0b, 0xd8, 0x4d, 0xca, 0x22, 0x7f, 0x04, 0x8e, 0xa8, 0x9a, 0x46,
	0x25, 0xa0, 0xb6, 0xeb, 0x58, 0xb7, 0xa8, 0x64, 0xbc, 0x27, 0xc3, 0x2f, 0xf6, 0x13, 0xb7, 0x2f,
	0x6d, 0x51, 0x0e, 0x7b, 0x34, 0x15, 0x8f, 0x45, 0xae, 0xc1, 0xc1, 0x2e, 0xab, 0xbd, 0x02, 0xe4,
	0xe1, 0x82, 0xb7, 0xcc, 0xa1, 0x7e, 0xc2, 0x53, 0x90, 0xb4, 0x71, 0x87, 0xe4, 0x73, 0x03, 0xbc,
	0xf9, 0x1a, 0x6d, 0xa5, 0xf0, 0xd6, 0xf2, 0x12, 0x64, 0x54, 0xab, 0xae, 0x23, 0xa4, 0x21, 0x8d,
	0xe7, 0xdf, 0x3b, 0x8e, 0x8d, 0x69, 0x7f, 0xba, 0x68, 0x2d, 0xd3, 0xe6, 0x6e, 0xad, 0x9d, 0x56,
	0xf9, 0x15, 0xf9, 0x1c, 0xa9, 0x00, 0xdc, 0x15, 0xb3, 0xd0, 0x42, 0xa2, 0x20, 0xf9, 0x02, 0x24,
	0x4c, 0xa3, 0x67, 0x3b, 0x6b, 0x66, 0xa1, 0xd1, 0x0c, 0x25, 0x5f, 0x82, 0x64, 0x07, 0xd9, 0x2d,
	0x43, 0xe3, 0xcb, 0x66, 0xa1, 0xf1, 0x1c, 0x26, 0x5f, 0x82, 0xb8, 0x66, 0x58, 0x88, 0x2f, 0x9e,
	0x3d, 0x37, 0x40, 0x0a, 0x25, 0xc3, 0x42, 0xae, 0x04, 0x28, 0x50, 0x5e, 0x82, 0x83, 0x1d, 0xf5,
	0x7e, 0x9d, 0xfc, 0xae, 0x77, 0x91, 0x59, 0xe7, 0xe1, 0x75, 0x94, 0xf2, 0x7d, 0x60, 0xc7, 0xba,
	0x9f, 0x54, 0x15, 0x8a, 0xd4, 0x51, 0xef, 0x13, 0xca, 0x15, 0x64, 0xb2, 0x78, 0x2b, 0x23, 0x78,
	0x2a, 0xc0, 0xa6, 0x6a, 0x1d, 0xac, 0x63, 0xcb, 0x36, 0x59, 0xdd, 0x32, 0xd6, 0x7f, 0x95, 0x77,
	0x15, 0x77, 0xba, 0x6d, 0xe4, 0xf8, 0x2b, 0x25, 0xeb, 0xd1, 0x17, 0x03, 0x3c, 0xf2, 0x4d, 0x38,
	0x1c, 0xb8, 0x4d, 0x1b, 0x6f, 0x21, 0xba, 0x62, 0x32, 0x2e, 0x74, 0x03, 0xd9, 0xbb, 0xc1, 0x12,
	0x67, 0x20, 0x02, 0x35, 0x55, 0x1b, 0x65, 0xa5, 0x50, 0x02, 0x55, 0x54, 0xdb, 0x27, 0x50, 0x02,
	0x9c, 0xf8, 0x42, 0x04, 0xd2, 0x45, 0xcf, 0xb6, 0x52, 0x7c, 0xc3, 0x24, 0xf7, 0x3c, 0x83, 0x72,
	0xd4, 0xf2, 0x90, 0xe2, 0x20, 0xe4, 0x35, 0x90, 0x1a, 0x5c, 0xed, 0xf5, 0x06, 0xd3, 0x3b, 0x5f,
	0x9c, 0x08, 0x6b, 0x26, 0xe5, 0x21, 0x65, 0xbc, 0x11, 0xbc, 0x34, 0x3f, 0xec, 0x9b, 0x3c, 0x13,
	0x3f, 0x17, 0x81, 0x38, 0x91, 0x00, 0x09, 0x44, 0xa6, 0xaa, 0x37, 0x9d, 0x05, 0x9f, 0x3e, 0x8a,
	0xd7, 0x9b, 0xa8, 0x3c, 0xa4, 0xb0, 0xd6, 0x72, 0x09, 0xd2, 0x6f, 0x70, 0x69, 0xf2, 0xae, 0x85,
	0x94, 0x7d, 0x79, 0x48, 0x71, 0x91, 0xf3, 0x49, 0x66, 0xc4, 0x13, 0x5f, 0x8b, 0x40, 0x9c, 0x48,
	0x94, 0xf5, 0xc6, 0xc6, 0xc6, 0xe0, 0xde, 0xd8, 0xd8, 0x60, 0xbd, 0xb1, 0xb1, 0xe1, 0x0d, 0x22,
	0xba, 0xeb, 0x41, 0xc4, 0xde, 0xcb, 0x20, 0x88, 0xfe, 0x77, 0x57, 0x56, 0x30, 0x73, 0x62, 0xc9,
	0x48, 0xcf, 0xdc, 0xa3, 0x15, 0xcc, 0xf7, 0x93, 0x91, 0xff, 0x9f, 0x64, 0x84, 0x2b, 0x34, 0xf7,
	0x95, 0x38, 0x64, 0xca, 0xbd, 0x8e, 0xaa, 0x2f, 0xab, 0x9d, 0x3d, 0xc9, 0x35, 0x7d, 0x4f, 0xda,
	0x76, 0x74, 0x6c, 0xa4, 0x6f, 0x81, 0x5a, 0x6d, 0x37, 0x99, 0xc8, 0x29, 0x48, 0x6e, 0xa9, 0x1d,
	0xdc, 0xde, 0x0e, 0xa9, 0x44, 0xde, 0x9a, 0x14, 0xa3, 0x4d, 0x7c, 0x17, 0xe9, 0x21, 0x1f, 0xb1,
	0xb1, 0xc6, 0xb4, 0x28, 0x34, 0xd1, 0x16, 0xbe, 0x9f, 0x4d, 0x85, 0x82, 0xf1, 0xd6, 0x04, 0x67,
	0xf5, 0xb6, 0x08, 0x2e, 0x1d, 0x0e, 0xc7, 0x5a, 0xfb, 0x8a, 0xd0, 0x8c, 0x50, 0x11, 0x7a, 0xc1,
	0x67, 0x3d, 0xb3, 0x61, 0xad, 0xc7, 0x35, 0x98, 0xdc, 0xb7, 0xe3, 0x00, 0x15, 0x0d, 0xe9, 0x36,
	0xde, 0xc2, 0xc8, 0xdc, 0x8b, 0x7c, 0xd6, 0x67, 0x3f, 0x3b, 0x6f, 0x6f, 0x74, 0x7b, 0xb8, 0x9b,
	0x87, 0xb5, 0x0f, 0x25, 0x59, 0xf4, 0x61, 0xad, 0x37, 0xbb, 0x13, 0xe1, 0x67, 0xb7, 0xbb, 0xb0,
	0x91, 0x14, 0x59, 0xd8, 0xd8, 0xe5, 0x02, 0x83, 0xbc, 0x0d, 0x69, 0xd5, 0xa2, 0x4b, 0xc4, 0x26,
	0xcf, 0x48, 0x43, 0x3c, 0x33, 0x29, 0x88, 0x3d, 0x32, 0xa9, 0x99, 0x4d, 0x55, 0xc7, 0x6f, 0x52,
	0x67, 0xa2, 0xb8, 0xb7, 0xdb, 0xdd, 0xd2, 0xae, 0xa7, 0xa6, 0xdc, 0xb7, 0x63, 0x10, 0xaf, 0x22,
	0x5b, 0x7d, 0xfc, 0x16, 0x75, 0x16, 0x80, 0x2f, 0x1f, 0xd6, 0xdd, 0xad, 0x51, 0x13, 0x3b, 0x1b,
	0x96, 0x92, 0xe1, 0xad, 0x2b, 0x9a, 0x3c, 0x0f, 0x23, 0x6d, 0xd5, 0xb2, 0xeb, 0xbd, 0xae, 0xa6,
	0xda, 0xc8, 0xd9, 0x32, 0xfb, 0xcc, 0x80, 0x4d, 0xb7, 0xca, 0x30, 0x01, 0xad, 0x33, 0x8c, 0xfc,
	0x0a, 0xa4, 0xba, 0xa6, 0xb1, 0x85, 0xdb, 0x88, 0x17, 0x48, 0x7d, 0xed, 0xca, 0x69, 0x2b, 0x17,
	0x48, 0x5d, 0xd7, 0xe8, 0x99, 0x24, 0x5d, 0x48, 0x86, 0x5a, 0x87, 0x76, 0xdb, 0xcb, 0x33, 0x10,
	0xb3, 0xd5, 0xe6, 0x20, 0x3f, 0xc5, 0x61, 0xa4, 0x69, 0xe1, 0x8c, 0x4f, 0xbb, 0xa1, 0x77, 0x9a,
	0x10, 0x75, 0xd2, 0x15, 0xab, 0xaa, 0xa1, 0xa3, 0xed, 0xf7, 0x33, 0x89, 0x9f, 0x90, 0x15, 0x2b,
	0xaa, 0xcd, 0xdc, 0xe7, 0xa3, 0x90, 0xe4, 0xe5, 0xd6, 0x1e, 0x3c, 0x81, 0x49, 0x58, 0xb6, 0x6a,
	0xda, 0x5c, 0xb1, 0x83, 0x9f, 0x40, 0xb1, 0xe6, 0xf2, 0x1c, 0xc4, 0x90, 0xae, 0x85, 0x7e, 0xa0,
	0x4d, 0x1a, 0xef, 0x2e, 0x91, 0x66, 0x82, 0xa1, 0x89, 0xb4, 0x63, 0x20, 0xef, 0x9b, 0xff, 0x4f,
	0x48, 0x22, 0xed, 0x0c, 0x39, 0xf7, 0x1b, 0x51, 0x48, 0xd0, 0x1a, 0x6e, 0x4f, 0xb6, 0xab, 0xb5,
	0x8d, 0x7b, 0x62, 0x65, 0xa2, 0x42, 0x20, 0x72, 0x01, 0xe2, 0x2d, 0xdc, 0x6c, 0x71, 0xbd, 0x86,
	0x85, 0x52, 0xcc, 0xee, 0xbc, 0x05, 0x95, 0x50, 0xee, 0xb7, 0xa9, 0xac, 0x48, 0x75, 0xfc, 0xd8,
	0x65, 0x75, 0x11, 0x32, 0x7a, 0xaf, 0x83, 0x98, 0x39, 0x0f, 0x70, 0x18, 0xee, 0x80, 0x3d, 0x88,
	0x3c, 0x0f, 0xc3, 0x1a, 0xd2, 0x8d, 0x0e, 0xd6, 0x7d, 0x13, 0x62, 0x30, 0x83, 0x1f, 0xb4, 0x5b,
	0xc9, 0xd9, 0xd8, 0xc8, 0x7d, 0x32, 0x01, 0xc3, 0xab, 0x2a, 0xd1, 0x86, 0x56, 0x52, 0xf7, 0x22,
	0x3d, 0xba, 0x02, 0x49, 0xc3, 0xc4, 0x4d, 0xac, 0x8b, 0x99, 0x9b, 0xbb, 0xb5, 0x87, 0xa3, 0xe5,
	0x4b, 0x6e, 0x4e, 0x1b, 0x0f, 0xe5, 0x8f, 0x3c, 0x02, 0x9e, 0xdc, 0x9e, 0x26, 0xe5, 0x5c, 0x83,
	0xe8, 0x20, 0x11, 0xce, 0xa1, 0xf1, 0xe6, 0xf2, 0x65, 0x18, 0x6e, 0x1b, 0xf7, 0xe8, 0x02, 0x5d,
	0x07, 0xdb, 0xdc, 0xa5, 0x0c, 0x44, 0x03, 0xc5, 0x2c, 0x11, 0x08, 0x61, 0xe8, 0x75, 0xbb, 0x2e,
	0x43, 0x2a, 0x24, 0x03, 0xc5, 0x30, 0x86, 0x6b, 0x00, 0x1a, 0xee, 0x30, 0x91, 0x5a, 0x3c, 0x37,
	0x0f, 0xf3, 0xc4, 0xd1, 0x95, 0x82, 0x0f, 0x4e, 0x26, 0x31, 0xdd, 0x96, 0x92, 0x11, 0xdb, 0x63,
	0x45, 0x30, 0x85, 0x4b, 0x3e, 0x53, 0x0c, 0xbd, 0x31, 0xdc, 0x67, 0x80, 0xb9, 0x5f, 0x1f, 0x86,
	0xcc, 0x2a, 0x6e, 0xea, 0x2a, 0x69, 0xf3, 0xf8, 0xcd, 0xb1, 0xc0, 0x4b, 0xb8, 0x50, 0x7b, 0x2f,
	0x7c, 0xfb, 0xcb, 0x48, 0x05, 0x77, 0x0e, 0xe2, 0xf7, 0x5a, 0x48, 0x0f, 0x99, 0xa6, 0x7b, 0x60,
	0x02, 0x92, 0x17, 0x21, 0x76, 0xaf, 0x65, 0x70, 0xdb, 0x7b, 0x7e, 0xe7, 0x49, 0xc0, 0x25, 0x33,
	0x7d, 0xa3, 0x65, 0xcc, 0x8f, 0x30, 0x06, 0xbe, 0x32, 0x4b, 0xf0, 0xf2, 0x75, 0x18, 0x31, 0xf4,
	0xfa, 0x26, 0x6a, 0xa9, 0xed, 0xad, 0xba, 0xb1, 0xc5, 0xad, 0xf1, 0xe5, 0xc1, 0x7c, 0x35, 0x7d,
	0x9e, 0x82, 0x6a, 0x5b, 0xee, 0x52, 0x2f, 0x18, 0xee, 0xb5, 0x87, 0x76, 0x4d, 0xa5, 0x76, 0xbb,
	0x6b, 0xea, 0x0c, 0xc4, 0x37, 0xdb, 0xc6, 0xa6, 0xd8, 0x8e, 0x22, 0x82, 0x98, 0xf8, 0xe5, 0x18,
	0xc4, 0x6e, 0xb4, 0x0c, 0xf9, 0x38, 0xc4, 0x7a, 0x26, 0xe6, 0x46, 0xd1, 0x2f, 0x74, 0x97, 0x87,
	0x14, 0xd2, 0x52, 0xfe, 0x9b, 0xa8, 0x7f, 0xb3, 0x5f, 0x34, 0x6c, 0xe1, 0xfa, 0xb9, 0xe8, 0x7b,
	0xdc, 0xec, 0xb7, 0xbb, 0x7d, 0x7b, 0xbb, 0xdf, 0x27, 0x18, 0x7e, 0x21, 0x16, 0xdd, 0xc5, 0x0d,
	0xb4, 0xfb, 0xba, 0x3c, 0xb0, 0xb5, 0x70, 0x3e, 0x41, 0x2d, 0x77, 0xe2, 0x8b, 0x31, 0x00, 0xcf,
	0x88, 0xde, 0xd7, 0xd2, 0x3e, 0xd3, 0xd2, 0x58, 0xd0, 0x31, 0xec, 0x6e, 0x9d, 0xce, 0x75, 0x17,
	0xb9, 0x6f, 0xc6, 0x60, 0x2c, 0x18, 0x91, 0x7f, 0x6c, 0x2a, 0x90, 0x7d, 0x5c, 0x31, 0xdc, 0x67,
	0x4a, 0xf9, 0xa5, 0x2f, 0x7d, 0xf2, 0xd3, 0xe2, 0x15, 0x03, 0x55, 0xe5, 0xa9, 0xf0, 0xaa, 0xf4,
	0x2b, 0x2f, 0xf7, 0xd3, 0xa3, 0x90, 0x64, 0x0f, 0xa0, 0xf7, 0xa4, 0xde, 0x46, 0x77, 0x91, 0x6e,
	0xf3, 0xa0, 0x1b, 0xa2, 0xde, 0xa6, 0xcd, 0xe5, 0x0b, 0x90, 0x34, 0x51, 0x17, 0xa9, 0xce, 0xb2,
	0xfd, 0xf3, 0xfd, 0x9f, 0xac, 0x4f, 0x2b, 0xb4, 0xb1, 0xc2, 0x41, 0x24, 0x5c, 0xfb, 0x36, 0xf3,
	0x85, 0x5f, 0xad, 0x25, 0xa0, 0x89, 0x5f, 0x04, 0x48, 0x32, 0xbe, 0xc7, 0x2f, 0xaf, 0x25, 0x48,
	0x6e, 0x1a, 0x3d, 0x5d, 0xb3, 0xb8, 0xe1, 0xbf, 0x1c, 0x6a, 0xdc, 0xd3, 0xf3, 0x14, 0xe3, 0xed,
	0xc3, 0x67, 0x1c, 0x64, 0x16, 0xd1, 0x63, 0x2a, 0x83, 0xd3, 0x16, 0xb6, 0x7d, 0x83, 0xb5, 0x96,
	0xcf, 0x43, 0x86, 0xfe, 0xa8, 0x77, 0xd4, 0xfb, 0x83, 0x32, 0x66, 0x77, 0xe7, 0x07, 0x45, 0x54,
	0xd5, 0xfb, 0xf2, 0x39, 0x48, 0x6b, 0xfc, 0x89, 0x51, 0xd8, 0x84, 0xd9, 0x05, 0xc8, 0xf3, 0x30,
	0xe2, 0xfc, 0xa6, 0x77, 0x0f, 0x99, 0x2f, 0x0f, 0x3b, 0x20, 0xd2, 0x81, 0x25, 0x18, 0x75, 0x39,
	0xa8, 0x37, 0x18, 0xb0, 0xc3, 0x62, 0x5d, 0xc7, 0xb6, 0x55, 0xdb, 0x22, 0xe6, 0x47, 0xe7, 0xab,
	0xdb, 0x03, 0xf2, 0x0f, 0xf2, 0x05, 0xc8, 0x6c, 0x99, 0x6c, 0x57, 0xcb, 0x36, 0x4f, 0x9b, 0x07,
	0x0a, 0xc3, 0x43, 0xc8, 0x25, 0x18, 0x75, 0xff, 0xa0, 0x23, 0x82, 0x70, 0x14, 0x23, 0x2e, 0x8a,
	0x0c, 0xe9, 0xb4, 0x5b, 0x01, 0x0d, 0x87, 0x2c, 0x60, 0x78, 0xe5, 0x73, 0x11, 0x80, 0xfd, 0xa2,
	0xf7, 0x1e, 0x09, 0x07, 0xce, 0x30, 0x08, 0xb9, 0x71, 0x19, 0x86, 0x39, 0x9e, 0x4a, 0x72, 0x54,
	0x4c, 0x92, 0xfc, 0xde, 0x54, 0x8e, 0x57, 0x60, 0x58, 0x53, 0xb7, 0xeb, 0xc6, 0x56, 0xfd, 0x1e,
	0x42, 0x77, 0xb2, 0x63, 0x74, 0x72, 0xf4, 0x79, 0x9b, 0xd0, 0xb6, 0x55, 0xdb, 0xba, 0x81, 0xd0,
	0x1d, 0x4a, 0x94, 0xd1, 0xd4, 0x6d, 0xf6, 0xa7, 0x7c, 0x1e, 0x86, 0x6d, 0xdc, 0x41, 0x84, 0x48,
	0x53, 0xb7, 0xb3, 0xe3, 0x94, 0xe7, 0x68, 0xbf, 0xe3, 0xcc, 0x4a, 0x86, 0x00, 0x6a, 0x5b, 0x25,
	0x75, 0xdb, 0xcd, 0xe3, 0xa5, 0xfe, 0x1b, 0x8a, 0x16, 0x89, 0x13, 0x62, 0x53, 0x8c, 0xb9, 0x70,
	0x9a, 0xc7, 0x9f, 0x83, 0xa4, 0xb1, 0xb5, 0x65, 0x21, 0x3b, 0x7b, 0x20, 0xfc, 0x66, 0x7b, 0x0e,
	0x99, 0xf8, 0x7a, 0x04, 0x92, 0x6c, 0x9a, 0xca, 0x17, 0x7d, 0x33, 0x24, 0x32, 0x60, 0x45, 0x91,
	0xb7, 0x2b, 0x0f, 0xf9, 0x26, 0xc9, 0x2e, 0xb7, 0x09, 0x9c, 0x71, 0x8d, 0x28, 0x16, 0xe6, 0xd1,
	0x50, 0x79, 0xc8, 0xb1, 0xa2, 0xf9, 0xb4, 0xe3, 0x95, 0x76, 0xb7, 0xa6, 0xc9, 0x04, 0x99, 0xfb,
	0xd8, 0x61, 0xc8, 0xb8, 0x4e, 0x4f, 0xd8, 0xb5, 0xbe, 0xc2, 0x8e, 0x45, 0x44, 0x07, 0xc6, 0x68,
	0xb7, 0xf8, 0xa2, 0xc7, 0x23, 0x16, 0x83, 0x89, 0xc4, 0x8b, 0x03, 0xbd, 0xf1, 0xf4, 0x75, 0xd2,
	0xdc, 0x75, 0xa5, 0x3c, 0xb1, 0x78, 0xaf, 0x87, 0xd9, 0x27, 0xfe, 0x40, 0x86, 0x04, 0x65, 0x96,
	0xaf, 0xc1, 0x28, 0x7b, 0xb1, 0x5a, 0x7d, 0x93, 0x96, 0x40, 0x5c, 0x06, 0xa1, 0xca, 0xa5, 0xf2,
	0x90, 0x32, 0xe2, 0x7f, 0x2b, 0x9b, 0x7f, 0x7f, 0x4e, 0x54, 0x78, 0x7f, 0xce, 0x1c, 0x8f, 0x92,
	0xb1, 0xc1, 0x49, 0x4c, 0x79, 0x88, 0x6f, 0x7a, 0x9f, 0xa3, 0x0b, 0x08, 0xce, 0x73, 0xd0, 0xa3,
	0xfd, 0xe2, 0x39, 0xc1, 0x68, 0xec, 0x74, 0x66, 0x86, 0xfc, 0xbf, 0x4e, 0x77, 0x38, 0x25, 0xc2,
	0x2d, 0xa1, 0x53, 0x83, 0x77, 0x5e, 0x81, 0x75, 0x0e, 0x52, 0xfc, 0x6d, 0x3e, 0x21, 0x23, 0x0a,
	0x19, 0x25, 0x47, 0xc8, 0x2f, 0x53, 0x43, 0x4b, 0x0d, 0x7a, 0x38, 0x57, 0x1e, 0xa2, 0x66, 0x76,
	0x0e, 0x52, 0xfc, 0x3d, 0x2e, 0x3c, 0x6c, 0x0c, 0xaa, 0xf5, 0xc9, 0xad, 0x38, 0x82, 0x81, 0xa9,
	0xff, 0x0e, 0x19, 0x29, 0x18, 0x98, 0xbd, 0x2a, 0xe6, 0x22, 0xa4, 0x9d, 0xb7, 0x90, 0x0c, 0x3a,
	0x1f, 0xe3, 0xbc, 0x72, 0x85, 0x08, 0xc9, 0xc1, 0x90, 0xaa, 0xcc, 0xc0, 0x4e, 0x80, 0xd8, 0x71,
	0x82, 0xd4, 0x30, 0x19, 0x29, 0x69, 0x29, 0x97, 0x61, 0xc4, 0x79, 0x2f, 0x46, 0x1d, 0xeb, 0xf6,
	0xa0, 0x2d, 0x78, 0xbe, 0xa5, 0xa5, 0xf2, 0x90, 0x32, 0xec, 0x7b, 0xa5, 0xc6, 0x43, 0x27, 0xd0,
	0x46, 0xc5, 0x4e, 0xa0, 0xd1, 0x2d, 0x1a, 0xc4, 0x36, 0xc6, 0xfa, 0x1b, 0x15, 0xb7, 0x0b, 0x76,
	0x5a, 0xb0, 0x0c, 0x23, 0xce, 0x4b, 0x07, 0x68, 0xef, 0xc7, 0x43, 0xbb, 0x64, 0xd2, 0x7b, 0xdf,
	0xfb, 0x0a, 0x9c, 0x72, 0x56, 0x0a, 0x5d, 0xce, 0x9e, 0x83, 0x94, 0xca, 0x0e, 0xe2, 0xf2, 0x40,
	0xf0, 0xcc, 0x80, 0xb3, 0xdb, 0x44, 0xcd, 0x1c, 0x41, 0xee, 0xa6, 0x36, 0x51, 0x56, 0xee, 0x7f,
	0xb7, 0x22, 0x75, 0xdc, 0xa4, 0xa5, 0x5c, 0x02, 0xf0, 0xde, 0x33, 0x99, 0x3d, 0x48, 0x71, 0xb9,
	0xc1, 0x67, 0x33, 0xcb, 0x43, 0x8a, 0x0f, 0x47, 0x59, 0xdc, 0xd3, 0x50, 0xd9, 0x43, 0x03, 0x58,
	0xdc, 0x96, 0x94, 0xc5, 0x3b, 0xd1, 0xf7, 0xa8, 0x1d, 0x7d, 0x87, 0xdf, 0xeb, 0x8e, 0x3e, 0x12,
	0x98, 0xf8, 0xb1, 0xa8, 0x23, 0xfd, 0x0d, 0x87, 0x2d, 0xcd, 0x11, 0xc3, 0xe1, 0x07, 0xa3, 0xae,
	0xc1, 0x68, 0x83, 0x1d, 0x72, 0xa8, 0x77, 0x0d, 0x62, 0x05, 0x4f, 0xf4, 0xf7, 0xa5, 0xfe, 0x13,
	0x11, 0xc4, 0x97, 0x36, 0xfc, 0x47, 0x60, 0xdc, 0x6c, 0x39, 0xdb, 0x3f, 0xac, 0xd2, 0x7d, 0xf7,
	0x24, 0xac, 0xb2, 0x6c, 0xf9, 0x22, 0x3b, 0xed, 0xae, 0xea, 0x0d, 0x94, 0x7d, 0x72, 0x80, 0x73,
	0xe3, 0xed, 0xa8, 0x73, 0x73, 0xf6, 0xec, 0xfb, 0xb3, 0x81, 0x89, 0x5d, 0x64, 0x03, 0xf3, 0x00,
	0xad, 0x5e, 0x47, 0xd5, 0xeb, 0xba, 0xda, 0x41, 0xd9, 0xa7, 0xfa, 0x2f, 0xae, 0xb8, 0xbb, 0x71,
	0xca, 0x43, 0x4a, 0xa6, 0xe5, 0xee, 0xe5, 0x2a, 0x01, 0x60, 0x77, 0x43, 0x45, 0xf6, 0x68, 0x7f,
	0xeb, 0xf0, 0xb6, 0x5e, 0x10, 0xeb, 0xf0, 0x70, 0x44, 0x80, 0x1d, 0x43, 0x47, 0xdb, 0xd9, 0x0f,
	0xf4, 0x17, 0x20, 0x7d, 0x0c, 0x4c, 0x04, 0x48, 0x5b, 0xfb, 0xf2, 0x92, 0xa7, 0xc5, 0xf2, 0x12,
	0x22, 0x3a, 0x77, 0xe3, 0xe3, 0x33, 0xe1, 0x9e, 0xae, 0xf8, 0xb7, 0x3c, 0x7a, 0x89, 0xd4, 0xb3,
	0x42, 0x89, 0x94, 0xbb, 0xbb, 0xf3, 0x83, 0x42, 0xbb, 0x3b, 0x8b, 0xfe, 0x45, 0xb0, 0x5c, 0xc8,
	0x45, 0xb0, 0xe0, 0x51, 0xdf, 0x32, 0x8c, 0x58, 0x6c, 0x41, 0xbd, 0x4e, 0x97, 0xf1, 0x9f, 0xeb,
	0xef, 0xf4, 0x7c, 0x8b, 0xef, 0xc4, 0xe9, 0x59, 0xbe, 0x87, 0x41, 0x45, 0xc8, 0x58, 0xce, 0x8a,
	0x4f, 0xf6, 0x43, 0xfd, 0x3b, 0xe3, 0x2e, 0x0d, 0x91, 0xce, 0xb8, 0x28, 0xa2, 0x37, 0xbe, 0xfb,
	0xfd, 0xf9, 0x30, 0xbb, 0xdf, 0x89, 0xde, 0xf8, 0xfe, 0xf7, 0x39, 0x88, 0x77, 0x90, 0xad, 0x66,
	0x5f, 0xe8, 0xef, 0xef, 0xab, 0x88, 0xf6, 0x9b, 0xb6, 0x9d, 0x4f, 0xf1, 0x44, 0x6e, 0x77, 0xab,
	0x5b, 0x6e, 0x4e, 0x96, 0xfb, 0x72, 0x0c, 0x0e, 0x33, 0x3f, 0x72, 0x03, 0xdb, 0xad, 0x2b, 0xf8,
	0x3e, 0xd2, 0xd8, 0xa9, 0xb2, 0xbd, 0x78, 0x16, 0xfb, 0xfe, 0x61, 0xc5, 0x10, 0x87, 0x15, 0x5f,
	0x8d, 0xa7, 0x63, 0x52, 0x3c, 0xf7, 0xb3, 0x31, 0x38, 0xf8, 0x80, 0xe2, 0xe8, 0xab, 0x3b, 0x7e,
	0x8c, 0xd4, 0xf6, 0x63, 0xaf, 0x84, 0x57, 0xe3, 0xe9, 0x84, 0x94, 0xcc, 0x7d, 0x62, 0x19, 0x32,
	0xae, 0x87, 0xda, 0x9b, 0x57, 0xee, 0x98, 0x38, 0xdc, 0xab, 0xc8, 0x82, 0xfe, 0xf3, 0x3c, 0xa4,
	0xb7, 0x4c, 0xb5, 0x49, 0x73, 0xa0, 0x78, 0x48, 0xb8, 0x8b, 0xa0, 0x39, 0x54, 0x83, 0xad, 0x8c,
	0x61, 0x8d, 0xcf, 0xbd, 0xe7, 0x06, 0x7a, 0x70, 0x5a, 0x5a, 0x64, 0x38, 0xb0, 0xa2, 0xc9, 0x1b,
	0x70, 0x44, 0x6d, 0xd8, 0xf8, 0x2e, 0xb6, 0xb7, 0xeb, 0x9a, 0x2b, 0x66, 0xc2, 0x98, 0x14, 0x61,
	0x3c, 0xe4, 0x90, 0x78, 0xaa, 0xaa, 0x68, 0x72, 0x0d, 0x24, 0x55, 0x23, 0xe6, 0x86, 0xea, 0x74,
	0x21, 0xb5, 0xee, 0x96, 0x3e, 0x21, 0x69, 0xc7, 0x38, 0x9c, 0xae, 0x80, 0xf0, 0xde, 0xb6, 0xdb,
	0xc8, 0x6c, 0x6e, 0x93, 0x2c, 0xdb, 0x68, 0x23, 0x93, 0x24, 0x2d, 0x84, 0x36, 0x2d, 0xd6, 0x5b,
	0x46, 0x52, 0xf1, 0x38, 0x2a, 0x9a, 0xbc, 0x04, 0x63, 0x6a, 0x97, 0x26, 0x6e, 0x1d, 0xde, 0xd7,
	0x8c, 0x08, 0xe9, 0xa8, 0x0f, 0x5c, 0xd1, 0xe4, 0xdb, 0xf0, 0x84, 0x9f, 0xcd, 0x44, 0x56, 0xd7,
	0xd0, 0x2d, 0xda, 0x57, 0x10, 0xa1, 0x3d, 0xec, 0x63, 0x51, 0x38, 0x49, 0x45, 0x93, 0xaf, 0xc1,
	0x98, 0xda, 0xd3, 0xb0, 0xed, 0x09, 0x76, 0x58, 0x84, 0x75, 0x84, 0x82, 0x1d, 0xb1, 0x5e, 0x86,
	0xf4, 0xa6, 0x6a, 0xe1, 0x06, 0xa1, 0x19, 0x11, 0xa1, 0x49, 0x51, 0x18, 0xdd, 0x40, 0x9a, 0x61,
	0xeb, 0x07, 0x84, 0x62, 0x54, 0x84, 0x22, 0xcd, 0x70, 0x15, 0x4d, 0xbe, 0x0a, 0x23, 0x9b, 0x86,
	0xb6, 0x5d, 0xb7, 0xb0, 0x4d, 0xc5, 0x34, 0x26, 0x42, 0x03, 0x04, 0xba, 0x8a, 0x6d, 0xc4, 0x3b,
	0xd3, 0xd3, 0xb5, 0x36, 0x65, 0x19, 0x17, 0xeb, 0x0c, 0xc5, 0x31, 0xf5, 0x35, 0xd4, 0xae, 0xba,
	0x89, 0xdb, 0x64, 0x66, 0xd0, 0xf7, 0x3a, 0x39, 0x56, 0x21, 0x09, 0xa9, 0xcf, 0x63, 0x59, 0x75,
	0x48, 0xd8, 0x58, 0x1b, 0xaa, 0x89, 0xea, 0xdd, 0xb6, 0x4a, 0x27, 0xdb, 0x01, 0xa1, 0xb1, 0x12,
	0xe8, 0x4a, 0x5b, 0xd5, 0x7d, 0x44, 0x36, 0x52, 0x3b, 0x84, 0x48, 0x16, 0x26, 0x5a, 0x43, 0x6a,
	0x87, 0x19, 0x54, 0xa3, 0xa5, 0x9a, 0x4d, 0x54, 0xc7, 0x36, 0xa2, 0x54, 0x07, 0x85, 0x0c, 0x8a,
	0x81, 0x2b, 0x36, 0xea, 0x30, 0x83, 0x6a, 0xb4, 0x55, 0x4c, 0x69, 0x0e, 0x09, 0x19, 0x14, 0x85,
	0x55, 0x34, 0xf9, 0x35, 0x38, 0xc0, 0x18, 0xfc, 0x13, 0xe7, 0xb0, 0x08, 0xd5, 0x38, 0xc5, 0xfb,
	0xa6, 0xcc, 0x06, 0x1c, 0x69, 0xb4, 0xb1, 0x8e, 0x1b, 0x6a, 0xbb, 0x8e, 0x3b, 0x5d, 0x52, 0xff,
	0x72, 0x57, 0x77, 0x44, 0xc8, 0x79, 0x38, 0x24, 0x15, 0x97, 0x83, 0x8b, 0xcf, 0xd0, 0x50, 0x9d,
	0x3d, 0x91, 0x23, 0xa4, 0x4f, 0x88, 0x89, 0xcf, 0xd0, 0x10, 0xcb, 0xfc, 0x2a, 0x9a, 0xbc, 0x42,
	0x0a, 0xdb, 0x4e, 0xa7, 0x47, 0x6e, 0xe3, 0xb8, 0xe3, 0xac, 0xd8, 0xd8, 0xfd, 0xf0, 0x8a, 0x26,
	0xd7, 0x21, 0x1b, 0x64, 0xa4, 0xeb, 0xf9, 0x16, 0xb5, 0xe7, 0x27, 0x45, 0x98, 0x8f, 0x04, 0x68,
	0x14, 0xc6, 0x52, 0xd1, 0x64, 0x15, 0x9e, 0x64, 0x7b, 0x25, 0x99, 0xbb, 0x0b, 0x86, 0x92, 0x09,
	0x91, 0x3b, 0x3c, 0xe1, 0xe3, 0x09, 0x44, 0x93, 0x25, 0x22, 0xe2, 0x0e, 0x5b, 0xe9, 0x61, 0xbc,
	0x4f, 0x09, 0xf9, 0x67, 0x1f, 0xd8, 0x51, 0x18, 0xad, 0xf8, 0xeb, 0x1d, 0xb5, 0x4b, 0xd8, 0x8e,
	0x0a, 0x2a, 0x8c, 0x82, 0xab, 0x6a, 0xb7, 0x42, 0x17, 0xaf, 0x1a, 0x86, 0xae, 0xb9, 0x1d, 0xfb,
	0x80, 0x08, 0xd5, 0xb0, 0x0b, 0xad, 0x68, 0x24, 0xaa, 0x37, 0x88, 0xbd, 0x32, 0x57, 0xf3, 0xb4,
	0x50, 0x54, 0xe7, 0xc0, 0x8a, 0x26, 0x5f, 0x01, 0xba, 0x15, 0xc6, 0x54, 0x1b, 0x94, 0xe6, 0x19,
	0x31, 0xa7, 0xc0, 0x91, 0x0e, 0xcf, 0x5d, 0x64, 0xaa, 0x4d, 0x3a, 0xff, 0x9e, 0x15, 0xe4, 0x61,
	0xc8, 0x8a, 0x26, 0x57, 0x61, 0x9c, 0x54, 0x88, 0x75, 0xd4, 0x76, 0xbd, 0xe8, 0x07, 0x85, 0x74,
	0x47, 0xd0, 0x8b, 0x6d, 0xc7, 0x7b, 0xbe, 0x06, 0x07, 0x34, 0x64, 0xd3, 0x2c, 0xb2, 0x8e, 0x2d,
	0xab, 0x47, 0x3b, 0x97, 0x13, 0x9a, 0x20, 0x0e, 0xbe, 0x42, 0xe0, 0x2c, 0x66, 0x68, 0x74, 0x1b,
	0x04, 0xa1, 0x7a, 0x4e, 0x28, 0x66, 0x30, 0x5c, 0x45, 0x93, 0xd7, 0xe1, 0x20, 0xe7, 0xa0, 0xa6,
	0xa6, 0xf3, 0x91, 0x7e, 0x48, 0x84, 0xed, 0x00, 0x63, 0x58, 0x70, 0x08, 0x58, 0x16, 0xc5, 0x69,
	0x3b, 0xc8, 0x36, 0x59, 0x94, 0x7e, 0x5e, 0x28, 0x8b, 0x62, 0xf0, 0x2a, 0x45, 0x3b, 0xe2, 0xa3,
	0x84, 0x3e, 0x2f, 0xf0, 0x82, 0xa0, 0xf8, 0x08, 0xde, 0x9b, 0xfe, 0x1b, 0x70, 0x84, 0x53, 0xf6,
	0x2c, 0x14, 0x88, 0x96, 0x2f, 0x0a, 0xf9, 0x56, 0x46, 0xb2, 0xee, 0xe3, 0xa8, 0x68, 0xf2, 0x0d,
	0x38, 0xa4, 0x61, 0xb5, 0xa9, 0x1b, 0x96, 0x8d, 0x1b, 0x75, 0x13, 0x75, 0x0d, 0x93, 0x52, 0x4f,
	0x8a, 0x50, 0xcb, 0x1e, 0x85, 0x42, 0x19, 0x38, 0xb1, 0xd1, 0xe8, 0xd1, 0xae, 0x76, 0x54, 0x1d,
	0x6f, 0x71, 0x59, 0x4c, 0x89, 0x11, 0x73, 0x8a, 0x2a, 0x67, 0xa8, 0x68, 0xf2, 0x4d, 0x38, 0xec,
	0x12, 0xbb, 0xf9, 0x3e, 0x61, 0x7e, 0x49, 0x84, 0xf9, 0xa0, 0xc3, 0xe1, 0xbb, 0x4c, 0x24, 0x8d,
	0xda, 0xb8, 0x89, 0x79, 0x66, 0xe2, 0xd3, 0xe0, 0x31, 0x21, 0x49, 0xfb, 0x48, 0x3c, 0x35, 0xde,
	0x86, 0x27, 0x82, 0xe4, 0x5e, 0xec, 0x7d, 0x59, 0x28, 0xeb, 0x09, 0xb0, 0xbb, 0x11, 0xb8, 0x0c,
	0x23, 0x48, 0xa7, 0x95, 0x07, 0x32, 0x09, 0x67, 0x5e, 0xc8, 0x4d, 0xba, 0x50, 0xe6, 0x98, 0x90,
	0xae, 0xd1, 0xc4, 0x98, 0x10, 0x4d, 0x0b, 0x39, 0x26, 0x07, 0xc9, 0x14, 0x85, 0x74, 0xd3, 0x68,
	0xb7, 0xb9, 0xaa, 0x5c, 0x61, 0x1e, 0x17, 0x52, 0x94, 0xc7, 0x11, 0x98, 0x12, 0x01, 0x6a, 0x4f,
	0x94, 0x33, 0x62, 0x8a, 0xf2, 0x71, 0xbb, 0x92, 0x7c, 0x0d, 0x0e, 0xa0, 0x2e, 0xb6, 0x48, 0xc6,
	0x61, 0x6c, 0xd1, 0x04, 0x10, 0x6b, 0xd9, 0x59, 0xa1, 0x29, 0xcc, 0xf1, 0x35, 0x0a, 0x67, 0x93,
	0x01, 0xdd, 0xef, 0xaa, 0xb4, 0xa8, 0xad, 0xf3, 0xd3, 0x59, 0x84, 0x75, 0x4e, 0x68, 0x32, 0xb8,
	0x14, 0x2b, 0x8c, 0x81, 0xe5, 0x1e, 0xe8, 0x3e, 0x49, 0x74, 0x59, 0xe6, 0x61, 0x6c, 0x6d, 0x22,
	0x1d, 0x6d, 0x61, 0x2a, 0xe6, 0x13, 0x42, 0xb9, 0x87, 0x8f, 0xa6, 0xe6, 0xb0, 0x30, 0xab, 0x65,
	0x27, 0x5e, 0xeb, 0x1d, 0xd4, 0xd9, 0x44, 0x66, 0x0b, 0x5b, 0xb6, 0xc1, 0x4a, 0x91, 0x93, 0x42,
	0x56, 0xcb, 0x58, 0xaa, 0x7e, 0x92, 0x8a, 0x26, 0x5f, 0x84, 0xd4, 0x56, 0x5b, 0x6d, 0x12, 0xba,
	0x57, 0x44, 0xe8, 0x92, 0x04, 0xc5, 0xf0, 0x4d, 0x83, 0xe4, 0x9c, 0x5a, 0xf6, 0x94, 0x10, 0x9e,
	0xa0, 0x58, 0x58, 0x69, 0x9a, 0x6a, 0xb7, 0xf5, 0x40, 0x52, 0x75, 0x5a, 0x28, 0xac, 0x50, 0x86,
	0x40, 0x3a, 0x75, 0x19, 0xd2, 0x4d, 0xd3, 0xe8, 0xd1, 0xd4, 0xe7, 0x8c, 0x50, 0x8e, 0x4e, 0x61,
	0xcc, 0x62, 0x9a, 0x3d, 0xac, 0xd1, 0x12, 0xdc, 0x6f, 0xdf, 0x67, 0x85, 0x2c, 0xc6, 0xa1, 0xf0,
	0x59, 0xf7, 0x4d, 0x38, 0xdc, 0x42, 0x6a, 0xdb, 0x6e, 0x51, 0xcb, 0xb6, 0x90, 0xe9, 0x04, 0xe6,
	0x82, 0xd0, 0xac, 0xf4, 0x38, 0x56, 0x19, 0x05, 0x13, 0x26, 0xee, 0xa8, 0x4d, 0xac, 0x37, 0x03,
	0x1e, 0xff, 0x9c, 0x90, 0x30, 0x39, 0x83, 0xcf, 0xe1, 0xd7, 0x40, 0x72, 0x68, 0x2d, 0xbb, 0xa7,
	0x51, 0xdb, 0x3b, 0x2f, 0x14, 0xa3, 0x39, 0x7c, 0x95, 0xa0, 0x2b, 0x9a, 0xbc, 0x0c, 0xe3, 0x98,
	0x26, 0xda, 0x6f, 0xba, 0x15, 0xc0, 0x05, 0x41, 0x3e, 0x0f, 0x5d, 0xd1, 0xe4, 0x3b, 0xf0, 0x74,
	0x80, 0xcf, 0x44, 0x24, 0x91, 0x47, 0xba, 0xe6, 0xd2, 0x5f, 0x14, 0xa1, 0x3f, 0xea, 0x27, 0x53,
	0x02, 0x5c, 0x6c, 0x42, 0xd2, 0x4d, 0x7f, 0xc4, 0x69, 0x31, 0x7e, 0xa2, 0x64, 0xaa, 0xc1, 0x4b,
	0x42, 0x13, 0x32, 0xc8, 0x72, 0x95, 0x90, 0xb0, 0x1c, 0xb9, 0x8d, 0x37, 0x4d, 0xbe, 0xda, 0x70,
	0x59, 0x28, 0x47, 0xe6, 0x40, 0x87, 0x45, 0xbf, 0xc3, 0x53, 0xdb, 0xa2, 0x20, 0x0b, 0x05, 0xb2,
	0xc9, 0xdd, 0xc6, 0xcc, 0x86, 0xe6, 0x85, 0x26, 0x37, 0x41, 0xb1, 0x40, 0xd6, 0x36, 0xbc, 0x2a,
	0x6f, 0x41, 0x28, 0x90, 0x39, 0x48, 0x36, 0x9a, 0x0e, 0x52, 0xad, 0x1e, 0x8b, 0x04, 0x25, 0xa1,
	0xd1, 0x70, 0x20, 0x0b, 0x2b, 0x0e, 0x8b, 0x97, 0x66, 0x2d, 0x0a, 0x85, 0x15, 0x8e, 0x77, 0x73,
	0xac, 0xcb, 0x90, 0xee, 0x20, 0x0d, 0xab, 0x84, 0xe9, 0x8a, 0x90, 0x9b, 0xa1, 0xb0, 0x8a, 0x26,
	0xbf, 0x0a, 0xa3, 0xe4, 0xa7, 0x27, 0xa4, 0xab, 0x42, 0x85, 0x9a, 0x87, 0xad, 0x68, 0x72, 0x13,
	0x8e, 0xfa, 0xb8, 0x82, 0xef, 0xd3, 0x21, 0xd4, 0x65, 0x11, 0xea, 0x09, 0x8f, 0x2a, 0xf8, 0x46,
	0x1d, 0x16, 0xfd, 0x7d, 0x37, 0xd2, 0xb0, 0xd5, 0x45, 0xdc, 0x3b, 0x56, 0x84, 0xa2, 0xbf, 0x47,
	0x52, 0xe2, 0x1c, 0xcc, 0x3f, 0xfa, 0xc8, 0x7d, 0x59, 0xcb, 0xab, 0x42, 0xfe, 0xd1, 0xe3, 0x08,
	0x64, 0x80, 0x3e, 0xea, 0x40, 0x26, 0x7f, 0x4d, 0x68, 0xea, 0x7a, 0x2c, 0xfe, 0x75, 0x2f, 0xda,
	0x73, 0xcb, 0x22, 0x93, 0x2e, 0x18, 0xcd, 0x96, 0x04, 0x7b, 0x4e, 0x39, 0x02, 0xf1, 0x8c, 0xda,
	0x2e, 0xa3, 0x6e, 0x21, 0x55, 0x63, 0x19, 0x66, 0x55, 0xd0, 0x76, 0x29, 0xbe, 0x4c, 0xe1, 0xcc,
	0xab, 0xeb, 0x6a, 0x87, 0x3a, 0x75, 0x77, 0x59, 0x67, 0x59, 0xc8, 0x0b, 0x33, 0xb8, 0xbb, 0xb0,
	0xb3, 0x0a, 0xb2, 0xde, 0xb3, 0x4d, 0x36, 0x6a, 0xc3, 0xe4, 0x9d, 0xac, 0x89, 0x50, 0x4a, 0x2e,
	0x41, 0xcd, 0x64, 0xbd, 0x5c, 0x82, 0x31, 0x63, 0x93, 0x04, 0x49, 0xd7, 0x8a, 0x57, 0x84, 0x6a,
	0x6b, 0x1f, 0x98, 0x19, 0x80, 0xd1, 0x45, 0x7c, 0x46, 0x04, 0x75, 0xf4, 0x9a, 0x90, 0x01, 0xb8,
	0x2c, 0x01, 0x2d, 0xdd, 0x80, 0x43, 0x1e, 0xbd, 0xd1, 0xb3, 0x1b, 0x46, 0x87, 0xce, 0x0a, 0x45,
	0x28, 0x67, 0x70, 0x29, 0x6a, 0x8c, 0x81, 0x05, 0x4c, 0xc3, 0x77, 0x26, 0x81, 0x70, 0xae, 0x0a,
	0xa9, 0xca, 0x8f, 0x66, 0x5e, 0xa7, 0xab, 0x9a, 0x6a, 0x07, 0xd9, 0xc8, 0xb4, 0x08, 0xdb, 0x9a,
	0x90, 0xd7, 0xf1, 0xb0, 0xcc, 0x39, 0xbb, 0xaf, 0x7a, 0xd3, 0xb2, 0xeb, 0x42, 0xce, 0xd9, 0x79,
	0xd1, 0x1b, 0x35, 0xf0, 0xae, 0xba, 0x4d, 0x67, 0xa3, 0x6e, 0xd8, 0x3c, 0x23, 0xba, 0x2e, 0x64,
	0xe0, 0x1c, 0xbf, 0x4c, 0xe1, 0x6c, 0xd5, 0xce, 0xa1, 0x24, 0x09, 0x81, 0xde, 0xc0, 0x6d, 0xec,
	0x8a, 0xef, 0x86, 0xd0, 0xaa, 0x1d, 0xe7, 0x51, 0x02, 0x34, 0x6c, 0x61, 0xa5, 0x4b, 0x0f, 0xb2,
	0x10, 0xca, 0x0f, 0x0b, 0x2d, 0xac, 0x30, 0x1c, 0x9b, 0x36, 0x74, 0xa1, 0x3c, 0x68, 0x8e, 0x37,
	0x85, 0xa6, 0x0d, 0x21, 0x08, 0x58, 0xe2, 0x32, 0x8c, 0x77, 0x7d, 0x47, 0x74, 0x08, 0xe3, 0xeb,
	0x42, 0x06, 0xe3, 0x47, 0x33, 0xcb, 0x0e, 0xf0, 0x99, 0x06, 0xab, 0x9f, 0x36, 0x84, 0x2c, 0xdb,
	0x4f, 0xa1, 0x18, 0x6d, 0x5e, 0x35, 0x77, 0x4d, 0xa3, 0x81, 0x34, 0x1e, 0xdc, 0x6f, 0x09, 0x55,
	0xcd, 0x2e, 0xd4, 0xe9, 0xa2, 0xc3, 0xe4, 0x0b, 0x1b, 0xb7, 0x05, 0xbb, 0xc8, 0x29, 0xbc, 0xa8,
	0x41, 0x14, 0x44, 0xae, 0x5a, 0x96, 0x9f, 0xf6, 0x23, 0x62, 0x0a, 0x62, 0x04, 0x1e, 0xe9, 0x3a,
	0x1c, 0xf4, 0x48, 0xbd, 0xea, 0xa2, 0x2e, 0x94, 0xaa, 0xbb, 0xac, 0x6e, 0x71, 0x41, 0x26, 0xb6,
	0x69, 0xdc, 0x45, 0xba, 0xf3, 0xe8, 0xf0, 0xa7, 0xc4, 0x26, 0xb6, 0x8b, 0x65, 0x0b, 0xf5, 0xb4,
	0xb7, 0xd8, 0xd0, 0x75, 0x15, 0x33, 0xf5, 0xa8, 0x42, 0x33, 0x32, 0x00, 0x67, 0x33, 0x32, 0xc8,
	0xe8, 0x1f, 0xfa, 0xa6, 0xd0, 0x8c, 0x0c, 0xf0, 0xf8, 0x04, 0xb0, 0x0e, 0x07, 0xe9, 0x9a, 0x94,
	0xa9, 0xb6, 0xfd, 0xda, 0x6a, 0x08, 0xc9, 0xd5, 0x61, 0xf0, 0xd4, 0xf5, 0x1a, 0x1c, 0x30, 0xd9,
	0xc1, 0xb5, 0xba, 0x37, 0xe1, 0x35, 0x21, 0x61, 0x98, 0xfe, 0x83, 0x6f, 0x2c, 0xfe, 0x3a, 0x1d,
	0x74, 0x4b, 0x55, 0x24, 0x34, 0x47, 0x39, 0xfc, 0x2a, 0xaf, 0x58, 0x69, 0x1f, 0x2d, 0xa4, 0x9a,
	0x8d, 0x96, 0x57, 0xa7, 0x6d, 0x09, 0xf6, 0x91, 0xe1, 0x9d, 0x42, 0x8d, 0x4a, 0xd3, 0xa1, 0xec,
	0x6d, 0x7e, 0x14, 0xb1, 0x25, 0xf7, 0xa6, 0xa0, 0x34, 0x39, 0x29, 0x23, 0x60, 0x33, 0xca, 0xc4,
	0xd6, 0x9d, 0xba, 0x6a, 0x59, 0xc8, 0xb2, 0x9c, 0x14, 0xac, 0x25, 0x34, 0xa3, 0x08, 0x41, 0xd1,
	0xc5, 0xb3, 0x62, 0xc3, 0x6a, 0xb4, 0x90, 0xd6, 0x63, 0x9e, 0x09, 0x0b, 0x15, 0x1b, 0x0e, 0x92,
	0x8d, 0x99, 0x8f, 0xd8, 0x0d, 0x73, 0x84, 0xef, 0xa3, 0x42, 0x63, 0x66, 0x0c, 0x2b, 0x0e, 0x01,
	0xef, 0x1e, 0x7f, 0x63, 0x2b, 0xa1, 0xbb, 0x23, 0xd6, 0x3d, 0x8e, 0x64, 0x49, 0xa6, 0xb3, 0x66,
	0x10, 0x8c, 0x18, 0x6d, 0xa1, 0x24, 0x93, 0x73, 0x04, 0x82, 0xc6, 0x45, 0x48, 0x59, 0x6d, 0x83,
	0xea, 0xa2, 0x23, 0x54, 0xee, 0x11, 0x14, 0x1f, 0x62, 0x17, 0x35, 0x70, 0x07, 0xd1, 0x0e, 0xe9,
	0x62, 0x43, 0xe4, 0x48, 0x96, 0xa5, 0x59, 0xce, 0xee, 0x98, 0x07, 0x06, 0x69, 0x08, 0x65, 0x69,
	0xd6, 0xc3, 0x7b, 0x6c, 0xd8, 0xc4, 0xf3, 0xe8, 0xf9, 0xe3, 0xb1, 0xae, 0xd0, 0xc4, 0x73, 0xe1,
	0xec, 0x01, 0xd9, 0x32, 0x8c, 0x5b, 0xbd, 0x4d, 0xab, 0x61, 0xe2, 0xae, 0xd3, 0xcf, 0x37, 0xc4,
	0xf8, 0x7c, 0x68, 0x16, 0x13, 0xc9, 0x15, 0xdb, 0xf1, 0xe1, 0xa6, 0x50, 0x4c, 0x74, 0xa1, 0x6c,
	0xa2, 0x59, 0xbd, 0x6e, 0xb7, 0xbd, 0x5d, 0xd7, 0x50, 0x1b, 0xdf, 0x45, 0x6c, 0x51, 0xc1, 0x12,
	0x9a, 0x68, 0x8c, 0xa0, 0xc4, 0xf1, 0xcc, 0xcf, 0x70, 0x52, 0x9f, 0x83, 0xb5, 0x85, 0xfc, 0x0c,
	0xc3, 0x7b, 0xee, 0xf5, 0x22, 0xa4, 0x6c, 0xd5, 0xba, 0x43, 0x88, 0x7a, 0x42, 0x96, 0x47, 0x50,
	0xec, 0x79, 0xa7, 0x4d, 0x3a, 0xe2, 0xd5, 0xf5, 0x77, 0x85, 0xe2, 0x1e, 0x01, 0xbb, 0x45, 0xbd,
	0x43, 0xc6, 0x54, 0x42, 0xc8, 0xee, 0x09, 0x93, 0xad, 0x52, 0x2c, 0xdb, 0xc2, 0xc0, 0xbe, 0x15,
	0x69, 0x21, 0x4a, 0x75, 0x5f, 0x68, 0x52, 0x50, 0xe8, 0x2a, 0xe2, 0x2b, 0xee, 0x77, 0x31, 0x5f,
	0xbe, 0x46, 0x01, 0x5b, 0xdb, 0x16, 0xaa, 0xb9, 0x19, 0xc9, 0x8a, 0x8f, 0x83, 0xe6, 0xb1, 0xfe,
	0x4d, 0xc9, 0x6f, 0x86, 0xdd, 0x94, 0x1c, 0xd8, 0x92, 0xec, 0xdb, 0x71, 0xf7, 0x96, 0xd0, 0x8e,
	0xbb, 0xc2, 0x21, 0xb6, 0x57, 0xee, 0xe3, 0x9f, 0xff, 0xcc, 0x57, 0x12, 0x69, 0x05, 0x59, 0x46,
	0xcf, 0x6c, 0xa0, 0xf9, 0x83, 0xbe, 0x3d, 0xbc, 0x72, 0xf2, 0x37, 0xbf, 0xff, 0xa9, 0x77, 0x93,
	0x91, 0xdc, 0x9f, 0x46, 0x60, 0xd8, 0xff, 0xc0, 0xe8, 0xd1, 0xdf, 0x0b, 0x3c, 0x09, 0x29, 0xbe,
	0xc2, 0xcd, 0x8f, 0xea, 0xf4, 0x7b, 0x53, 0x9c, 0xd3, 0xf4, 0xb1, 0x7f, 0x75, 0xb3, 0x90, 0x64,
	0xdf, 0xe1, 0xcb, 0xfd, 0x7e, 0x14, 0xc6, 0x1f, 0xf8, 0xf4, 0x9c, 0xbc, 0xe0, 0x1f, 0xd8, 0xd8,
	0x5c, 0x3e, 0xe4, 0x27, 0xeb, 0xd8, 0x91, 0xaa, 0xbd, 0xfa, 0x6e, 0x62, 0xee, 0x8a, 0x73, 0xf2,
	0xea, 0x49, 0x38, 0x5c, 0x59, 0xbe, 0x5e, 0x5c, 0xaa, 0x94, 0xea, 0xeb, 0xcb, 0x95, 0xe5, 0xca,
	0x5a, 0xa5, 0xb8, 0x54, 0x79, 0xdd, 0xf9, 0x86, 0xe8, 0x4a, 0x6d, 0x75, 0xad, 0xb8, 0x24, 0x45,
	0xe4, 0x11, 0x48, 0xaf, 0x94, 0x6f, 0xae, 0x56, 0x16, 0x8a, 0x4b, 0x52, 0x54, 0x4e, 0x43, 0x7c,
	0xbe, 0xb6, 0x56, 0x96, 0x62, 0x85, 0x57, 0x3e, 0xfe, 0x9f, 0x1f, 0x7b, 0x37, 0x31, 0xf5, 0xa8,
	0x7d, 0x93, 0xd7, 0xf9, 0x94, 0x38, 0xce, 0x4f, 0x79, 0xe4, 0xed, 0xed, 0x2e, 0xf2, 0x04, 0x39,
	0x16, 0xfc, 0xfc, 0x9f, 0x3c, 0x1f, 0x94, 0xe3, 0xcb, 0xe1, 0xbe, 0x1a, 0xb8, 0xc7, 0x62, 0xac,
	0x84, 0x10, 0x63, 0x1a, 0xe2, 0xe5, 0x5a, 0x75, 0x51, 0x8a, 0x90, 0x5f, 0x37, 0x6a, 0xca, 0x35,
	0x26, 0xc0, 0xb5, 0xc5, 0xea, 0x8a, 0x14, 0x93, 0x53, 0x10, 0xab, 0x2d, 0x95, 0xa4, 0x78, 0xe1,
	0x24, 0x95, 0xe4, 0x64, 0x28, 0x49, 0xf6, 0x2c, 0x47, 0x90, 0x3f, 0x8c, 0xc2, 0x91, 0x47, 0x7f,
	0x0c, 0x44, 0x7e, 0x35, 0x28, 0xd0, 0x93, 0x62, 0xdf, 0x12, 0xd9, 0x63, 0xc1, 0xe2, 0x10, 0x82,
	0xcd, 0x40, 0x62, 0xa5, 0x5c, 0x5b, 0x26, 0x92, 0x4d, 0x41, 0xec, 0x4a, 0xf1, 0xc3, 0x52, 0x94,
	0x5c, 0x5b, 0xac, 0x16, 0x2b, 0x4b, 0x52, 0x8c, 0xfe, 0x73, 0xf1, 0xea, 0xa2, 0x22, 0xc5, 0xc9,
	0x3f, 0xaf, 0x2b, 0x4b, 0x52, 0x82, 0xfc, 0x58, 0xad, 0xae, 0x4a, 0x49, 0xf2, 0x8f, 0xb5, 0xb5,
	0xf2, 0xa2, 0x22, 0xa5, 0x0a, 0x17, 0xa8, 0xe0, 0x67, 0xfb, 0x0a, 0x9e, 0x9f, 0x89, 0xc9, 0xd3,
	0x07, 0xb6, 0x79, 0xb6, 0x0c, 0xc7, 0x35, 0xf0, 0xf7, 0x51, 0x38, 0xf8, 0x88, 0x6f, 0xa2, 0xc8,
	0x57, 0x83, 0xe2, 0x9f, 0x15, 0xf8, 0x9e, 0xca, 0x1e, 0xcb, 0x7e, 0xfd, 0x47, 0x66, 0xd4, 0xc4,
	0x85, 0x54, 0x6b, 0xf3, 0x95, 0xa5, 0x45, 0x29, 0x51, 0x28, 0x50, 0x39, 0x4f, 0x0b, 0xc8, 0xd9,
	0x33, 0xf3, 0xbf, 0x8b, 0xc2, 0x58, 0xf0, 0xf8, 0x73, 0x68, 0x7f, 0x11, 0x84, 0xed, 0xb1, 0x68,
	0xd5, 0x10, 0xa2, 0x4d, 0x41, 0xac, 0x5a, 0x5b, 0x66, 0x46, 0xbd, 0xb6, 0xbe, 0x28, 0x45, 0xc9,
	0x8f, 0x1b, 0x8b, 0x25, 0x26, 0xd7, 0xb5, 0xf2, 0x3a, 0x33, 0xe8, 0x2b, 0x4a, 0x85, 0x1b, 0x74,
	0x71, 0x4d, 0x4a, 0xd2, 0x1f, 0xeb, 0xcb, 0x52, 0x2a, 0x94, 0x47, 0xd6, 0xd4, 0x6d, 0x2b, 0x6f,
	0x6c, 0xe5, 0xef, 0x21, 0x74, 0x87, 0x4b, 0xf8, 0xb3, 0x09, 0x18, 0x7f, 0xe0, 0x84, 0x77, 0xe8,
	0xd0, 0xf6, 0x00, 0x6e, 0x8f, 0x65, 0xfc, 0x99, 0x58, 0x08, 0x21, 0x1f, 0x82, 0x78, 0xb5, 0xa6,
	0x2c, 0x4b, 0x91, 0x09, 0xf8, 0x9d, 0xcf, 0xfc, 0xee, 0xbb, 0x09, 0xfa, 0x97, 0x2c, 0x43, 0xac,
	0x78, 0x65, 0x4d, 0x8a, 0x4e, 0x64, 0xe8, 0x45, 0xf2, 0x07, 0xb9, 0xb6, 0x78, 0x7d, 0x51, 0x8a,
	0x39, 0xd7, 0x16, 0xaf, 0x2f, 0xca, 0x47, 0x20, 0xb1, 0x5c, 0xb9, 0x5a, 0x5e, 0x93, 0xe2, 0x13,
	0xc3, 0xf4, 0x2a, 0xfb, 0x93, 0xb4, 0x5d, 0x29, 0xaf, 0x4a, 0x09, 0xa7, 0xed, 0x4a, 0x79, 0x55,
	0x96, 0x20, 0x5a, 0x5e, 0x95, 0x92, 0x13, 0x69, 0x7a, 0x29, 0x5a, 0x5e, 0x25, 0xf7, 0xbe, 0x51,
	0xbc, 0xb6, 0x28, 0xa5, 0x9c, 0x7b, 0x93, 0xbf, 0xe4, 0x31, 0x88, 0x2c, 0x48, 0xe9, 0x89, 0x14,
	0xbd, 0x14, 0x59, 0x20, 0xb8, 0x85, 0xaa, 0x94, 0x71, 0x70, 0x0b, 0x55, 0x7a, 0xa5, 0x24, 0x81,
	0x7b, 0xa5, 0x44, 0xaf, 0x5c, 0x97, 0x86, 0xdd, 0x2b, 0xd7, 0xc9, 0x95, 0xe2, 0x82, 0x34, 0xe2,
	0x5c, 0x29, 0x2e, 0xd0, 0x31, 0x2d, 0x54, 0xa5, 0x51, 0x77, 0x4c, 0x0b, 0x55, 0x76, 0xad, 0x24,
	0x8d, 0x79, 0xd7, 0x4a, 0xec, 0xda, 0x75, 0x69, 0xdc, 0xbb, 0x46, 0xd9, 0x56, 0x16, 0x24, 0xc9,
	0x61, 0x5b, 0xa1, 0x6c, 0x2b, 0x0b, 0x55, 0xe9, 0x80, 0x3b, 0x42, 0xc6, 0xb6, 0xb2, 0x50, 0x92,
	0x64, 0xef, 0x5a, 0x89, 0x5d, 0xbb, 0x2e, 0x1d, 0xf4, 0xae, 0x5d, 0x0f, 0x65, 0x99, 0x74, 0x1f,
	0x79, 0x9e, 0x1d, 0x89, 0xe2, 0x96, 0xf9, 0x57, 0x51, 0x38, 0xf0, 0xd0, 0x0b, 0xa8, 0xbd, 0x33,
	0xec, 0xcc, 0x36, 0x8f, 0x87, 0x7e, 0x75, 0xf5, 0x1e, 0x5b, 0xe7, 0x5a, 0xb8, 0xc0, 0xb6, 0xbe,
	0xba, 0xee, 0xe4, 0x5d, 0xb5, 0x2b, 0x57, 0x2a, 0x0b, 0x15, 0x27, 0xef, 0xe2, 0x1e, 0x76, 0x14,
	0x32, 0xec, 0xeb, 0xed, 0x45, 0xe5, 0xa6, 0x14, 0x2f, 0x9c, 0xa6, 0xa2, 0x3d, 0xd6, 0x57, 0xb4,
	0x5e, 0x05, 0xe0, 0x73, 0xac, 0xdf, 0x8a, 0xc0, 0x78, 0xb1, 0xdd, 0xf6, 0x7f, 0xb0, 0x71, 0xbf,
	0x7c, 0xda, 0xfb, 0x14, 0x1d, 0xd3, 0x4b, 0xfd, 0x13, 0xa2, 0x76, 0x3b, 0xef, 0x7c, 0x5e, 0xd2,
	0xe2, 0x43, 0xfa, 0x46, 0x04, 0x46, 0xf6, 0xe3, 0x78, 0xe6, 0xe8, 0x78, 0x5e, 0xe8, 0x3b, 0x9e,
	0x07, 0xc7, 0xf2, 0x87, 0x11, 0x18, 0xf1, 0xbf, 0x5b, 0x6e, 0xbf, 0x8c, 0xe5, 0x04, 0x1d, 0xcb,
	0x8b, 0x7c, 0x2c, 0xf7, 0xee, 0xdd, 0x9b, 0x36, 0xb7, 0x1a, 0x79, 0xa4, 0x61, 0xdb, 0x30, 0xe9,
	0xb0, 0x36, 0x1b, 0x5d, 0xf2, 0xdf, 0xec, 0x89, 0x69, 0xfb, 0xbe, 0xcd, 0x07, 0xf3, 0xbd, 0x28,
	0x0c, 0xfb, 0xbe, 0x44, 0x20, 0x5f, 0x0a, 0x4e, 0xe1, 0xa9, 0x10, 0x5f, 0x2f, 0xd8, 0xe3, 0xc9,
	0x7b, 0xef, 0x47, 0x33, 0x79, 0x47, 0x20, 0xbd, 0x5c, 0x59, 0xb8, 0xb6, 0x5c, 0xac, 0x2e, 0x4a,
	0x71, 0x32, 0x95, 0x8b, 0xcb, 0xb5, 0xe5, 0x9b, 0xd5, 0xda, 0xfa, 0x2a, 0x8b, 0xe8, 0x24, 0x77,
	0x4a, 0xd2, 0xdc, 0xa9, 0x58, 0x29, 0x2d, 0x92, 0xa0, 0x3e, 0x4b, 0xe5, 0xfd, 0x7c, 0x5f, 0xdb,
	0xd1, 0xd5, 0x0e, 0xf2, 0xcd, 0xec, 0xff, 0x89, 0xc2, 0x91, 0x47, 0xbf, 0x4f, 0x38, 0x74, 0x65,
	0xf0, 0x68, 0xf8, 0x1e, 0xeb, 0xa0, 0x15, 0x42, 0x07, 0xe3, 0x10, 0x5d, 0x5a, 0x93, 0x22, 0x4e,
	0x30, 0x3d, 0x4f, 0x02, 0xd9, 0xd2, 0xa2, 0x14, 0x75, 0x02, 0xd9, 0xf9, 0x0b, 0xe4, 0xca, 0x55,
	0x12, 0xd5, 0xf9, 0x95, 0x8b, 0x17, 0x08, 0xe8, 0x2a, 0x89, 0xe8, 0x1c, 0x74, 0xb1, 0x70, 0x9e,
	0x0a, 0x7d, 0xa6, 0xaf, 0xd0, 0x9d, 0x63, 0xd3, 0x79, 0xef, 0x15, 0xcd, 0x5c, 0xfe, 0x7f, 0x19,
	0x85, 0xf1, 0x07, 0xde, 0xfd, 0x13, 0x3a, 0xa1, 0x7a, 0x00, 0xb7, 0xc7, 0x12, 0xbf, 0x11, 0x42,
	0xe2, 0x09, 0x88, 0xac, 0xb2, 0x94, 0xb5, 0x5a, 0x59, 0x96, 0xa2, 0xe4, 0xef, 0xb2, 0x14, 0x23,
	0xff, 0x23, 0x65, 0x40, 0x12, 0xa2, 0x37, 0xae, 0x49, 0x09, 0xf2, 0xff, 0x6a, 0x4d, 0x4a, 0x92,
	0xcb, 0x45, 0x29, 0x15, 0xca, 0xc3, 0xf7, 0x88, 0x28, 0x48, 0xae, 0x6a, 0xe3, 0x0e, 0x37, 0xed,
	0xf9, 0xa7, 0x61, 0xa2, 0x61, 0x74, 0x76, 0x18, 0xc3, 0x4a, 0x64, 0x33, 0x49, 0x7f, 0x9c, 0xf8,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xae, 0x15, 0x03, 0xcb, 0x94, 0x00, 0x00,
}
