// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/stu3/metadatatypes.proto

package google_fhir_stu3_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Auto-generated from StructureDefinition for BackboneElement.
// Base for elements defined inside a resource.
// See http://hl7.org/fhir/StructureDefinition/BackboneElement
type BackboneElement struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension    []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BackboneElement) Reset()         { *m = BackboneElement{} }
func (m *BackboneElement) String() string { return proto.CompactTextString(m) }
func (*BackboneElement) ProtoMessage()    {}
func (*BackboneElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{0}
}

func (m *BackboneElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackboneElement.Unmarshal(m, b)
}
func (m *BackboneElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackboneElement.Marshal(b, m, deterministic)
}
func (m *BackboneElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackboneElement.Merge(m, src)
}
func (m *BackboneElement) XXX_Size() int {
	return xxx_messageInfo_BackboneElement.Size(m)
}
func (m *BackboneElement) XXX_DiscardUnknown() {
	xxx_messageInfo_BackboneElement.DiscardUnknown(m)
}

var xxx_messageInfo_BackboneElement proto.InternalMessageInfo

func (m *BackboneElement) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BackboneElement) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *BackboneElement) GetModifierExtension() []*Extension {
	if m != nil {
		return m.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactDetail.
// Contact information.
// See http://hl7.org/fhir/StructureDefinition/ContactDetail
type ContactDetail struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name of an individual to contact
	Name *String `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or organization
	Telecom              []*ContactPoint `protobuf:"bytes,4,rep,name=telecom,proto3" json:"telecom,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactDetail) Reset()         { *m = ContactDetail{} }
func (m *ContactDetail) String() string { return proto.CompactTextString(m) }
func (*ContactDetail) ProtoMessage()    {}
func (*ContactDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{1}
}

func (m *ContactDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactDetail.Unmarshal(m, b)
}
func (m *ContactDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactDetail.Marshal(b, m, deterministic)
}
func (m *ContactDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactDetail.Merge(m, src)
}
func (m *ContactDetail) XXX_Size() int {
	return xxx_messageInfo_ContactDetail.Size(m)
}
func (m *ContactDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ContactDetail proto.InternalMessageInfo

func (m *ContactDetail) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ContactDetail) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ContactDetail) GetName() *String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ContactDetail) GetTelecom() []*ContactPoint {
	if m != nil {
		return m.Telecom
	}
	return nil
}

// Auto-generated from StructureDefinition for Contributor.
// Contributor information.
// See http://hl7.org/fhir/StructureDefinition/Contributor
type Contributor struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// author | editor | reviewer | endorser
	Type *ContributorTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Who contributed the content
	Name *String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details of the contributor
	Contact              []*ContactDetail `protobuf:"bytes,5,rep,name=contact,proto3" json:"contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Contributor) Reset()         { *m = Contributor{} }
func (m *Contributor) String() string { return proto.CompactTextString(m) }
func (*Contributor) ProtoMessage()    {}
func (*Contributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{2}
}

func (m *Contributor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contributor.Unmarshal(m, b)
}
func (m *Contributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contributor.Marshal(b, m, deterministic)
}
func (m *Contributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contributor.Merge(m, src)
}
func (m *Contributor) XXX_Size() int {
	return xxx_messageInfo_Contributor.Size(m)
}
func (m *Contributor) XXX_DiscardUnknown() {
	xxx_messageInfo_Contributor.DiscardUnknown(m)
}

var xxx_messageInfo_Contributor proto.InternalMessageInfo

func (m *Contributor) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Contributor) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Contributor) GetType() *ContributorTypeCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Contributor) GetName() *String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Contributor) GetContact() []*ContactDetail {
	if m != nil {
		return m.Contact
	}
	return nil
}

// Auto-generated from StructureDefinition for DataRequirement.
// Describes a required data item.
// See http://hl7.org/fhir/StructureDefinition/DataRequirement
type DataRequirement struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The type of the required data
	Type *FHIRAllTypesCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The profile of the required data
	Profile []*Uri `protobuf:"bytes,4,rep,name=profile,proto3" json:"profile,omitempty"`
	// Indicates that specific structure elements are referenced by the knowledge
	// module
	MustSupport          []*String                     `protobuf:"bytes,5,rep,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	CodeFilter           []*DataRequirement_CodeFilter `protobuf:"bytes,6,rep,name=code_filter,json=codeFilter,proto3" json:"code_filter,omitempty"`
	DateFilter           []*DataRequirement_DateFilter `protobuf:"bytes,7,rep,name=date_filter,json=dateFilter,proto3" json:"date_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DataRequirement) Reset()         { *m = DataRequirement{} }
func (m *DataRequirement) String() string { return proto.CompactTextString(m) }
func (*DataRequirement) ProtoMessage()    {}
func (*DataRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{3}
}

func (m *DataRequirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequirement.Unmarshal(m, b)
}
func (m *DataRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequirement.Marshal(b, m, deterministic)
}
func (m *DataRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequirement.Merge(m, src)
}
func (m *DataRequirement) XXX_Size() int {
	return xxx_messageInfo_DataRequirement.Size(m)
}
func (m *DataRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequirement proto.InternalMessageInfo

func (m *DataRequirement) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DataRequirement) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *DataRequirement) GetType() *FHIRAllTypesCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DataRequirement) GetProfile() []*Uri {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *DataRequirement) GetMustSupport() []*String {
	if m != nil {
		return m.MustSupport
	}
	return nil
}

func (m *DataRequirement) GetCodeFilter() []*DataRequirement_CodeFilter {
	if m != nil {
		return m.CodeFilter
	}
	return nil
}

func (m *DataRequirement) GetDateFilter() []*DataRequirement_DateFilter {
	if m != nil {
		return m.DateFilter
	}
	return nil
}

// What codes are expected
type DataRequirement_CodeFilter struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The code-valued attribute of the filter
	Path     *String                              `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	ValueSet *DataRequirement_CodeFilter_ValueSet `protobuf:"bytes,4,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// What code is expected
	ValueCode []*Code `protobuf:"bytes,5,rep,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
	// What Coding is expected
	ValueCoding []*Coding `protobuf:"bytes,6,rep,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
	// What CodeableConcept is expected
	ValueCodeableConcept []*CodeableConcept `protobuf:"bytes,7,rep,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DataRequirement_CodeFilter) Reset()         { *m = DataRequirement_CodeFilter{} }
func (m *DataRequirement_CodeFilter) String() string { return proto.CompactTextString(m) }
func (*DataRequirement_CodeFilter) ProtoMessage()    {}
func (*DataRequirement_CodeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{3, 0}
}

func (m *DataRequirement_CodeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequirement_CodeFilter.Unmarshal(m, b)
}
func (m *DataRequirement_CodeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequirement_CodeFilter.Marshal(b, m, deterministic)
}
func (m *DataRequirement_CodeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequirement_CodeFilter.Merge(m, src)
}
func (m *DataRequirement_CodeFilter) XXX_Size() int {
	return xxx_messageInfo_DataRequirement_CodeFilter.Size(m)
}
func (m *DataRequirement_CodeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequirement_CodeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequirement_CodeFilter proto.InternalMessageInfo

func (m *DataRequirement_CodeFilter) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetPath() *String {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetValueSet() *DataRequirement_CodeFilter_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetValueCode() []*Code {
	if m != nil {
		return m.ValueCode
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetValueCoding() []*Coding {
	if m != nil {
		return m.ValueCoding
	}
	return nil
}

func (m *DataRequirement_CodeFilter) GetValueCodeableConcept() []*CodeableConcept {
	if m != nil {
		return m.ValueCodeableConcept
	}
	return nil
}

// Valueset for the filter
type DataRequirement_CodeFilter_ValueSet struct {
	// Types that are valid to be assigned to ValueSet:
	//	*DataRequirement_CodeFilter_ValueSet_StringValue
	//	*DataRequirement_CodeFilter_ValueSet_Reference
	ValueSet             isDataRequirement_CodeFilter_ValueSet_ValueSet `protobuf_oneof:"value_set"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *DataRequirement_CodeFilter_ValueSet) Reset()         { *m = DataRequirement_CodeFilter_ValueSet{} }
func (m *DataRequirement_CodeFilter_ValueSet) String() string { return proto.CompactTextString(m) }
func (*DataRequirement_CodeFilter_ValueSet) ProtoMessage()    {}
func (*DataRequirement_CodeFilter_ValueSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{3, 0, 0}
}

func (m *DataRequirement_CodeFilter_ValueSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequirement_CodeFilter_ValueSet.Unmarshal(m, b)
}
func (m *DataRequirement_CodeFilter_ValueSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequirement_CodeFilter_ValueSet.Marshal(b, m, deterministic)
}
func (m *DataRequirement_CodeFilter_ValueSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequirement_CodeFilter_ValueSet.Merge(m, src)
}
func (m *DataRequirement_CodeFilter_ValueSet) XXX_Size() int {
	return xxx_messageInfo_DataRequirement_CodeFilter_ValueSet.Size(m)
}
func (m *DataRequirement_CodeFilter_ValueSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequirement_CodeFilter_ValueSet.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequirement_CodeFilter_ValueSet proto.InternalMessageInfo

type isDataRequirement_CodeFilter_ValueSet_ValueSet interface {
	isDataRequirement_CodeFilter_ValueSet_ValueSet()
}

type DataRequirement_CodeFilter_ValueSet_StringValue struct {
	StringValue *String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type DataRequirement_CodeFilter_ValueSet_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DataRequirement_CodeFilter_ValueSet_StringValue) isDataRequirement_CodeFilter_ValueSet_ValueSet() {
}

func (*DataRequirement_CodeFilter_ValueSet_Reference) isDataRequirement_CodeFilter_ValueSet_ValueSet() {
}

func (m *DataRequirement_CodeFilter_ValueSet) GetValueSet() isDataRequirement_CodeFilter_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (m *DataRequirement_CodeFilter_ValueSet) GetStringValue() *String {
	if x, ok := m.GetValueSet().(*DataRequirement_CodeFilter_ValueSet_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *DataRequirement_CodeFilter_ValueSet) GetReference() *Reference {
	if x, ok := m.GetValueSet().(*DataRequirement_CodeFilter_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataRequirement_CodeFilter_ValueSet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataRequirement_CodeFilter_ValueSet_OneofMarshaler, _DataRequirement_CodeFilter_ValueSet_OneofUnmarshaler, _DataRequirement_CodeFilter_ValueSet_OneofSizer, []interface{}{
		(*DataRequirement_CodeFilter_ValueSet_StringValue)(nil),
		(*DataRequirement_CodeFilter_ValueSet_Reference)(nil),
	}
}

func _DataRequirement_CodeFilter_ValueSet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataRequirement_CodeFilter_ValueSet)
	// value_set
	switch x := m.ValueSet.(type) {
	case *DataRequirement_CodeFilter_ValueSet_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *DataRequirement_CodeFilter_ValueSet_Reference:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataRequirement_CodeFilter_ValueSet.ValueSet has unexpected type %T", x)
	}
	return nil
}

func _DataRequirement_CodeFilter_ValueSet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataRequirement_CodeFilter_ValueSet)
	switch tag {
	case 1: // value_set.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.ValueSet = &DataRequirement_CodeFilter_ValueSet_StringValue{msg}
		return true, err
	case 2: // value_set.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.ValueSet = &DataRequirement_CodeFilter_ValueSet_Reference{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataRequirement_CodeFilter_ValueSet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataRequirement_CodeFilter_ValueSet)
	// value_set
	switch x := m.ValueSet.(type) {
	case *DataRequirement_CodeFilter_ValueSet_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRequirement_CodeFilter_ValueSet_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// What dates/date ranges are expected
type DataRequirement_DateFilter struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The date-valued attribute of the filter
	Path                 *String                           `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Value                *DataRequirement_DateFilter_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DataRequirement_DateFilter) Reset()         { *m = DataRequirement_DateFilter{} }
func (m *DataRequirement_DateFilter) String() string { return proto.CompactTextString(m) }
func (*DataRequirement_DateFilter) ProtoMessage()    {}
func (*DataRequirement_DateFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{3, 1}
}

func (m *DataRequirement_DateFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequirement_DateFilter.Unmarshal(m, b)
}
func (m *DataRequirement_DateFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequirement_DateFilter.Marshal(b, m, deterministic)
}
func (m *DataRequirement_DateFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequirement_DateFilter.Merge(m, src)
}
func (m *DataRequirement_DateFilter) XXX_Size() int {
	return xxx_messageInfo_DataRequirement_DateFilter.Size(m)
}
func (m *DataRequirement_DateFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequirement_DateFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequirement_DateFilter proto.InternalMessageInfo

func (m *DataRequirement_DateFilter) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DataRequirement_DateFilter) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *DataRequirement_DateFilter) GetPath() *String {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *DataRequirement_DateFilter) GetValue() *DataRequirement_DateFilter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// The value of the filter, as a Period, DateTime, or Duration value
type DataRequirement_DateFilter_Value struct {
	// Types that are valid to be assigned to Value:
	//	*DataRequirement_DateFilter_Value_DateTime
	//	*DataRequirement_DateFilter_Value_Period
	//	*DataRequirement_DateFilter_Value_Duration
	Value                isDataRequirement_DateFilter_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *DataRequirement_DateFilter_Value) Reset()         { *m = DataRequirement_DateFilter_Value{} }
func (m *DataRequirement_DateFilter_Value) String() string { return proto.CompactTextString(m) }
func (*DataRequirement_DateFilter_Value) ProtoMessage()    {}
func (*DataRequirement_DateFilter_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{3, 1, 0}
}

func (m *DataRequirement_DateFilter_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequirement_DateFilter_Value.Unmarshal(m, b)
}
func (m *DataRequirement_DateFilter_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequirement_DateFilter_Value.Marshal(b, m, deterministic)
}
func (m *DataRequirement_DateFilter_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequirement_DateFilter_Value.Merge(m, src)
}
func (m *DataRequirement_DateFilter_Value) XXX_Size() int {
	return xxx_messageInfo_DataRequirement_DateFilter_Value.Size(m)
}
func (m *DataRequirement_DateFilter_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequirement_DateFilter_Value.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequirement_DateFilter_Value proto.InternalMessageInfo

type isDataRequirement_DateFilter_Value_Value interface {
	isDataRequirement_DateFilter_Value_Value()
}

type DataRequirement_DateFilter_Value_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DataRequirement_DateFilter_Value_Period struct {
	Period *Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DataRequirement_DateFilter_Value_Duration struct {
	Duration *Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

func (*DataRequirement_DateFilter_Value_DateTime) isDataRequirement_DateFilter_Value_Value() {}

func (*DataRequirement_DateFilter_Value_Period) isDataRequirement_DateFilter_Value_Value() {}

func (*DataRequirement_DateFilter_Value_Duration) isDataRequirement_DateFilter_Value_Value() {}

func (m *DataRequirement_DateFilter_Value) GetValue() isDataRequirement_DateFilter_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DataRequirement_DateFilter_Value) GetDateTime() *DateTime {
	if x, ok := m.GetValue().(*DataRequirement_DateFilter_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *DataRequirement_DateFilter_Value) GetPeriod() *Period {
	if x, ok := m.GetValue().(*DataRequirement_DateFilter_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (m *DataRequirement_DateFilter_Value) GetDuration() *Duration {
	if x, ok := m.GetValue().(*DataRequirement_DateFilter_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataRequirement_DateFilter_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataRequirement_DateFilter_Value_OneofMarshaler, _DataRequirement_DateFilter_Value_OneofUnmarshaler, _DataRequirement_DateFilter_Value_OneofSizer, []interface{}{
		(*DataRequirement_DateFilter_Value_DateTime)(nil),
		(*DataRequirement_DateFilter_Value_Period)(nil),
		(*DataRequirement_DateFilter_Value_Duration)(nil),
	}
}

func _DataRequirement_DateFilter_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataRequirement_DateFilter_Value)
	// value
	switch x := m.Value.(type) {
	case *DataRequirement_DateFilter_Value_DateTime:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *DataRequirement_DateFilter_Value_Period:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *DataRequirement_DateFilter_Value_Duration:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataRequirement_DateFilter_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _DataRequirement_DateFilter_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataRequirement_DateFilter_Value)
	switch tag {
	case 1: // value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.Value = &DataRequirement_DateFilter_Value_DateTime{msg}
		return true, err
	case 2: // value.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Value = &DataRequirement_DateFilter_Value_Period{msg}
		return true, err
	case 3: // value.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Value = &DataRequirement_DateFilter_Value_Duration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataRequirement_DateFilter_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataRequirement_DateFilter_Value)
	// value
	switch x := m.Value.(type) {
	case *DataRequirement_DateFilter_Value_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRequirement_DateFilter_Value_Period:
		s := proto.Size(x.Period)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRequirement_DateFilter_Value_Duration:
		s := proto.Size(x.Duration)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Auto-generated from StructureDefinition for Element.
// Base for all elements.
// See http://hl7.org/fhir/StructureDefinition/Element
type Element struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension            []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Element) Reset()         { *m = Element{} }
func (m *Element) String() string { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()    {}
func (*Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{4}
}

func (m *Element) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Element.Unmarshal(m, b)
}
func (m *Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Element.Marshal(b, m, deterministic)
}
func (m *Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Element.Merge(m, src)
}
func (m *Element) XXX_Size() int {
	return xxx_messageInfo_Element.Size(m)
}
func (m *Element) XXX_DiscardUnknown() {
	xxx_messageInfo_Element.DiscardUnknown(m)
}

var xxx_messageInfo_Element proto.InternalMessageInfo

func (m *Element) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Element) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ElementDefinition.
// Definition of an element in a resource or extension.
// See http://hl7.org/fhir/StructureDefinition/ElementDefinition
type ElementDefinition struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path of the element in the hierarchy of elements
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// xmlAttr | xmlText | typeAttr | cdaText | xhtml
	Representation []*PropertyRepresentationCode `protobuf:"bytes,4,rep,name=representation,proto3" json:"representation,omitempty"`
	// Name for this particular element (in a set of slices)
	SliceName *String `protobuf:"bytes,5,opt,name=slice_name,json=sliceName,proto3" json:"slice_name,omitempty"`
	// Name for element to display with or prompt for element
	Label *String `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Corresponding codes in terminologies
	Code    []*Coding                  `protobuf:"bytes,7,rep,name=code,proto3" json:"code,omitempty"`
	Slicing *ElementDefinition_Slicing `protobuf:"bytes,8,opt,name=slicing,proto3" json:"slicing,omitempty"`
	// Concise definition for space-constrained presentation
	Short *String `protobuf:"bytes,9,opt,name=short,proto3" json:"short,omitempty"`
	// Full formal definition as narrative text
	Definition *Markdown `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
	// Comments about the use of this element
	Comment *Markdown `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// Why this resource has been created
	Requirements *Markdown `protobuf:"bytes,12,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Other names
	Alias []*String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// Minimum Cardinality
	Min *UnsignedInt `protobuf:"bytes,14,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max  *String                 `protobuf:"bytes,15,opt,name=max,proto3" json:"max,omitempty"`
	Base *ElementDefinition_Base `protobuf:"bytes,16,opt,name=base,proto3" json:"base,omitempty"`
	// Reference to definition of content for the element
	ContentReference *Uri                            `protobuf:"bytes,17,opt,name=content_reference,json=contentReference,proto3" json:"content_reference,omitempty"`
	Type             []*ElementDefinition_TypeRef    `protobuf:"bytes,18,rep,name=type,proto3" json:"type,omitempty"`
	DefaultValue     *ElementDefinition_DefaultValue `protobuf:"bytes,19,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Implicit meaning when this element is missing
	MeaningWhenMissing *Markdown `protobuf:"bytes,20,opt,name=meaning_when_missing,json=meaningWhenMissing,proto3" json:"meaning_when_missing,omitempty"`
	// What the order of the elements means
	OrderMeaning *String                      `protobuf:"bytes,21,opt,name=order_meaning,json=orderMeaning,proto3" json:"order_meaning,omitempty"`
	Fixed        *ElementDefinition_Fixed     `protobuf:"bytes,22,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Pattern      *ElementDefinition_Pattern   `protobuf:"bytes,23,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Example      []*ElementDefinition_Example `protobuf:"bytes,24,rep,name=example,proto3" json:"example,omitempty"`
	MinValue     *ElementDefinition_MinValue  `protobuf:"bytes,25,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue     *ElementDefinition_MaxValue  `protobuf:"bytes,26,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Max length for strings
	MaxLength *Integer `protobuf:"bytes,27,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Reference to invariant about presence
	Condition  []*Id                           `protobuf:"bytes,28,rep,name=condition,proto3" json:"condition,omitempty"`
	Constraint []*ElementDefinition_Constraint `protobuf:"bytes,29,rep,name=constraint,proto3" json:"constraint,omitempty"`
	// If the element must supported
	MustSupport *Boolean `protobuf:"bytes,30,opt,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	// If this modifies the meaning of other elements
	IsModifier *Boolean `protobuf:"bytes,31,opt,name=is_modifier,json=isModifier,proto3" json:"is_modifier,omitempty"`
	// Include when _summary = true?
	IsSummary            *Boolean                                    `protobuf:"bytes,32,opt,name=is_summary,json=isSummary,proto3" json:"is_summary,omitempty"`
	Binding              *ElementDefinition_ElementDefinitionBinding `protobuf:"bytes,33,opt,name=binding,proto3" json:"binding,omitempty"`
	Mapping              []*ElementDefinition_Mapping                `protobuf:"bytes,34,rep,name=mapping,proto3" json:"mapping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ElementDefinition) Reset()         { *m = ElementDefinition{} }
func (m *ElementDefinition) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition) ProtoMessage()    {}
func (*ElementDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5}
}

func (m *ElementDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition.Unmarshal(m, b)
}
func (m *ElementDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition.Marshal(b, m, deterministic)
}
func (m *ElementDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition.Merge(m, src)
}
func (m *ElementDefinition) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition.Size(m)
}
func (m *ElementDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition proto.InternalMessageInfo

func (m *ElementDefinition) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition) GetPath() *String {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ElementDefinition) GetRepresentation() []*PropertyRepresentationCode {
	if m != nil {
		return m.Representation
	}
	return nil
}

func (m *ElementDefinition) GetSliceName() *String {
	if m != nil {
		return m.SliceName
	}
	return nil
}

func (m *ElementDefinition) GetLabel() *String {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ElementDefinition) GetCode() []*Coding {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ElementDefinition) GetSlicing() *ElementDefinition_Slicing {
	if m != nil {
		return m.Slicing
	}
	return nil
}

func (m *ElementDefinition) GetShort() *String {
	if m != nil {
		return m.Short
	}
	return nil
}

func (m *ElementDefinition) GetDefinition() *Markdown {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *ElementDefinition) GetComment() *Markdown {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *ElementDefinition) GetRequirements() *Markdown {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *ElementDefinition) GetAlias() []*String {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *ElementDefinition) GetMin() *UnsignedInt {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *ElementDefinition) GetMax() *String {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *ElementDefinition) GetBase() *ElementDefinition_Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ElementDefinition) GetContentReference() *Uri {
	if m != nil {
		return m.ContentReference
	}
	return nil
}

func (m *ElementDefinition) GetType() []*ElementDefinition_TypeRef {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ElementDefinition) GetDefaultValue() *ElementDefinition_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *ElementDefinition) GetMeaningWhenMissing() *Markdown {
	if m != nil {
		return m.MeaningWhenMissing
	}
	return nil
}

func (m *ElementDefinition) GetOrderMeaning() *String {
	if m != nil {
		return m.OrderMeaning
	}
	return nil
}

func (m *ElementDefinition) GetFixed() *ElementDefinition_Fixed {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (m *ElementDefinition) GetPattern() *ElementDefinition_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ElementDefinition) GetExample() []*ElementDefinition_Example {
	if m != nil {
		return m.Example
	}
	return nil
}

func (m *ElementDefinition) GetMinValue() *ElementDefinition_MinValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *ElementDefinition) GetMaxValue() *ElementDefinition_MaxValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (m *ElementDefinition) GetMaxLength() *Integer {
	if m != nil {
		return m.MaxLength
	}
	return nil
}

func (m *ElementDefinition) GetCondition() []*Id {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ElementDefinition) GetConstraint() []*ElementDefinition_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *ElementDefinition) GetMustSupport() *Boolean {
	if m != nil {
		return m.MustSupport
	}
	return nil
}

func (m *ElementDefinition) GetIsModifier() *Boolean {
	if m != nil {
		return m.IsModifier
	}
	return nil
}

func (m *ElementDefinition) GetIsSummary() *Boolean {
	if m != nil {
		return m.IsSummary
	}
	return nil
}

func (m *ElementDefinition) GetBinding() *ElementDefinition_ElementDefinitionBinding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (m *ElementDefinition) GetMapping() []*ElementDefinition_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

// This element is sliced - slices follow
type ElementDefinition_Slicing struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension     []*Extension                               `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Discriminator []*ElementDefinition_Slicing_Discriminator `protobuf:"bytes,3,rep,name=discriminator,proto3" json:"discriminator,omitempty"`
	// Text description of how slicing works (or not)
	Description *String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// If elements must be in same order as slices
	Ordered *Boolean `protobuf:"bytes,5,opt,name=ordered,proto3" json:"ordered,omitempty"`
	// closed | open | openAtEnd
	Rules                *SlicingRulesCode `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ElementDefinition_Slicing) Reset()         { *m = ElementDefinition_Slicing{} }
func (m *ElementDefinition_Slicing) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Slicing) ProtoMessage()    {}
func (*ElementDefinition_Slicing) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 0}
}

func (m *ElementDefinition_Slicing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Slicing.Unmarshal(m, b)
}
func (m *ElementDefinition_Slicing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Slicing.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Slicing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Slicing.Merge(m, src)
}
func (m *ElementDefinition_Slicing) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Slicing.Size(m)
}
func (m *ElementDefinition_Slicing) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Slicing.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Slicing proto.InternalMessageInfo

func (m *ElementDefinition_Slicing) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Slicing) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Slicing) GetDiscriminator() []*ElementDefinition_Slicing_Discriminator {
	if m != nil {
		return m.Discriminator
	}
	return nil
}

func (m *ElementDefinition_Slicing) GetDescription() *String {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ElementDefinition_Slicing) GetOrdered() *Boolean {
	if m != nil {
		return m.Ordered
	}
	return nil
}

func (m *ElementDefinition_Slicing) GetRules() *SlicingRulesCode {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Element values that are used to distinguish the slices
type ElementDefinition_Slicing_Discriminator struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// value | exists | pattern | type | profile
	Type *DiscriminatorTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Path to element value
	Path                 *String  `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElementDefinition_Slicing_Discriminator) Reset() {
	*m = ElementDefinition_Slicing_Discriminator{}
}
func (m *ElementDefinition_Slicing_Discriminator) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Slicing_Discriminator) ProtoMessage()    {}
func (*ElementDefinition_Slicing_Discriminator) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 0, 0}
}

func (m *ElementDefinition_Slicing_Discriminator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Slicing_Discriminator.Unmarshal(m, b)
}
func (m *ElementDefinition_Slicing_Discriminator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Slicing_Discriminator.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Slicing_Discriminator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Slicing_Discriminator.Merge(m, src)
}
func (m *ElementDefinition_Slicing_Discriminator) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Slicing_Discriminator.Size(m)
}
func (m *ElementDefinition_Slicing_Discriminator) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Slicing_Discriminator.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Slicing_Discriminator proto.InternalMessageInfo

func (m *ElementDefinition_Slicing_Discriminator) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Slicing_Discriminator) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Slicing_Discriminator) GetType() *DiscriminatorTypeCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ElementDefinition_Slicing_Discriminator) GetPath() *String {
	if m != nil {
		return m.Path
	}
	return nil
}

// Base definition information for tools
type ElementDefinition_Base struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path that identifies the base element
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Min cardinality of the base element
	Min *UnsignedInt `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	// Max cardinality of the base element
	Max                  *String  `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElementDefinition_Base) Reset()         { *m = ElementDefinition_Base{} }
func (m *ElementDefinition_Base) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Base) ProtoMessage()    {}
func (*ElementDefinition_Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 1}
}

func (m *ElementDefinition_Base) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Base.Unmarshal(m, b)
}
func (m *ElementDefinition_Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Base.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Base.Merge(m, src)
}
func (m *ElementDefinition_Base) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Base.Size(m)
}
func (m *ElementDefinition_Base) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Base.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Base proto.InternalMessageInfo

func (m *ElementDefinition_Base) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Base) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Base) GetPath() *String {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ElementDefinition_Base) GetMin() *UnsignedInt {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *ElementDefinition_Base) GetMax() *String {
	if m != nil {
		return m.Max
	}
	return nil
}

// Data type and Profile for this element
type ElementDefinition_TypeRef struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Data type or Resource (reference to definition)
	Code *Uri `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Profile (StructureDefinition) to apply (or IG)
	Profile *Uri `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// Profile (StructureDefinition) to apply to reference target (or IG)
	TargetProfile *Uri `protobuf:"bytes,5,opt,name=target_profile,json=targetProfile,proto3" json:"target_profile,omitempty"`
	// contained | referenced | bundled - how aggregated
	Aggregation []*AggregationModeCode `protobuf:"bytes,6,rep,name=aggregation,proto3" json:"aggregation,omitempty"`
	// either | independent | specific
	Versioning           *ReferenceVersionRulesCode `protobuf:"bytes,7,opt,name=versioning,proto3" json:"versioning,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ElementDefinition_TypeRef) Reset()         { *m = ElementDefinition_TypeRef{} }
func (m *ElementDefinition_TypeRef) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_TypeRef) ProtoMessage()    {}
func (*ElementDefinition_TypeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 2}
}

func (m *ElementDefinition_TypeRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_TypeRef.Unmarshal(m, b)
}
func (m *ElementDefinition_TypeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_TypeRef.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_TypeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_TypeRef.Merge(m, src)
}
func (m *ElementDefinition_TypeRef) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_TypeRef.Size(m)
}
func (m *ElementDefinition_TypeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_TypeRef.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_TypeRef proto.InternalMessageInfo

func (m *ElementDefinition_TypeRef) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetCode() *Uri {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetProfile() *Uri {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetTargetProfile() *Uri {
	if m != nil {
		return m.TargetProfile
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetAggregation() []*AggregationModeCode {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *ElementDefinition_TypeRef) GetVersioning() *ReferenceVersionRulesCode {
	if m != nil {
		return m.Versioning
	}
	return nil
}

// Specified value if missing from instance
type ElementDefinition_DefaultValue struct {
	// Types that are valid to be assigned to DefaultValue:
	//	*ElementDefinition_DefaultValue_Base64Binary
	//	*ElementDefinition_DefaultValue_Boolean
	//	*ElementDefinition_DefaultValue_Code
	//	*ElementDefinition_DefaultValue_Date
	//	*ElementDefinition_DefaultValue_DateTime
	//	*ElementDefinition_DefaultValue_Decimal
	//	*ElementDefinition_DefaultValue_Id
	//	*ElementDefinition_DefaultValue_Instant
	//	*ElementDefinition_DefaultValue_Integer
	//	*ElementDefinition_DefaultValue_Markdown
	//	*ElementDefinition_DefaultValue_Oid
	//	*ElementDefinition_DefaultValue_PositiveInt
	//	*ElementDefinition_DefaultValue_StringValue
	//	*ElementDefinition_DefaultValue_Time
	//	*ElementDefinition_DefaultValue_UnsignedInt
	//	*ElementDefinition_DefaultValue_Uri
	//	*ElementDefinition_DefaultValue_Address
	//	*ElementDefinition_DefaultValue_Age
	//	*ElementDefinition_DefaultValue_Annotation
	//	*ElementDefinition_DefaultValue_Attachment
	//	*ElementDefinition_DefaultValue_CodeableConcept
	//	*ElementDefinition_DefaultValue_Coding
	//	*ElementDefinition_DefaultValue_ContactPoint
	//	*ElementDefinition_DefaultValue_Count
	//	*ElementDefinition_DefaultValue_Distance
	//	*ElementDefinition_DefaultValue_Duration
	//	*ElementDefinition_DefaultValue_HumanName
	//	*ElementDefinition_DefaultValue_Identifier
	//	*ElementDefinition_DefaultValue_Money
	//	*ElementDefinition_DefaultValue_Period
	//	*ElementDefinition_DefaultValue_Quantity
	//	*ElementDefinition_DefaultValue_Range
	//	*ElementDefinition_DefaultValue_Ratio
	//	*ElementDefinition_DefaultValue_Reference
	//	*ElementDefinition_DefaultValue_SampledData
	//	*ElementDefinition_DefaultValue_Signature
	//	*ElementDefinition_DefaultValue_Timing
	//	*ElementDefinition_DefaultValue_Meta
	DefaultValue         isElementDefinition_DefaultValue_DefaultValue `protobuf_oneof:"default_value"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *ElementDefinition_DefaultValue) Reset()         { *m = ElementDefinition_DefaultValue{} }
func (m *ElementDefinition_DefaultValue) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_DefaultValue) ProtoMessage()    {}
func (*ElementDefinition_DefaultValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 3}
}

func (m *ElementDefinition_DefaultValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_DefaultValue.Unmarshal(m, b)
}
func (m *ElementDefinition_DefaultValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_DefaultValue.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_DefaultValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_DefaultValue.Merge(m, src)
}
func (m *ElementDefinition_DefaultValue) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_DefaultValue.Size(m)
}
func (m *ElementDefinition_DefaultValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_DefaultValue.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_DefaultValue proto.InternalMessageInfo

type isElementDefinition_DefaultValue_DefaultValue interface {
	isElementDefinition_DefaultValue_DefaultValue()
}

type ElementDefinition_DefaultValue_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_DefaultValue_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_DefaultValue_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_DefaultValue_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_DefaultValue_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_DefaultValue_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_DefaultValue_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_DefaultValue_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_DefaultValue_Base64Binary) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Boolean) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Code) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Date) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_DateTime) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Decimal) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Id) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Instant) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Integer) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Markdown) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Oid) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_PositiveInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_StringValue) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Time) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_UnsignedInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Uri) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Address) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Age) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Annotation) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Attachment) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_CodeableConcept) isElementDefinition_DefaultValue_DefaultValue() {
}

func (*ElementDefinition_DefaultValue_Coding) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_ContactPoint) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Count) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Distance) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Duration) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_HumanName) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Identifier) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Money) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Period) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Quantity) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Range) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Ratio) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Reference) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_SampledData) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Signature) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Timing) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Meta) isElementDefinition_DefaultValue_DefaultValue() {}

func (m *ElementDefinition_DefaultValue) GetDefaultValue() isElementDefinition_DefaultValue_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetBase64Binary() *Base64Binary {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetBoolean() *Boolean {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetCode() *Code {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Code); ok {
		return x.Code
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetDate() *Date {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetDateTime() *DateTime {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetDecimal() *Decimal {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetId() *Id {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Id); ok {
		return x.Id
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetInstant() *Instant {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetInteger() *Integer {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetMarkdown() *Markdown {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetOid() *Oid {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetStringValue() *String {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetTime() *Time {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetUri() *Uri {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetAddress() *Address {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetAge() *Age {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Age); ok {
		return x.Age
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetAnnotation() *Annotation {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetAttachment() *Attachment {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetCoding() *Coding {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetContactPoint() *ContactPoint {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetCount() *Count {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Count); ok {
		return x.Count
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetDistance() *Distance {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Distance); ok {
		return x.Distance
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetDuration() *Duration {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetHumanName() *HumanName {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetIdentifier() *Identifier {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetMoney() *Money {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Money); ok {
		return x.Money
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetPeriod() *Period {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Period); ok {
		return x.Period
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetQuantity() *Quantity {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetRange() *Range {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Range); ok {
		return x.Range
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetRatio() *Ratio {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetReference() *Reference {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetSampledData() *SampledData {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetSignature() *Signature {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetTiming() *Timing {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *ElementDefinition_DefaultValue) GetMeta() *Meta {
	if x, ok := m.GetDefaultValue().(*ElementDefinition_DefaultValue_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_DefaultValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_DefaultValue_OneofMarshaler, _ElementDefinition_DefaultValue_OneofUnmarshaler, _ElementDefinition_DefaultValue_OneofSizer, []interface{}{
		(*ElementDefinition_DefaultValue_Base64Binary)(nil),
		(*ElementDefinition_DefaultValue_Boolean)(nil),
		(*ElementDefinition_DefaultValue_Code)(nil),
		(*ElementDefinition_DefaultValue_Date)(nil),
		(*ElementDefinition_DefaultValue_DateTime)(nil),
		(*ElementDefinition_DefaultValue_Decimal)(nil),
		(*ElementDefinition_DefaultValue_Id)(nil),
		(*ElementDefinition_DefaultValue_Instant)(nil),
		(*ElementDefinition_DefaultValue_Integer)(nil),
		(*ElementDefinition_DefaultValue_Markdown)(nil),
		(*ElementDefinition_DefaultValue_Oid)(nil),
		(*ElementDefinition_DefaultValue_PositiveInt)(nil),
		(*ElementDefinition_DefaultValue_StringValue)(nil),
		(*ElementDefinition_DefaultValue_Time)(nil),
		(*ElementDefinition_DefaultValue_UnsignedInt)(nil),
		(*ElementDefinition_DefaultValue_Uri)(nil),
		(*ElementDefinition_DefaultValue_Address)(nil),
		(*ElementDefinition_DefaultValue_Age)(nil),
		(*ElementDefinition_DefaultValue_Annotation)(nil),
		(*ElementDefinition_DefaultValue_Attachment)(nil),
		(*ElementDefinition_DefaultValue_CodeableConcept)(nil),
		(*ElementDefinition_DefaultValue_Coding)(nil),
		(*ElementDefinition_DefaultValue_ContactPoint)(nil),
		(*ElementDefinition_DefaultValue_Count)(nil),
		(*ElementDefinition_DefaultValue_Distance)(nil),
		(*ElementDefinition_DefaultValue_Duration)(nil),
		(*ElementDefinition_DefaultValue_HumanName)(nil),
		(*ElementDefinition_DefaultValue_Identifier)(nil),
		(*ElementDefinition_DefaultValue_Money)(nil),
		(*ElementDefinition_DefaultValue_Period)(nil),
		(*ElementDefinition_DefaultValue_Quantity)(nil),
		(*ElementDefinition_DefaultValue_Range)(nil),
		(*ElementDefinition_DefaultValue_Ratio)(nil),
		(*ElementDefinition_DefaultValue_Reference)(nil),
		(*ElementDefinition_DefaultValue_SampledData)(nil),
		(*ElementDefinition_DefaultValue_Signature)(nil),
		(*ElementDefinition_DefaultValue_Timing)(nil),
		(*ElementDefinition_DefaultValue_Meta)(nil),
	}
}

func _ElementDefinition_DefaultValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_DefaultValue)
	// default_value
	switch x := m.DefaultValue.(type) {
	case *ElementDefinition_DefaultValue_Base64Binary:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base64Binary); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Boolean:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Code:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Date:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_DateTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Decimal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Id:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Id); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Instant:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Integer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Markdown:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Markdown); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Oid:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oid); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_PositiveInt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_StringValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Time:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_UnsignedInt:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Uri:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Address:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Age:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Age); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Annotation:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Attachment:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attachment); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_CodeableConcept:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Coding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coding); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_ContactPoint:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactPoint); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Count:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Count); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Distance:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distance); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Duration:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_HumanName:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanName); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Identifier:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identifier); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Money:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Money); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Period:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Quantity:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Range:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Ratio:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Reference:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_SampledData:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SampledData); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Signature:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signature); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Timing:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *ElementDefinition_DefaultValue_Meta:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_DefaultValue.DefaultValue has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_DefaultValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_DefaultValue)
	switch tag {
	case 1: // default_value.base64_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Base64Binary)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Base64Binary{msg}
		return true, err
	case 2: // default_value.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Boolean{msg}
		return true, err
	case 3: // default_value.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Code{msg}
		return true, err
	case 4: // default_value.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Date{msg}
		return true, err
	case 5: // default_value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_DateTime{msg}
		return true, err
	case 6: // default_value.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Decimal{msg}
		return true, err
	case 7: // default_value.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Id)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Id{msg}
		return true, err
	case 8: // default_value.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Instant{msg}
		return true, err
	case 9: // default_value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Integer{msg}
		return true, err
	case 10: // default_value.markdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Markdown)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Markdown{msg}
		return true, err
	case 11: // default_value.oid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oid)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Oid{msg}
		return true, err
	case 12: // default_value.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_PositiveInt{msg}
		return true, err
	case 13: // default_value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_StringValue{msg}
		return true, err
	case 14: // default_value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Time{msg}
		return true, err
	case 15: // default_value.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_UnsignedInt{msg}
		return true, err
	case 16: // default_value.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Uri{msg}
		return true, err
	case 17: // default_value.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Address)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Address{msg}
		return true, err
	case 18: // default_value.age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Age)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Age{msg}
		return true, err
	case 19: // default_value.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Annotation)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Annotation{msg}
		return true, err
	case 20: // default_value.attachment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attachment)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Attachment{msg}
		return true, err
	case 21: // default_value.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_CodeableConcept{msg}
		return true, err
	case 22: // default_value.coding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Coding)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Coding{msg}
		return true, err
	case 23: // default_value.contact_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactPoint)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_ContactPoint{msg}
		return true, err
	case 24: // default_value.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Count)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Count{msg}
		return true, err
	case 25: // default_value.distance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distance)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Distance{msg}
		return true, err
	case 26: // default_value.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Duration{msg}
		return true, err
	case 27: // default_value.human_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanName)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_HumanName{msg}
		return true, err
	case 28: // default_value.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Identifier)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Identifier{msg}
		return true, err
	case 29: // default_value.money
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Money)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Money{msg}
		return true, err
	case 30: // default_value.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Period{msg}
		return true, err
	case 31: // default_value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Quantity{msg}
		return true, err
	case 32: // default_value.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Range{msg}
		return true, err
	case 33: // default_value.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Ratio{msg}
		return true, err
	case 34: // default_value.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Reference{msg}
		return true, err
	case 35: // default_value.sampled_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SampledData)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_SampledData{msg}
		return true, err
	case 36: // default_value.signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signature)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Signature{msg}
		return true, err
	case 37: // default_value.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Timing{msg}
		return true, err
	case 38: // default_value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Meta)
		err := b.DecodeMessage(msg)
		m.DefaultValue = &ElementDefinition_DefaultValue_Meta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_DefaultValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_DefaultValue)
	// default_value
	switch x := m.DefaultValue.(type) {
	case *ElementDefinition_DefaultValue_Base64Binary:
		s := proto.Size(x.Base64Binary)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Code:
		s := proto.Size(x.Code)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Id:
		s := proto.Size(x.Id)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Markdown:
		s := proto.Size(x.Markdown)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Oid:
		s := proto.Size(x.Oid)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Uri:
		s := proto.Size(x.Uri)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Address:
		s := proto.Size(x.Address)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Age:
		s := proto.Size(x.Age)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Annotation:
		s := proto.Size(x.Annotation)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Attachment:
		s := proto.Size(x.Attachment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Coding:
		s := proto.Size(x.Coding)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_ContactPoint:
		s := proto.Size(x.ContactPoint)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Count:
		s := proto.Size(x.Count)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Distance:
		s := proto.Size(x.Distance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Duration:
		s := proto.Size(x.Duration)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_HumanName:
		s := proto.Size(x.HumanName)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Identifier:
		s := proto.Size(x.Identifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Money:
		s := proto.Size(x.Money)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Period:
		s := proto.Size(x.Period)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Quantity:
		s := proto.Size(x.Quantity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Ratio:
		s := proto.Size(x.Ratio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Reference:
		s := proto.Size(x.Reference)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_SampledData:
		s := proto.Size(x.SampledData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Signature:
		s := proto.Size(x.Signature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Timing:
		s := proto.Size(x.Timing)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_DefaultValue_Meta:
		s := proto.Size(x.Meta)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Value must be exactly this
type ElementDefinition_Fixed struct {
	// Types that are valid to be assigned to Fixed:
	//	*ElementDefinition_Fixed_Base64Binary
	//	*ElementDefinition_Fixed_Boolean
	//	*ElementDefinition_Fixed_Code
	//	*ElementDefinition_Fixed_Date
	//	*ElementDefinition_Fixed_DateTime
	//	*ElementDefinition_Fixed_Decimal
	//	*ElementDefinition_Fixed_Id
	//	*ElementDefinition_Fixed_Instant
	//	*ElementDefinition_Fixed_Integer
	//	*ElementDefinition_Fixed_Markdown
	//	*ElementDefinition_Fixed_Oid
	//	*ElementDefinition_Fixed_PositiveInt
	//	*ElementDefinition_Fixed_StringValue
	//	*ElementDefinition_Fixed_Time
	//	*ElementDefinition_Fixed_UnsignedInt
	//	*ElementDefinition_Fixed_Uri
	//	*ElementDefinition_Fixed_Address
	//	*ElementDefinition_Fixed_Age
	//	*ElementDefinition_Fixed_Annotation
	//	*ElementDefinition_Fixed_Attachment
	//	*ElementDefinition_Fixed_CodeableConcept
	//	*ElementDefinition_Fixed_Coding
	//	*ElementDefinition_Fixed_ContactPoint
	//	*ElementDefinition_Fixed_Count
	//	*ElementDefinition_Fixed_Distance
	//	*ElementDefinition_Fixed_Duration
	//	*ElementDefinition_Fixed_HumanName
	//	*ElementDefinition_Fixed_Identifier
	//	*ElementDefinition_Fixed_Money
	//	*ElementDefinition_Fixed_Period
	//	*ElementDefinition_Fixed_Quantity
	//	*ElementDefinition_Fixed_Range
	//	*ElementDefinition_Fixed_Ratio
	//	*ElementDefinition_Fixed_Reference
	//	*ElementDefinition_Fixed_SampledData
	//	*ElementDefinition_Fixed_Signature
	//	*ElementDefinition_Fixed_Timing
	//	*ElementDefinition_Fixed_Meta
	Fixed                isElementDefinition_Fixed_Fixed `protobuf_oneof:"fixed"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ElementDefinition_Fixed) Reset()         { *m = ElementDefinition_Fixed{} }
func (m *ElementDefinition_Fixed) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Fixed) ProtoMessage()    {}
func (*ElementDefinition_Fixed) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 4}
}

func (m *ElementDefinition_Fixed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Fixed.Unmarshal(m, b)
}
func (m *ElementDefinition_Fixed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Fixed.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Fixed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Fixed.Merge(m, src)
}
func (m *ElementDefinition_Fixed) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Fixed.Size(m)
}
func (m *ElementDefinition_Fixed) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Fixed.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Fixed proto.InternalMessageInfo

type isElementDefinition_Fixed_Fixed interface {
	isElementDefinition_Fixed_Fixed()
}

type ElementDefinition_Fixed_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Fixed_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Fixed_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Fixed_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Fixed_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Fixed_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Fixed_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Fixed_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Fixed_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Fixed_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Fixed_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Fixed_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Fixed_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Fixed_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Fixed_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Fixed_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Fixed_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Fixed_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Fixed_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Fixed_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Fixed_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Fixed_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Fixed_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Fixed_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Fixed_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Fixed_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Fixed_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Fixed_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Fixed_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Fixed_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Fixed_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Fixed_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Fixed_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Fixed_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Fixed_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Fixed_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Fixed_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Fixed_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Fixed_Base64Binary) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Boolean) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Code) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Date) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_DateTime) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Decimal) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Id) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Instant) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Integer) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Markdown) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Oid) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_PositiveInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_StringValue) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Time) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_UnsignedInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Uri) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Address) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Age) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Annotation) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Attachment) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_CodeableConcept) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Coding) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_ContactPoint) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Count) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Distance) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Duration) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_HumanName) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Identifier) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Money) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Period) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Quantity) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Range) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Ratio) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Reference) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_SampledData) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Signature) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Timing) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Meta) isElementDefinition_Fixed_Fixed() {}

func (m *ElementDefinition_Fixed) GetFixed() isElementDefinition_Fixed_Fixed {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetBase64Binary() *Base64Binary {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetBoolean() *Boolean {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetCode() *Code {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Code); ok {
		return x.Code
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetDate() *Date {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetDateTime() *DateTime {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetDecimal() *Decimal {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetId() *Id {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Id); ok {
		return x.Id
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetInstant() *Instant {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetInteger() *Integer {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetMarkdown() *Markdown {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetOid() *Oid {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Oid); ok {
		return x.Oid
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetStringValue() *String {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetTime() *Time {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetUri() *Uri {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetAddress() *Address {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetAge() *Age {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Age); ok {
		return x.Age
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetAnnotation() *Annotation {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetAttachment() *Attachment {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetCoding() *Coding {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Coding); ok {
		return x.Coding
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetContactPoint() *ContactPoint {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetCount() *Count {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Count); ok {
		return x.Count
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetDistance() *Distance {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Distance); ok {
		return x.Distance
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetDuration() *Duration {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetHumanName() *HumanName {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetIdentifier() *Identifier {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetMoney() *Money {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Money); ok {
		return x.Money
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetPeriod() *Period {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Period); ok {
		return x.Period
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetQuantity() *Quantity {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetRange() *Range {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Range); ok {
		return x.Range
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetRatio() *Ratio {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetReference() *Reference {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetSampledData() *SampledData {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetSignature() *Signature {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Signature); ok {
		return x.Signature
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetTiming() *Timing {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *ElementDefinition_Fixed) GetMeta() *Meta {
	if x, ok := m.GetFixed().(*ElementDefinition_Fixed_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_Fixed) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_Fixed_OneofMarshaler, _ElementDefinition_Fixed_OneofUnmarshaler, _ElementDefinition_Fixed_OneofSizer, []interface{}{
		(*ElementDefinition_Fixed_Base64Binary)(nil),
		(*ElementDefinition_Fixed_Boolean)(nil),
		(*ElementDefinition_Fixed_Code)(nil),
		(*ElementDefinition_Fixed_Date)(nil),
		(*ElementDefinition_Fixed_DateTime)(nil),
		(*ElementDefinition_Fixed_Decimal)(nil),
		(*ElementDefinition_Fixed_Id)(nil),
		(*ElementDefinition_Fixed_Instant)(nil),
		(*ElementDefinition_Fixed_Integer)(nil),
		(*ElementDefinition_Fixed_Markdown)(nil),
		(*ElementDefinition_Fixed_Oid)(nil),
		(*ElementDefinition_Fixed_PositiveInt)(nil),
		(*ElementDefinition_Fixed_StringValue)(nil),
		(*ElementDefinition_Fixed_Time)(nil),
		(*ElementDefinition_Fixed_UnsignedInt)(nil),
		(*ElementDefinition_Fixed_Uri)(nil),
		(*ElementDefinition_Fixed_Address)(nil),
		(*ElementDefinition_Fixed_Age)(nil),
		(*ElementDefinition_Fixed_Annotation)(nil),
		(*ElementDefinition_Fixed_Attachment)(nil),
		(*ElementDefinition_Fixed_CodeableConcept)(nil),
		(*ElementDefinition_Fixed_Coding)(nil),
		(*ElementDefinition_Fixed_ContactPoint)(nil),
		(*ElementDefinition_Fixed_Count)(nil),
		(*ElementDefinition_Fixed_Distance)(nil),
		(*ElementDefinition_Fixed_Duration)(nil),
		(*ElementDefinition_Fixed_HumanName)(nil),
		(*ElementDefinition_Fixed_Identifier)(nil),
		(*ElementDefinition_Fixed_Money)(nil),
		(*ElementDefinition_Fixed_Period)(nil),
		(*ElementDefinition_Fixed_Quantity)(nil),
		(*ElementDefinition_Fixed_Range)(nil),
		(*ElementDefinition_Fixed_Ratio)(nil),
		(*ElementDefinition_Fixed_Reference)(nil),
		(*ElementDefinition_Fixed_SampledData)(nil),
		(*ElementDefinition_Fixed_Signature)(nil),
		(*ElementDefinition_Fixed_Timing)(nil),
		(*ElementDefinition_Fixed_Meta)(nil),
	}
}

func _ElementDefinition_Fixed_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_Fixed)
	// fixed
	switch x := m.Fixed.(type) {
	case *ElementDefinition_Fixed_Base64Binary:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base64Binary); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Boolean:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Code:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Date:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_DateTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Decimal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Id:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Id); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Instant:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Integer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Markdown:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Markdown); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Oid:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oid); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_PositiveInt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_StringValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Time:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_UnsignedInt:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Uri:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Address:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Age:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Age); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Annotation:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Attachment:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attachment); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_CodeableConcept:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Coding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coding); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_ContactPoint:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactPoint); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Count:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Count); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Distance:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distance); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Duration:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_HumanName:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanName); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Identifier:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identifier); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Money:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Money); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Period:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Quantity:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Range:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Ratio:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Reference:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_SampledData:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SampledData); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Signature:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signature); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Timing:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *ElementDefinition_Fixed_Meta:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_Fixed.Fixed has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_Fixed_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_Fixed)
	switch tag {
	case 1: // fixed.base64_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Base64Binary)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Base64Binary{msg}
		return true, err
	case 2: // fixed.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Boolean{msg}
		return true, err
	case 3: // fixed.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Code{msg}
		return true, err
	case 4: // fixed.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Date{msg}
		return true, err
	case 5: // fixed.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_DateTime{msg}
		return true, err
	case 6: // fixed.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Decimal{msg}
		return true, err
	case 7: // fixed.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Id)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Id{msg}
		return true, err
	case 8: // fixed.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Instant{msg}
		return true, err
	case 9: // fixed.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Integer{msg}
		return true, err
	case 10: // fixed.markdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Markdown)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Markdown{msg}
		return true, err
	case 11: // fixed.oid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oid)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Oid{msg}
		return true, err
	case 12: // fixed.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_PositiveInt{msg}
		return true, err
	case 13: // fixed.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_StringValue{msg}
		return true, err
	case 14: // fixed.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Time{msg}
		return true, err
	case 15: // fixed.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_UnsignedInt{msg}
		return true, err
	case 16: // fixed.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Uri{msg}
		return true, err
	case 17: // fixed.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Address)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Address{msg}
		return true, err
	case 18: // fixed.age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Age)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Age{msg}
		return true, err
	case 19: // fixed.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Annotation)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Annotation{msg}
		return true, err
	case 20: // fixed.attachment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attachment)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Attachment{msg}
		return true, err
	case 21: // fixed.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_CodeableConcept{msg}
		return true, err
	case 22: // fixed.coding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Coding)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Coding{msg}
		return true, err
	case 23: // fixed.contact_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactPoint)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_ContactPoint{msg}
		return true, err
	case 24: // fixed.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Count)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Count{msg}
		return true, err
	case 25: // fixed.distance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distance)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Distance{msg}
		return true, err
	case 26: // fixed.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Duration{msg}
		return true, err
	case 27: // fixed.human_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanName)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_HumanName{msg}
		return true, err
	case 28: // fixed.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Identifier)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Identifier{msg}
		return true, err
	case 29: // fixed.money
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Money)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Money{msg}
		return true, err
	case 30: // fixed.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Period{msg}
		return true, err
	case 31: // fixed.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Quantity{msg}
		return true, err
	case 32: // fixed.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Range{msg}
		return true, err
	case 33: // fixed.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Ratio{msg}
		return true, err
	case 34: // fixed.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Reference{msg}
		return true, err
	case 35: // fixed.sampled_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SampledData)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_SampledData{msg}
		return true, err
	case 36: // fixed.signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signature)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Signature{msg}
		return true, err
	case 37: // fixed.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Timing{msg}
		return true, err
	case 38: // fixed.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Meta)
		err := b.DecodeMessage(msg)
		m.Fixed = &ElementDefinition_Fixed_Meta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_Fixed_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_Fixed)
	// fixed
	switch x := m.Fixed.(type) {
	case *ElementDefinition_Fixed_Base64Binary:
		s := proto.Size(x.Base64Binary)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Code:
		s := proto.Size(x.Code)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Id:
		s := proto.Size(x.Id)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Markdown:
		s := proto.Size(x.Markdown)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Oid:
		s := proto.Size(x.Oid)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Uri:
		s := proto.Size(x.Uri)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Address:
		s := proto.Size(x.Address)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Age:
		s := proto.Size(x.Age)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Annotation:
		s := proto.Size(x.Annotation)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Attachment:
		s := proto.Size(x.Attachment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Coding:
		s := proto.Size(x.Coding)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_ContactPoint:
		s := proto.Size(x.ContactPoint)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Count:
		s := proto.Size(x.Count)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Distance:
		s := proto.Size(x.Distance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Duration:
		s := proto.Size(x.Duration)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_HumanName:
		s := proto.Size(x.HumanName)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Identifier:
		s := proto.Size(x.Identifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Money:
		s := proto.Size(x.Money)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Period:
		s := proto.Size(x.Period)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Quantity:
		s := proto.Size(x.Quantity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Ratio:
		s := proto.Size(x.Ratio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Reference:
		s := proto.Size(x.Reference)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_SampledData:
		s := proto.Size(x.SampledData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Signature:
		s := proto.Size(x.Signature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Timing:
		s := proto.Size(x.Timing)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Fixed_Meta:
		s := proto.Size(x.Meta)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Value must have at least these property values
type ElementDefinition_Pattern struct {
	// Types that are valid to be assigned to Pattern:
	//	*ElementDefinition_Pattern_Base64Binary
	//	*ElementDefinition_Pattern_Boolean
	//	*ElementDefinition_Pattern_Code
	//	*ElementDefinition_Pattern_Date
	//	*ElementDefinition_Pattern_DateTime
	//	*ElementDefinition_Pattern_Decimal
	//	*ElementDefinition_Pattern_Id
	//	*ElementDefinition_Pattern_Instant
	//	*ElementDefinition_Pattern_Integer
	//	*ElementDefinition_Pattern_Markdown
	//	*ElementDefinition_Pattern_Oid
	//	*ElementDefinition_Pattern_PositiveInt
	//	*ElementDefinition_Pattern_StringValue
	//	*ElementDefinition_Pattern_Time
	//	*ElementDefinition_Pattern_UnsignedInt
	//	*ElementDefinition_Pattern_Uri
	//	*ElementDefinition_Pattern_Address
	//	*ElementDefinition_Pattern_Age
	//	*ElementDefinition_Pattern_Annotation
	//	*ElementDefinition_Pattern_Attachment
	//	*ElementDefinition_Pattern_CodeableConcept
	//	*ElementDefinition_Pattern_Coding
	//	*ElementDefinition_Pattern_ContactPoint
	//	*ElementDefinition_Pattern_Count
	//	*ElementDefinition_Pattern_Distance
	//	*ElementDefinition_Pattern_Duration
	//	*ElementDefinition_Pattern_HumanName
	//	*ElementDefinition_Pattern_Identifier
	//	*ElementDefinition_Pattern_Money
	//	*ElementDefinition_Pattern_Period
	//	*ElementDefinition_Pattern_Quantity
	//	*ElementDefinition_Pattern_Range
	//	*ElementDefinition_Pattern_Ratio
	//	*ElementDefinition_Pattern_Reference
	//	*ElementDefinition_Pattern_SampledData
	//	*ElementDefinition_Pattern_Signature
	//	*ElementDefinition_Pattern_Timing
	//	*ElementDefinition_Pattern_Meta
	Pattern              isElementDefinition_Pattern_Pattern `protobuf_oneof:"pattern"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ElementDefinition_Pattern) Reset()         { *m = ElementDefinition_Pattern{} }
func (m *ElementDefinition_Pattern) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Pattern) ProtoMessage()    {}
func (*ElementDefinition_Pattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 5}
}

func (m *ElementDefinition_Pattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Pattern.Unmarshal(m, b)
}
func (m *ElementDefinition_Pattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Pattern.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Pattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Pattern.Merge(m, src)
}
func (m *ElementDefinition_Pattern) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Pattern.Size(m)
}
func (m *ElementDefinition_Pattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Pattern.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Pattern proto.InternalMessageInfo

type isElementDefinition_Pattern_Pattern interface {
	isElementDefinition_Pattern_Pattern()
}

type ElementDefinition_Pattern_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Pattern_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Pattern_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Pattern_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Pattern_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Pattern_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Pattern_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Pattern_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Pattern_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Pattern_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Pattern_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Pattern_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Pattern_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Pattern_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Pattern_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Pattern_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Pattern_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Pattern_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Pattern_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Pattern_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Pattern_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Pattern_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Pattern_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Pattern_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Pattern_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Pattern_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Pattern_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Pattern_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Pattern_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Pattern_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Pattern_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Pattern_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Pattern_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Pattern_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Pattern_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Pattern_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Pattern_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Pattern_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Pattern_Base64Binary) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Boolean) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Code) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Date) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_DateTime) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Decimal) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Id) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Instant) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Integer) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Markdown) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Oid) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_PositiveInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_StringValue) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Time) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_UnsignedInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Uri) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Address) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Age) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Annotation) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Attachment) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_CodeableConcept) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Coding) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_ContactPoint) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Count) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Distance) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Duration) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_HumanName) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Identifier) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Money) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Period) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Quantity) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Range) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Ratio) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Reference) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_SampledData) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Signature) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Timing) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Meta) isElementDefinition_Pattern_Pattern() {}

func (m *ElementDefinition_Pattern) GetPattern() isElementDefinition_Pattern_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetBase64Binary() *Base64Binary {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetBoolean() *Boolean {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetCode() *Code {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Code); ok {
		return x.Code
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetDate() *Date {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetDateTime() *DateTime {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetDecimal() *Decimal {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetId() *Id {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Id); ok {
		return x.Id
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetInstant() *Instant {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetInteger() *Integer {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetMarkdown() *Markdown {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetOid() *Oid {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Oid); ok {
		return x.Oid
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetStringValue() *String {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetTime() *Time {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetUri() *Uri {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetAddress() *Address {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetAge() *Age {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Age); ok {
		return x.Age
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetAnnotation() *Annotation {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetAttachment() *Attachment {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetCoding() *Coding {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Coding); ok {
		return x.Coding
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetContactPoint() *ContactPoint {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetCount() *Count {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Count); ok {
		return x.Count
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetDistance() *Distance {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Distance); ok {
		return x.Distance
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetDuration() *Duration {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetHumanName() *HumanName {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetIdentifier() *Identifier {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetMoney() *Money {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Money); ok {
		return x.Money
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetPeriod() *Period {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Period); ok {
		return x.Period
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetQuantity() *Quantity {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetRange() *Range {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Range); ok {
		return x.Range
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetRatio() *Ratio {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetReference() *Reference {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetSampledData() *SampledData {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetSignature() *Signature {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Signature); ok {
		return x.Signature
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetTiming() *Timing {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *ElementDefinition_Pattern) GetMeta() *Meta {
	if x, ok := m.GetPattern().(*ElementDefinition_Pattern_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_Pattern) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_Pattern_OneofMarshaler, _ElementDefinition_Pattern_OneofUnmarshaler, _ElementDefinition_Pattern_OneofSizer, []interface{}{
		(*ElementDefinition_Pattern_Base64Binary)(nil),
		(*ElementDefinition_Pattern_Boolean)(nil),
		(*ElementDefinition_Pattern_Code)(nil),
		(*ElementDefinition_Pattern_Date)(nil),
		(*ElementDefinition_Pattern_DateTime)(nil),
		(*ElementDefinition_Pattern_Decimal)(nil),
		(*ElementDefinition_Pattern_Id)(nil),
		(*ElementDefinition_Pattern_Instant)(nil),
		(*ElementDefinition_Pattern_Integer)(nil),
		(*ElementDefinition_Pattern_Markdown)(nil),
		(*ElementDefinition_Pattern_Oid)(nil),
		(*ElementDefinition_Pattern_PositiveInt)(nil),
		(*ElementDefinition_Pattern_StringValue)(nil),
		(*ElementDefinition_Pattern_Time)(nil),
		(*ElementDefinition_Pattern_UnsignedInt)(nil),
		(*ElementDefinition_Pattern_Uri)(nil),
		(*ElementDefinition_Pattern_Address)(nil),
		(*ElementDefinition_Pattern_Age)(nil),
		(*ElementDefinition_Pattern_Annotation)(nil),
		(*ElementDefinition_Pattern_Attachment)(nil),
		(*ElementDefinition_Pattern_CodeableConcept)(nil),
		(*ElementDefinition_Pattern_Coding)(nil),
		(*ElementDefinition_Pattern_ContactPoint)(nil),
		(*ElementDefinition_Pattern_Count)(nil),
		(*ElementDefinition_Pattern_Distance)(nil),
		(*ElementDefinition_Pattern_Duration)(nil),
		(*ElementDefinition_Pattern_HumanName)(nil),
		(*ElementDefinition_Pattern_Identifier)(nil),
		(*ElementDefinition_Pattern_Money)(nil),
		(*ElementDefinition_Pattern_Period)(nil),
		(*ElementDefinition_Pattern_Quantity)(nil),
		(*ElementDefinition_Pattern_Range)(nil),
		(*ElementDefinition_Pattern_Ratio)(nil),
		(*ElementDefinition_Pattern_Reference)(nil),
		(*ElementDefinition_Pattern_SampledData)(nil),
		(*ElementDefinition_Pattern_Signature)(nil),
		(*ElementDefinition_Pattern_Timing)(nil),
		(*ElementDefinition_Pattern_Meta)(nil),
	}
}

func _ElementDefinition_Pattern_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_Pattern)
	// pattern
	switch x := m.Pattern.(type) {
	case *ElementDefinition_Pattern_Base64Binary:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base64Binary); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Boolean:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Code:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Date:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_DateTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Decimal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Id:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Id); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Instant:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Integer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Markdown:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Markdown); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Oid:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oid); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_PositiveInt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_StringValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Time:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_UnsignedInt:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Uri:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Address:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Age:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Age); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Annotation:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Attachment:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attachment); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_CodeableConcept:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Coding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coding); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_ContactPoint:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactPoint); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Count:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Count); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Distance:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distance); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Duration:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_HumanName:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanName); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Identifier:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identifier); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Money:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Money); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Period:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Quantity:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Range:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Ratio:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Reference:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_SampledData:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SampledData); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Signature:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signature); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Timing:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *ElementDefinition_Pattern_Meta:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_Pattern.Pattern has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_Pattern_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_Pattern)
	switch tag {
	case 1: // pattern.base64_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Base64Binary)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Base64Binary{msg}
		return true, err
	case 2: // pattern.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Boolean{msg}
		return true, err
	case 3: // pattern.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Code{msg}
		return true, err
	case 4: // pattern.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Date{msg}
		return true, err
	case 5: // pattern.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_DateTime{msg}
		return true, err
	case 6: // pattern.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Decimal{msg}
		return true, err
	case 7: // pattern.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Id)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Id{msg}
		return true, err
	case 8: // pattern.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Instant{msg}
		return true, err
	case 9: // pattern.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Integer{msg}
		return true, err
	case 10: // pattern.markdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Markdown)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Markdown{msg}
		return true, err
	case 11: // pattern.oid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oid)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Oid{msg}
		return true, err
	case 12: // pattern.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_PositiveInt{msg}
		return true, err
	case 13: // pattern.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_StringValue{msg}
		return true, err
	case 14: // pattern.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Time{msg}
		return true, err
	case 15: // pattern.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_UnsignedInt{msg}
		return true, err
	case 16: // pattern.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Uri{msg}
		return true, err
	case 17: // pattern.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Address)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Address{msg}
		return true, err
	case 18: // pattern.age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Age)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Age{msg}
		return true, err
	case 19: // pattern.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Annotation)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Annotation{msg}
		return true, err
	case 20: // pattern.attachment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attachment)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Attachment{msg}
		return true, err
	case 21: // pattern.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_CodeableConcept{msg}
		return true, err
	case 22: // pattern.coding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Coding)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Coding{msg}
		return true, err
	case 23: // pattern.contact_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactPoint)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_ContactPoint{msg}
		return true, err
	case 24: // pattern.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Count)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Count{msg}
		return true, err
	case 25: // pattern.distance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distance)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Distance{msg}
		return true, err
	case 26: // pattern.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Duration{msg}
		return true, err
	case 27: // pattern.human_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanName)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_HumanName{msg}
		return true, err
	case 28: // pattern.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Identifier)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Identifier{msg}
		return true, err
	case 29: // pattern.money
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Money)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Money{msg}
		return true, err
	case 30: // pattern.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Period{msg}
		return true, err
	case 31: // pattern.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Quantity{msg}
		return true, err
	case 32: // pattern.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Range{msg}
		return true, err
	case 33: // pattern.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Ratio{msg}
		return true, err
	case 34: // pattern.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Reference{msg}
		return true, err
	case 35: // pattern.sampled_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SampledData)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_SampledData{msg}
		return true, err
	case 36: // pattern.signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signature)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Signature{msg}
		return true, err
	case 37: // pattern.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Timing{msg}
		return true, err
	case 38: // pattern.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Meta)
		err := b.DecodeMessage(msg)
		m.Pattern = &ElementDefinition_Pattern_Meta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_Pattern_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_Pattern)
	// pattern
	switch x := m.Pattern.(type) {
	case *ElementDefinition_Pattern_Base64Binary:
		s := proto.Size(x.Base64Binary)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Code:
		s := proto.Size(x.Code)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Id:
		s := proto.Size(x.Id)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Markdown:
		s := proto.Size(x.Markdown)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Oid:
		s := proto.Size(x.Oid)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Uri:
		s := proto.Size(x.Uri)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Address:
		s := proto.Size(x.Address)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Age:
		s := proto.Size(x.Age)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Annotation:
		s := proto.Size(x.Annotation)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Attachment:
		s := proto.Size(x.Attachment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Coding:
		s := proto.Size(x.Coding)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_ContactPoint:
		s := proto.Size(x.ContactPoint)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Count:
		s := proto.Size(x.Count)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Distance:
		s := proto.Size(x.Distance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Duration:
		s := proto.Size(x.Duration)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_HumanName:
		s := proto.Size(x.HumanName)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Identifier:
		s := proto.Size(x.Identifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Money:
		s := proto.Size(x.Money)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Period:
		s := proto.Size(x.Period)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Quantity:
		s := proto.Size(x.Quantity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Ratio:
		s := proto.Size(x.Ratio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Reference:
		s := proto.Size(x.Reference)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_SampledData:
		s := proto.Size(x.SampledData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Signature:
		s := proto.Size(x.Signature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Timing:
		s := proto.Size(x.Timing)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Pattern_Meta:
		s := proto.Size(x.Meta)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Example value (as defined for type)
type ElementDefinition_Example struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Describes the purpose of this example
	Label                *String                          `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Value                *ElementDefinition_Example_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ElementDefinition_Example) Reset()         { *m = ElementDefinition_Example{} }
func (m *ElementDefinition_Example) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Example) ProtoMessage()    {}
func (*ElementDefinition_Example) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 6}
}

func (m *ElementDefinition_Example) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Example.Unmarshal(m, b)
}
func (m *ElementDefinition_Example) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Example.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Example) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Example.Merge(m, src)
}
func (m *ElementDefinition_Example) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Example.Size(m)
}
func (m *ElementDefinition_Example) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Example.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Example proto.InternalMessageInfo

func (m *ElementDefinition_Example) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Example) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Example) GetLabel() *String {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ElementDefinition_Example) GetValue() *ElementDefinition_Example_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Value of Example (one of allowed types)
type ElementDefinition_Example_Value struct {
	// Types that are valid to be assigned to Value:
	//	*ElementDefinition_Example_Value_Base64Binary
	//	*ElementDefinition_Example_Value_Boolean
	//	*ElementDefinition_Example_Value_Code
	//	*ElementDefinition_Example_Value_Date
	//	*ElementDefinition_Example_Value_DateTime
	//	*ElementDefinition_Example_Value_Decimal
	//	*ElementDefinition_Example_Value_Id
	//	*ElementDefinition_Example_Value_Instant
	//	*ElementDefinition_Example_Value_Integer
	//	*ElementDefinition_Example_Value_Markdown
	//	*ElementDefinition_Example_Value_Oid
	//	*ElementDefinition_Example_Value_PositiveInt
	//	*ElementDefinition_Example_Value_StringValue
	//	*ElementDefinition_Example_Value_Time
	//	*ElementDefinition_Example_Value_UnsignedInt
	//	*ElementDefinition_Example_Value_Uri
	//	*ElementDefinition_Example_Value_Address
	//	*ElementDefinition_Example_Value_Age
	//	*ElementDefinition_Example_Value_Annotation
	//	*ElementDefinition_Example_Value_Attachment
	//	*ElementDefinition_Example_Value_CodeableConcept
	//	*ElementDefinition_Example_Value_Coding
	//	*ElementDefinition_Example_Value_ContactPoint
	//	*ElementDefinition_Example_Value_Count
	//	*ElementDefinition_Example_Value_Distance
	//	*ElementDefinition_Example_Value_Duration
	//	*ElementDefinition_Example_Value_HumanName
	//	*ElementDefinition_Example_Value_Identifier
	//	*ElementDefinition_Example_Value_Money
	//	*ElementDefinition_Example_Value_Period
	//	*ElementDefinition_Example_Value_Quantity
	//	*ElementDefinition_Example_Value_Range
	//	*ElementDefinition_Example_Value_Ratio
	//	*ElementDefinition_Example_Value_Reference
	//	*ElementDefinition_Example_Value_SampledData
	//	*ElementDefinition_Example_Value_Signature
	//	*ElementDefinition_Example_Value_Timing
	//	*ElementDefinition_Example_Value_Meta
	Value                isElementDefinition_Example_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ElementDefinition_Example_Value) Reset()         { *m = ElementDefinition_Example_Value{} }
func (m *ElementDefinition_Example_Value) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Example_Value) ProtoMessage()    {}
func (*ElementDefinition_Example_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 6, 0}
}

func (m *ElementDefinition_Example_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Example_Value.Unmarshal(m, b)
}
func (m *ElementDefinition_Example_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Example_Value.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Example_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Example_Value.Merge(m, src)
}
func (m *ElementDefinition_Example_Value) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Example_Value.Size(m)
}
func (m *ElementDefinition_Example_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Example_Value.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Example_Value proto.InternalMessageInfo

type isElementDefinition_Example_Value_Value interface {
	isElementDefinition_Example_Value_Value()
}

type ElementDefinition_Example_Value_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Example_Value_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Example_Value_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Example_Value_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Example_Value_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Example_Value_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Example_Value_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Example_Value_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Example_Value_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Example_Value_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Example_Value_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Example_Value_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Example_Value_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Example_Value_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Example_Value_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Example_Value_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Example_Value_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Example_Value_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Example_Value_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Example_Value_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Example_Value_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Example_Value_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Example_Value_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Example_Value_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Example_Value_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Example_Value_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Example_Value_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Example_Value_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Example_Value_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Example_Value_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Example_Value_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Example_Value_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Example_Value_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Example_Value_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Example_Value_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Example_Value_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Example_Value_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Example_Value_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Example_Value_Base64Binary) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Boolean) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Code) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Date) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_DateTime) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Decimal) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Id) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Instant) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Integer) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Markdown) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Oid) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_PositiveInt) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_StringValue) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Time) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_UnsignedInt) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Uri) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Address) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Age) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Annotation) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Attachment) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_CodeableConcept) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Coding) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_ContactPoint) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Count) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Distance) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Duration) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_HumanName) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Identifier) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Money) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Period) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Quantity) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Range) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Ratio) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Reference) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_SampledData) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Signature) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Timing) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Meta) isElementDefinition_Example_Value_Value() {}

func (m *ElementDefinition_Example_Value) GetValue() isElementDefinition_Example_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetBase64Binary() *Base64Binary {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetBoolean() *Boolean {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetCode() *Code {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetDate() *Date {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetDateTime() *DateTime {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetDecimal() *Decimal {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetId() *Id {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Id); ok {
		return x.Id
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetInstant() *Instant {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetInteger() *Integer {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetMarkdown() *Markdown {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetOid() *Oid {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Oid); ok {
		return x.Oid
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetStringValue() *String {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetTime() *Time {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetUri() *Uri {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetAddress() *Address {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetAge() *Age {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Age); ok {
		return x.Age
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetAnnotation() *Annotation {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetAttachment() *Attachment {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetCoding() *Coding {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetContactPoint() *ContactPoint {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetCount() *Count {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Count); ok {
		return x.Count
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetDistance() *Distance {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Distance); ok {
		return x.Distance
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetDuration() *Duration {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetHumanName() *HumanName {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetIdentifier() *Identifier {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetMoney() *Money {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Money); ok {
		return x.Money
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetPeriod() *Period {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetQuantity() *Quantity {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetRange() *Range {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetRatio() *Ratio {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetReference() *Reference {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetSampledData() *SampledData {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetSignature() *Signature {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Signature); ok {
		return x.Signature
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetTiming() *Timing {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *ElementDefinition_Example_Value) GetMeta() *Meta {
	if x, ok := m.GetValue().(*ElementDefinition_Example_Value_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_Example_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_Example_Value_OneofMarshaler, _ElementDefinition_Example_Value_OneofUnmarshaler, _ElementDefinition_Example_Value_OneofSizer, []interface{}{
		(*ElementDefinition_Example_Value_Base64Binary)(nil),
		(*ElementDefinition_Example_Value_Boolean)(nil),
		(*ElementDefinition_Example_Value_Code)(nil),
		(*ElementDefinition_Example_Value_Date)(nil),
		(*ElementDefinition_Example_Value_DateTime)(nil),
		(*ElementDefinition_Example_Value_Decimal)(nil),
		(*ElementDefinition_Example_Value_Id)(nil),
		(*ElementDefinition_Example_Value_Instant)(nil),
		(*ElementDefinition_Example_Value_Integer)(nil),
		(*ElementDefinition_Example_Value_Markdown)(nil),
		(*ElementDefinition_Example_Value_Oid)(nil),
		(*ElementDefinition_Example_Value_PositiveInt)(nil),
		(*ElementDefinition_Example_Value_StringValue)(nil),
		(*ElementDefinition_Example_Value_Time)(nil),
		(*ElementDefinition_Example_Value_UnsignedInt)(nil),
		(*ElementDefinition_Example_Value_Uri)(nil),
		(*ElementDefinition_Example_Value_Address)(nil),
		(*ElementDefinition_Example_Value_Age)(nil),
		(*ElementDefinition_Example_Value_Annotation)(nil),
		(*ElementDefinition_Example_Value_Attachment)(nil),
		(*ElementDefinition_Example_Value_CodeableConcept)(nil),
		(*ElementDefinition_Example_Value_Coding)(nil),
		(*ElementDefinition_Example_Value_ContactPoint)(nil),
		(*ElementDefinition_Example_Value_Count)(nil),
		(*ElementDefinition_Example_Value_Distance)(nil),
		(*ElementDefinition_Example_Value_Duration)(nil),
		(*ElementDefinition_Example_Value_HumanName)(nil),
		(*ElementDefinition_Example_Value_Identifier)(nil),
		(*ElementDefinition_Example_Value_Money)(nil),
		(*ElementDefinition_Example_Value_Period)(nil),
		(*ElementDefinition_Example_Value_Quantity)(nil),
		(*ElementDefinition_Example_Value_Range)(nil),
		(*ElementDefinition_Example_Value_Ratio)(nil),
		(*ElementDefinition_Example_Value_Reference)(nil),
		(*ElementDefinition_Example_Value_SampledData)(nil),
		(*ElementDefinition_Example_Value_Signature)(nil),
		(*ElementDefinition_Example_Value_Timing)(nil),
		(*ElementDefinition_Example_Value_Meta)(nil),
	}
}

func _ElementDefinition_Example_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_Example_Value)
	// value
	switch x := m.Value.(type) {
	case *ElementDefinition_Example_Value_Base64Binary:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base64Binary); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Boolean:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Code:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Date:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_DateTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Decimal:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Id:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Id); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Instant:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Integer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Markdown:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Markdown); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Oid:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oid); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_PositiveInt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_StringValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringValue); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Time:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_UnsignedInt:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Uri:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Address:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Age:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Age); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Annotation:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Attachment:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attachment); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_CodeableConcept:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Coding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coding); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_ContactPoint:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactPoint); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Count:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Count); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Distance:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distance); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Duration:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_HumanName:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanName); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Identifier:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Identifier); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Money:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Money); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Period:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Period); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Quantity:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Range:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Ratio:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ratio); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Reference:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_SampledData:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SampledData); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Signature:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signature); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Timing:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *ElementDefinition_Example_Value_Meta:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_Example_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_Example_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_Example_Value)
	switch tag {
	case 1: // value.base64_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Base64Binary)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Base64Binary{msg}
		return true, err
	case 2: // value.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Boolean)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Boolean{msg}
		return true, err
	case 3: // value.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Code{msg}
		return true, err
	case 4: // value.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Date{msg}
		return true, err
	case 5: // value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_DateTime{msg}
		return true, err
	case 6: // value.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Decimal{msg}
		return true, err
	case 7: // value.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Id)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Id{msg}
		return true, err
	case 8: // value.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Instant{msg}
		return true, err
	case 9: // value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Integer{msg}
		return true, err
	case 10: // value.markdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Markdown)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Markdown{msg}
		return true, err
	case 11: // value.oid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oid)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Oid{msg}
		return true, err
	case 12: // value.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_PositiveInt{msg}
		return true, err
	case 13: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_StringValue{msg}
		return true, err
	case 14: // value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Time{msg}
		return true, err
	case 15: // value.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_UnsignedInt{msg}
		return true, err
	case 16: // value.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Uri{msg}
		return true, err
	case 17: // value.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Address)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Address{msg}
		return true, err
	case 18: // value.age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Age)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Age{msg}
		return true, err
	case 19: // value.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Annotation)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Annotation{msg}
		return true, err
	case 20: // value.attachment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attachment)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Attachment{msg}
		return true, err
	case 21: // value.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_CodeableConcept{msg}
		return true, err
	case 22: // value.coding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Coding)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Coding{msg}
		return true, err
	case 23: // value.contact_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactPoint)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_ContactPoint{msg}
		return true, err
	case 24: // value.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Count)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Count{msg}
		return true, err
	case 25: // value.distance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distance)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Distance{msg}
		return true, err
	case 26: // value.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Duration)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Duration{msg}
		return true, err
	case 27: // value.human_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanName)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_HumanName{msg}
		return true, err
	case 28: // value.identifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Identifier)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Identifier{msg}
		return true, err
	case 29: // value.money
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Money)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Money{msg}
		return true, err
	case 30: // value.period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Period)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Period{msg}
		return true, err
	case 31: // value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Quantity{msg}
		return true, err
	case 32: // value.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Range{msg}
		return true, err
	case 33: // value.ratio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ratio)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Ratio{msg}
		return true, err
	case 34: // value.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Reference{msg}
		return true, err
	case 35: // value.sampled_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SampledData)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_SampledData{msg}
		return true, err
	case 36: // value.signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signature)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Signature{msg}
		return true, err
	case 37: // value.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Timing{msg}
		return true, err
	case 38: // value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Meta)
		err := b.DecodeMessage(msg)
		m.Value = &ElementDefinition_Example_Value_Meta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_Example_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_Example_Value)
	// value
	switch x := m.Value.(type) {
	case *ElementDefinition_Example_Value_Base64Binary:
		s := proto.Size(x.Base64Binary)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Boolean:
		s := proto.Size(x.Boolean)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Code:
		s := proto.Size(x.Code)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Id:
		s := proto.Size(x.Id)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Markdown:
		s := proto.Size(x.Markdown)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Oid:
		s := proto.Size(x.Oid)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_StringValue:
		s := proto.Size(x.StringValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Uri:
		s := proto.Size(x.Uri)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Address:
		s := proto.Size(x.Address)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Age:
		s := proto.Size(x.Age)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Annotation:
		s := proto.Size(x.Annotation)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Attachment:
		s := proto.Size(x.Attachment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Coding:
		s := proto.Size(x.Coding)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_ContactPoint:
		s := proto.Size(x.ContactPoint)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Count:
		s := proto.Size(x.Count)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Distance:
		s := proto.Size(x.Distance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Duration:
		s := proto.Size(x.Duration)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_HumanName:
		s := proto.Size(x.HumanName)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Identifier:
		s := proto.Size(x.Identifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Money:
		s := proto.Size(x.Money)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Period:
		s := proto.Size(x.Period)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Quantity:
		s := proto.Size(x.Quantity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Ratio:
		s := proto.Size(x.Ratio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Reference:
		s := proto.Size(x.Reference)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_SampledData:
		s := proto.Size(x.SampledData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Signature:
		s := proto.Size(x.Signature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Timing:
		s := proto.Size(x.Timing)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_Example_Value_Meta:
		s := proto.Size(x.Meta)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Minimum Allowed Value (for some types)
type ElementDefinition_MinValue struct {
	// Types that are valid to be assigned to MinValue:
	//	*ElementDefinition_MinValue_Date
	//	*ElementDefinition_MinValue_DateTime
	//	*ElementDefinition_MinValue_Instant
	//	*ElementDefinition_MinValue_Time
	//	*ElementDefinition_MinValue_Decimal
	//	*ElementDefinition_MinValue_Integer
	//	*ElementDefinition_MinValue_PositiveInt
	//	*ElementDefinition_MinValue_UnsignedInt
	//	*ElementDefinition_MinValue_Quantity
	MinValue             isElementDefinition_MinValue_MinValue `protobuf_oneof:"min_value"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ElementDefinition_MinValue) Reset()         { *m = ElementDefinition_MinValue{} }
func (m *ElementDefinition_MinValue) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_MinValue) ProtoMessage()    {}
func (*ElementDefinition_MinValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 7}
}

func (m *ElementDefinition_MinValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_MinValue.Unmarshal(m, b)
}
func (m *ElementDefinition_MinValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_MinValue.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_MinValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_MinValue.Merge(m, src)
}
func (m *ElementDefinition_MinValue) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_MinValue.Size(m)
}
func (m *ElementDefinition_MinValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_MinValue.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_MinValue proto.InternalMessageInfo

type isElementDefinition_MinValue_MinValue interface {
	isElementDefinition_MinValue_MinValue()
}

type ElementDefinition_MinValue_Date struct {
	Date *Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MinValue_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MinValue_Instant struct {
	Instant *Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MinValue_Time struct {
	Time *Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MinValue_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MinValue_Integer struct {
	Integer *Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MinValue_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MinValue_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MinValue_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MinValue_Date) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_DateTime) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Instant) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Time) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Decimal) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Integer) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_PositiveInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_UnsignedInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Quantity) isElementDefinition_MinValue_MinValue() {}

func (m *ElementDefinition_MinValue) GetMinValue() isElementDefinition_MinValue_MinValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetDate() *Date {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetDateTime() *DateTime {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetInstant() *Instant {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetTime() *Time {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetDecimal() *Decimal {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetInteger() *Integer {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_MinValue) GetQuantity() *Quantity {
	if x, ok := m.GetMinValue().(*ElementDefinition_MinValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_MinValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_MinValue_OneofMarshaler, _ElementDefinition_MinValue_OneofUnmarshaler, _ElementDefinition_MinValue_OneofSizer, []interface{}{
		(*ElementDefinition_MinValue_Date)(nil),
		(*ElementDefinition_MinValue_DateTime)(nil),
		(*ElementDefinition_MinValue_Instant)(nil),
		(*ElementDefinition_MinValue_Time)(nil),
		(*ElementDefinition_MinValue_Decimal)(nil),
		(*ElementDefinition_MinValue_Integer)(nil),
		(*ElementDefinition_MinValue_PositiveInt)(nil),
		(*ElementDefinition_MinValue_UnsignedInt)(nil),
		(*ElementDefinition_MinValue_Quantity)(nil),
	}
}

func _ElementDefinition_MinValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_MinValue)
	// min_value
	switch x := m.MinValue.(type) {
	case *ElementDefinition_MinValue_Date:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_DateTime:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_Instant:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_Time:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_Decimal:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_Integer:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_PositiveInt:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_UnsignedInt:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_MinValue_Quantity:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_MinValue.MinValue has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_MinValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_MinValue)
	switch tag {
	case 1: // min_value.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Date{msg}
		return true, err
	case 2: // min_value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_DateTime{msg}
		return true, err
	case 3: // min_value.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Instant{msg}
		return true, err
	case 4: // min_value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Time{msg}
		return true, err
	case 5: // min_value.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Decimal{msg}
		return true, err
	case 6: // min_value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Integer{msg}
		return true, err
	case 7: // min_value.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_PositiveInt{msg}
		return true, err
	case 8: // min_value.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_UnsignedInt{msg}
		return true, err
	case 9: // min_value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.MinValue = &ElementDefinition_MinValue_Quantity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_MinValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_MinValue)
	// min_value
	switch x := m.MinValue.(type) {
	case *ElementDefinition_MinValue_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MinValue_Quantity:
		s := proto.Size(x.Quantity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Maximum Allowed Value (for some types)
type ElementDefinition_MaxValue struct {
	// Types that are valid to be assigned to MaxValue:
	//	*ElementDefinition_MaxValue_Date
	//	*ElementDefinition_MaxValue_DateTime
	//	*ElementDefinition_MaxValue_Instant
	//	*ElementDefinition_MaxValue_Time
	//	*ElementDefinition_MaxValue_Decimal
	//	*ElementDefinition_MaxValue_Integer
	//	*ElementDefinition_MaxValue_PositiveInt
	//	*ElementDefinition_MaxValue_UnsignedInt
	//	*ElementDefinition_MaxValue_Quantity
	MaxValue             isElementDefinition_MaxValue_MaxValue `protobuf_oneof:"max_value"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ElementDefinition_MaxValue) Reset()         { *m = ElementDefinition_MaxValue{} }
func (m *ElementDefinition_MaxValue) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_MaxValue) ProtoMessage()    {}
func (*ElementDefinition_MaxValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 8}
}

func (m *ElementDefinition_MaxValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_MaxValue.Unmarshal(m, b)
}
func (m *ElementDefinition_MaxValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_MaxValue.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_MaxValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_MaxValue.Merge(m, src)
}
func (m *ElementDefinition_MaxValue) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_MaxValue.Size(m)
}
func (m *ElementDefinition_MaxValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_MaxValue.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_MaxValue proto.InternalMessageInfo

type isElementDefinition_MaxValue_MaxValue interface {
	isElementDefinition_MaxValue_MaxValue()
}

type ElementDefinition_MaxValue_Date struct {
	Date *Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MaxValue_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MaxValue_Instant struct {
	Instant *Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MaxValue_Time struct {
	Time *Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MaxValue_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MaxValue_Integer struct {
	Integer *Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MaxValue_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MaxValue_Date) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_DateTime) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Instant) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Time) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Decimal) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Integer) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_PositiveInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_UnsignedInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Quantity) isElementDefinition_MaxValue_MaxValue() {}

func (m *ElementDefinition_MaxValue) GetMaxValue() isElementDefinition_MaxValue_MaxValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetDate() *Date {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Date); ok {
		return x.Date
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetDateTime() *DateTime {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetInstant() *Instant {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetTime() *Time {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Time); ok {
		return x.Time
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetDecimal() *Decimal {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetInteger() *Integer {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetPositiveInt() *PositiveInt {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetUnsignedInt() *UnsignedInt {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (m *ElementDefinition_MaxValue) GetQuantity() *Quantity {
	if x, ok := m.GetMaxValue().(*ElementDefinition_MaxValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_MaxValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_MaxValue_OneofMarshaler, _ElementDefinition_MaxValue_OneofUnmarshaler, _ElementDefinition_MaxValue_OneofSizer, []interface{}{
		(*ElementDefinition_MaxValue_Date)(nil),
		(*ElementDefinition_MaxValue_DateTime)(nil),
		(*ElementDefinition_MaxValue_Instant)(nil),
		(*ElementDefinition_MaxValue_Time)(nil),
		(*ElementDefinition_MaxValue_Decimal)(nil),
		(*ElementDefinition_MaxValue_Integer)(nil),
		(*ElementDefinition_MaxValue_PositiveInt)(nil),
		(*ElementDefinition_MaxValue_UnsignedInt)(nil),
		(*ElementDefinition_MaxValue_Quantity)(nil),
	}
}

func _ElementDefinition_MaxValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_MaxValue)
	// max_value
	switch x := m.MaxValue.(type) {
	case *ElementDefinition_MaxValue_Date:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_DateTime:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_Instant:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instant); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_Time:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_Decimal:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decimal); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_Integer:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_PositiveInt:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositiveInt); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_UnsignedInt:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsignedInt); err != nil {
			return err
		}
	case *ElementDefinition_MaxValue_Quantity:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_MaxValue.MaxValue has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_MaxValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_MaxValue)
	switch tag {
	case 1: // max_value.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Date{msg}
		return true, err
	case 2: // max_value.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_DateTime{msg}
		return true, err
	case 3: // max_value.instant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Instant)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Instant{msg}
		return true, err
	case 4: // max_value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Time{msg}
		return true, err
	case 5: // max_value.decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Decimal{msg}
		return true, err
	case 6: // max_value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integer)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Integer{msg}
		return true, err
	case 7: // max_value.positive_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositiveInt)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_PositiveInt{msg}
		return true, err
	case 8: // max_value.unsigned_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsignedInt)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_UnsignedInt{msg}
		return true, err
	case 9: // max_value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.MaxValue = &ElementDefinition_MaxValue_Quantity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_MaxValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_MaxValue)
	// max_value
	switch x := m.MaxValue.(type) {
	case *ElementDefinition_MaxValue_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_Instant:
		s := proto.Size(x.Instant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_Time:
		s := proto.Size(x.Time)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_Decimal:
		s := proto.Size(x.Decimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_Integer:
		s := proto.Size(x.Integer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_PositiveInt:
		s := proto.Size(x.PositiveInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_UnsignedInt:
		s := proto.Size(x.UnsignedInt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_MaxValue_Quantity:
		s := proto.Size(x.Quantity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Condition that must evaluate to true
type ElementDefinition_Constraint struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Target of 'condition' reference above
	Key *Id `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Why this constraint is necessary or appropriate
	Requirements *String `protobuf:"bytes,4,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// error | warning
	Severity *ConstraintSeverityCode `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// Human description of constraint
	Human *String `protobuf:"bytes,6,opt,name=human,proto3" json:"human,omitempty"`
	// FHIRPath expression of constraint
	Expression *String `protobuf:"bytes,7,opt,name=expression,proto3" json:"expression,omitempty"`
	// XPath expression of constraint
	Xpath *String `protobuf:"bytes,8,opt,name=xpath,proto3" json:"xpath,omitempty"`
	// Reference to original source of constraint
	Source               *Uri     `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElementDefinition_Constraint) Reset()         { *m = ElementDefinition_Constraint{} }
func (m *ElementDefinition_Constraint) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Constraint) ProtoMessage()    {}
func (*ElementDefinition_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 9}
}

func (m *ElementDefinition_Constraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Constraint.Unmarshal(m, b)
}
func (m *ElementDefinition_Constraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Constraint.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Constraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Constraint.Merge(m, src)
}
func (m *ElementDefinition_Constraint) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Constraint.Size(m)
}
func (m *ElementDefinition_Constraint) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Constraint.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Constraint proto.InternalMessageInfo

func (m *ElementDefinition_Constraint) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetKey() *Id {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetRequirements() *String {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetSeverity() *ConstraintSeverityCode {
	if m != nil {
		return m.Severity
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetHuman() *String {
	if m != nil {
		return m.Human
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetExpression() *String {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetXpath() *String {
	if m != nil {
		return m.Xpath
	}
	return nil
}

func (m *ElementDefinition_Constraint) GetSource() *Uri {
	if m != nil {
		return m.Source
	}
	return nil
}

// ValueSet details if this is coded
type ElementDefinition_ElementDefinitionBinding struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// required | extensible | preferred | example
	Strength *BindingStrengthCode `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	// Human explanation of the value set
	Description          *String                                              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ValueSet             *ElementDefinition_ElementDefinitionBinding_ValueSet `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ElementDefinition_ElementDefinitionBinding) Reset() {
	*m = ElementDefinition_ElementDefinitionBinding{}
}
func (m *ElementDefinition_ElementDefinitionBinding) String() string {
	return proto.CompactTextString(m)
}
func (*ElementDefinition_ElementDefinitionBinding) ProtoMessage() {}
func (*ElementDefinition_ElementDefinitionBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 10}
}

func (m *ElementDefinition_ElementDefinitionBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding.Unmarshal(m, b)
}
func (m *ElementDefinition_ElementDefinitionBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_ElementDefinitionBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_ElementDefinitionBinding.Merge(m, src)
}
func (m *ElementDefinition_ElementDefinitionBinding) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding.Size(m)
}
func (m *ElementDefinition_ElementDefinitionBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_ElementDefinitionBinding.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_ElementDefinitionBinding proto.InternalMessageInfo

func (m *ElementDefinition_ElementDefinitionBinding) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding) GetStrength() *BindingStrengthCode {
	if m != nil {
		return m.Strength
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding) GetDescription() *String {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding) GetValueSet() *ElementDefinition_ElementDefinitionBinding_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

// Source of value set
type ElementDefinition_ElementDefinitionBinding_ValueSet struct {
	// Types that are valid to be assigned to ValueSet:
	//	*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri
	//	*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference
	ValueSet             isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet `protobuf_oneof:"value_set"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) Reset() {
	*m = ElementDefinition_ElementDefinitionBinding_ValueSet{}
}
func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) String() string {
	return proto.CompactTextString(m)
}
func (*ElementDefinition_ElementDefinitionBinding_ValueSet) ProtoMessage() {}
func (*ElementDefinition_ElementDefinitionBinding_ValueSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 10, 0}
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet.Unmarshal(m, b)
}
func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet.Merge(m, src)
}
func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet.Size(m)
}
func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_ElementDefinitionBinding_ValueSet proto.InternalMessageInfo

type isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet interface {
	isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet()
}

type ElementDefinition_ElementDefinitionBinding_ValueSet_Uri struct {
	Uri *Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_ElementDefinitionBinding_ValueSet_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri) isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet() {
}

func (*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference) isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet() {
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) GetValueSet() isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) GetUri() *Uri {
	if x, ok := m.GetValueSet().(*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri); ok {
		return x.Uri
	}
	return nil
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) GetReference() *Reference {
	if x, ok := m.GetValueSet().(*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ElementDefinition_ElementDefinitionBinding_ValueSet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofMarshaler, _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofUnmarshaler, _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofSizer, []interface{}{
		(*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri)(nil),
		(*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference)(nil),
	}
}

func _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ElementDefinition_ElementDefinitionBinding_ValueSet)
	// value_set
	switch x := m.ValueSet.(type) {
	case *ElementDefinition_ElementDefinitionBinding_ValueSet_Uri:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uri); err != nil {
			return err
		}
	case *ElementDefinition_ElementDefinitionBinding_ValueSet_Reference:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ElementDefinition_ElementDefinitionBinding_ValueSet.ValueSet has unexpected type %T", x)
	}
	return nil
}

func _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ElementDefinition_ElementDefinitionBinding_ValueSet)
	switch tag {
	case 1: // value_set.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Uri)
		err := b.DecodeMessage(msg)
		m.ValueSet = &ElementDefinition_ElementDefinitionBinding_ValueSet_Uri{msg}
		return true, err
	case 2: // value_set.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.ValueSet = &ElementDefinition_ElementDefinitionBinding_ValueSet_Reference{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ElementDefinition_ElementDefinitionBinding_ValueSet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ElementDefinition_ElementDefinitionBinding_ValueSet)
	// value_set
	switch x := m.ValueSet.(type) {
	case *ElementDefinition_ElementDefinitionBinding_ValueSet_Uri:
		s := proto.Size(x.Uri)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ElementDefinition_ElementDefinitionBinding_ValueSet_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Map element to another set of definitions
type ElementDefinition_Mapping struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to mapping declaration
	Identity *Id `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Computable language of mapping
	Language *MimeTypeCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details of the mapping
	Map *String `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
	// Comments about the mapping or its use
	Comment              *String  `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElementDefinition_Mapping) Reset()         { *m = ElementDefinition_Mapping{} }
func (m *ElementDefinition_Mapping) String() string { return proto.CompactTextString(m) }
func (*ElementDefinition_Mapping) ProtoMessage()    {}
func (*ElementDefinition_Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{5, 11}
}

func (m *ElementDefinition_Mapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementDefinition_Mapping.Unmarshal(m, b)
}
func (m *ElementDefinition_Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementDefinition_Mapping.Marshal(b, m, deterministic)
}
func (m *ElementDefinition_Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementDefinition_Mapping.Merge(m, src)
}
func (m *ElementDefinition_Mapping) XXX_Size() int {
	return xxx_messageInfo_ElementDefinition_Mapping.Size(m)
}
func (m *ElementDefinition_Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementDefinition_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_ElementDefinition_Mapping proto.InternalMessageInfo

func (m *ElementDefinition_Mapping) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ElementDefinition_Mapping) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ElementDefinition_Mapping) GetIdentity() *Id {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *ElementDefinition_Mapping) GetLanguage() *MimeTypeCode {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *ElementDefinition_Mapping) GetMap() *String {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *ElementDefinition_Mapping) GetComment() *String {
	if m != nil {
		return m.Comment
	}
	return nil
}

// Auto-generated from StructureDefinition for Narrative.
// A human-readable formatted text, including images.
// See http://hl7.org/fhir/StructureDefinition/Narrative
type Narrative struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// generated | extensions | additional | empty
	Status *NarrativeStatusCode `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Limited xhtml content
	Div                  *Xhtml   `protobuf:"bytes,4,opt,name=div,proto3" json:"div,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Narrative) Reset()         { *m = Narrative{} }
func (m *Narrative) String() string { return proto.CompactTextString(m) }
func (*Narrative) ProtoMessage()    {}
func (*Narrative) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{6}
}

func (m *Narrative) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Narrative.Unmarshal(m, b)
}
func (m *Narrative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Narrative.Marshal(b, m, deterministic)
}
func (m *Narrative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Narrative.Merge(m, src)
}
func (m *Narrative) XXX_Size() int {
	return xxx_messageInfo_Narrative.Size(m)
}
func (m *Narrative) XXX_DiscardUnknown() {
	xxx_messageInfo_Narrative.DiscardUnknown(m)
}

var xxx_messageInfo_Narrative proto.InternalMessageInfo

func (m *Narrative) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Narrative) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *Narrative) GetStatus() *NarrativeStatusCode {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Narrative) GetDiv() *Xhtml {
	if m != nil {
		return m.Div
	}
	return nil
}

// Auto-generated from StructureDefinition for ParameterDefinition.
// Definition of a parameter to a module.
// See http://hl7.org/fhir/StructureDefinition/ParameterDefinition
type ParameterDefinition struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name used to access the parameter value
	Name *Code `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// in | out
	Use *OperationParameterUseCode `protobuf:"bytes,4,opt,name=use,proto3" json:"use,omitempty"`
	// Minimum cardinality
	Min *Integer `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum cardinality (a number of *)
	Max *String `protobuf:"bytes,6,opt,name=max,proto3" json:"max,omitempty"`
	// A brief description of the parameter
	Documentation *String `protobuf:"bytes,7,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// What type of value
	Type *FHIRAllTypesCode `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// What profile the value is expected to be
	Profile              *Reference `protobuf:"bytes,9,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ParameterDefinition) Reset()         { *m = ParameterDefinition{} }
func (m *ParameterDefinition) String() string { return proto.CompactTextString(m) }
func (*ParameterDefinition) ProtoMessage()    {}
func (*ParameterDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{7}
}

func (m *ParameterDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParameterDefinition.Unmarshal(m, b)
}
func (m *ParameterDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParameterDefinition.Marshal(b, m, deterministic)
}
func (m *ParameterDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParameterDefinition.Merge(m, src)
}
func (m *ParameterDefinition) XXX_Size() int {
	return xxx_messageInfo_ParameterDefinition.Size(m)
}
func (m *ParameterDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ParameterDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ParameterDefinition proto.InternalMessageInfo

func (m *ParameterDefinition) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ParameterDefinition) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ParameterDefinition) GetName() *Code {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ParameterDefinition) GetUse() *OperationParameterUseCode {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *ParameterDefinition) GetMin() *Integer {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *ParameterDefinition) GetMax() *String {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *ParameterDefinition) GetDocumentation() *String {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *ParameterDefinition) GetType() *FHIRAllTypesCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ParameterDefinition) GetProfile() *Reference {
	if m != nil {
		return m.Profile
	}
	return nil
}

// Auto-generated from StructureDefinition for RelatedArtifact.
// Related artifacts for a knowledge resource.
// See http://hl7.org/fhir/StructureDefinition/RelatedArtifact
type RelatedArtifact struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// documentation | justification | citation | predecessor | successor |
	// derived-from | depends-on | composed-of
	Type *RelatedArtifactTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Brief description of the related artifact
	Display *String `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	// Bibliographic citation for the artifact
	Citation *String `protobuf:"bytes,5,opt,name=citation,proto3" json:"citation,omitempty"`
	// Where the artifact can be accessed
	Url *Uri `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// What document is being referenced
	Document *Attachment `protobuf:"bytes,7,opt,name=document,proto3" json:"document,omitempty"`
	// What resource is being referenced
	Resource             *Reference `protobuf:"bytes,8,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RelatedArtifact) Reset()         { *m = RelatedArtifact{} }
func (m *RelatedArtifact) String() string { return proto.CompactTextString(m) }
func (*RelatedArtifact) ProtoMessage()    {}
func (*RelatedArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{8}
}

func (m *RelatedArtifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelatedArtifact.Unmarshal(m, b)
}
func (m *RelatedArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelatedArtifact.Marshal(b, m, deterministic)
}
func (m *RelatedArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelatedArtifact.Merge(m, src)
}
func (m *RelatedArtifact) XXX_Size() int {
	return xxx_messageInfo_RelatedArtifact.Size(m)
}
func (m *RelatedArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_RelatedArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_RelatedArtifact proto.InternalMessageInfo

func (m *RelatedArtifact) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RelatedArtifact) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *RelatedArtifact) GetType() *RelatedArtifactTypeCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *RelatedArtifact) GetDisplay() *String {
	if m != nil {
		return m.Display
	}
	return nil
}

func (m *RelatedArtifact) GetCitation() *String {
	if m != nil {
		return m.Citation
	}
	return nil
}

func (m *RelatedArtifact) GetUrl() *Uri {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *RelatedArtifact) GetDocument() *Attachment {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *RelatedArtifact) GetResource() *Reference {
	if m != nil {
		return m.Resource
	}
	return nil
}

// Auto-generated from StructureDefinition for Resource, last updated
// 2017-04-19T07:44:43.294+10:00. Base Resource. See
// http://hl7.org/fhir/StructureDefinition/Resource
type Resource struct {
	// Logical id of this artifact
	Id *Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language             *LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{9}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Resource) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Resource) GetImplicitRules() *Uri {
	if m != nil {
		return m.ImplicitRules
	}
	return nil
}

func (m *Resource) GetLanguage() *LanguageCode {
	if m != nil {
		return m.Language
	}
	return nil
}

// Auto-generated from StructureDefinition for TriggerDefinition.
// Defines an expected trigger for a module.
// See http://hl7.org/fhir/StructureDefinition/TriggerDefinition
type TriggerDefinition struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// named-event | periodic | data-added | data-modified | data-removed |
	// data-accessed | data-access-ended
	Type *TriggerTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Triggering event name
	EventName   *String                        `protobuf:"bytes,4,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventTiming *TriggerDefinition_EventTiming `protobuf:"bytes,5,opt,name=event_timing,json=eventTiming,proto3" json:"event_timing,omitempty"`
	// Triggering data of the event
	EventData            *DataRequirement `protobuf:"bytes,6,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TriggerDefinition) Reset()         { *m = TriggerDefinition{} }
func (m *TriggerDefinition) String() string { return proto.CompactTextString(m) }
func (*TriggerDefinition) ProtoMessage()    {}
func (*TriggerDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{10}
}

func (m *TriggerDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerDefinition.Unmarshal(m, b)
}
func (m *TriggerDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerDefinition.Marshal(b, m, deterministic)
}
func (m *TriggerDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDefinition.Merge(m, src)
}
func (m *TriggerDefinition) XXX_Size() int {
	return xxx_messageInfo_TriggerDefinition.Size(m)
}
func (m *TriggerDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDefinition proto.InternalMessageInfo

func (m *TriggerDefinition) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TriggerDefinition) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *TriggerDefinition) GetType() *TriggerTypeCode {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TriggerDefinition) GetEventName() *String {
	if m != nil {
		return m.EventName
	}
	return nil
}

func (m *TriggerDefinition) GetEventTiming() *TriggerDefinition_EventTiming {
	if m != nil {
		return m.EventTiming
	}
	return nil
}

func (m *TriggerDefinition) GetEventData() *DataRequirement {
	if m != nil {
		return m.EventData
	}
	return nil
}

// Timing of the event
type TriggerDefinition_EventTiming struct {
	// Types that are valid to be assigned to EventTiming:
	//	*TriggerDefinition_EventTiming_Timing
	//	*TriggerDefinition_EventTiming_Reference
	//	*TriggerDefinition_EventTiming_Date
	//	*TriggerDefinition_EventTiming_DateTime
	EventTiming          isTriggerDefinition_EventTiming_EventTiming `protobuf_oneof:"event_timing"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *TriggerDefinition_EventTiming) Reset()         { *m = TriggerDefinition_EventTiming{} }
func (m *TriggerDefinition_EventTiming) String() string { return proto.CompactTextString(m) }
func (*TriggerDefinition_EventTiming) ProtoMessage()    {}
func (*TriggerDefinition_EventTiming) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{10, 0}
}

func (m *TriggerDefinition_EventTiming) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerDefinition_EventTiming.Unmarshal(m, b)
}
func (m *TriggerDefinition_EventTiming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerDefinition_EventTiming.Marshal(b, m, deterministic)
}
func (m *TriggerDefinition_EventTiming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDefinition_EventTiming.Merge(m, src)
}
func (m *TriggerDefinition_EventTiming) XXX_Size() int {
	return xxx_messageInfo_TriggerDefinition_EventTiming.Size(m)
}
func (m *TriggerDefinition_EventTiming) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDefinition_EventTiming.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDefinition_EventTiming proto.InternalMessageInfo

type isTriggerDefinition_EventTiming_EventTiming interface {
	isTriggerDefinition_EventTiming_EventTiming()
}

type TriggerDefinition_EventTiming_Timing struct {
	Timing *Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type TriggerDefinition_EventTiming_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

type TriggerDefinition_EventTiming_Date struct {
	Date *Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type TriggerDefinition_EventTiming_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,4,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*TriggerDefinition_EventTiming_Timing) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_Reference) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_Date) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_DateTime) isTriggerDefinition_EventTiming_EventTiming() {}

func (m *TriggerDefinition_EventTiming) GetEventTiming() isTriggerDefinition_EventTiming_EventTiming {
	if m != nil {
		return m.EventTiming
	}
	return nil
}

func (m *TriggerDefinition_EventTiming) GetTiming() *Timing {
	if x, ok := m.GetEventTiming().(*TriggerDefinition_EventTiming_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *TriggerDefinition_EventTiming) GetReference() *Reference {
	if x, ok := m.GetEventTiming().(*TriggerDefinition_EventTiming_Reference); ok {
		return x.Reference
	}
	return nil
}

func (m *TriggerDefinition_EventTiming) GetDate() *Date {
	if x, ok := m.GetEventTiming().(*TriggerDefinition_EventTiming_Date); ok {
		return x.Date
	}
	return nil
}

func (m *TriggerDefinition_EventTiming) GetDateTime() *DateTime {
	if x, ok := m.GetEventTiming().(*TriggerDefinition_EventTiming_DateTime); ok {
		return x.DateTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggerDefinition_EventTiming) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggerDefinition_EventTiming_OneofMarshaler, _TriggerDefinition_EventTiming_OneofUnmarshaler, _TriggerDefinition_EventTiming_OneofSizer, []interface{}{
		(*TriggerDefinition_EventTiming_Timing)(nil),
		(*TriggerDefinition_EventTiming_Reference)(nil),
		(*TriggerDefinition_EventTiming_Date)(nil),
		(*TriggerDefinition_EventTiming_DateTime)(nil),
	}
}

func _TriggerDefinition_EventTiming_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggerDefinition_EventTiming)
	// event_timing
	switch x := m.EventTiming.(type) {
	case *TriggerDefinition_EventTiming_Timing:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timing); err != nil {
			return err
		}
	case *TriggerDefinition_EventTiming_Reference:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reference); err != nil {
			return err
		}
	case *TriggerDefinition_EventTiming_Date:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Date); err != nil {
			return err
		}
	case *TriggerDefinition_EventTiming_DateTime:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateTime); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TriggerDefinition_EventTiming.EventTiming has unexpected type %T", x)
	}
	return nil
}

func _TriggerDefinition_EventTiming_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggerDefinition_EventTiming)
	switch tag {
	case 1: // event_timing.timing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Timing)
		err := b.DecodeMessage(msg)
		m.EventTiming = &TriggerDefinition_EventTiming_Timing{msg}
		return true, err
	case 2: // event_timing.reference
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Reference)
		err := b.DecodeMessage(msg)
		m.EventTiming = &TriggerDefinition_EventTiming_Reference{msg}
		return true, err
	case 3: // event_timing.date
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Date)
		err := b.DecodeMessage(msg)
		m.EventTiming = &TriggerDefinition_EventTiming_Date{msg}
		return true, err
	case 4: // event_timing.date_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTime)
		err := b.DecodeMessage(msg)
		m.EventTiming = &TriggerDefinition_EventTiming_DateTime{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TriggerDefinition_EventTiming_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggerDefinition_EventTiming)
	// event_timing
	switch x := m.EventTiming.(type) {
	case *TriggerDefinition_EventTiming_Timing:
		s := proto.Size(x.Timing)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerDefinition_EventTiming_Reference:
		s := proto.Size(x.Reference)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerDefinition_EventTiming_Date:
		s := proto.Size(x.Date)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerDefinition_EventTiming_DateTime:
		s := proto.Size(x.DateTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Auto-generated from StructureDefinition for UsageContext.
// Describes the context of use for a conformance or knowledge resource.
// See http://hl7.org/fhir/StructureDefinition/UsageContext
type UsageContext struct {
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Type of context being specified
	Code                 *Coding             `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Value                *UsageContext_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UsageContext) Reset()         { *m = UsageContext{} }
func (m *UsageContext) String() string { return proto.CompactTextString(m) }
func (*UsageContext) ProtoMessage()    {}
func (*UsageContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{11}
}

func (m *UsageContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageContext.Unmarshal(m, b)
}
func (m *UsageContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageContext.Marshal(b, m, deterministic)
}
func (m *UsageContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageContext.Merge(m, src)
}
func (m *UsageContext) XXX_Size() int {
	return xxx_messageInfo_UsageContext.Size(m)
}
func (m *UsageContext) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageContext.DiscardUnknown(m)
}

var xxx_messageInfo_UsageContext proto.InternalMessageInfo

func (m *UsageContext) GetId() *String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UsageContext) GetExtension() []*Extension {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *UsageContext) GetCode() *Coding {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *UsageContext) GetValue() *UsageContext_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Value that defines the context
type UsageContext_Value struct {
	// Types that are valid to be assigned to Value:
	//	*UsageContext_Value_CodeableConcept
	//	*UsageContext_Value_Quantity
	//	*UsageContext_Value_Range
	Value                isUsageContext_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UsageContext_Value) Reset()         { *m = UsageContext_Value{} }
func (m *UsageContext_Value) String() string { return proto.CompactTextString(m) }
func (*UsageContext_Value) ProtoMessage()    {}
func (*UsageContext_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_cef6af17eeb39dc2, []int{11, 0}
}

func (m *UsageContext_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageContext_Value.Unmarshal(m, b)
}
func (m *UsageContext_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageContext_Value.Marshal(b, m, deterministic)
}
func (m *UsageContext_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageContext_Value.Merge(m, src)
}
func (m *UsageContext_Value) XXX_Size() int {
	return xxx_messageInfo_UsageContext_Value.Size(m)
}
func (m *UsageContext_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageContext_Value.DiscardUnknown(m)
}

var xxx_messageInfo_UsageContext_Value proto.InternalMessageInfo

type isUsageContext_Value_Value interface {
	isUsageContext_Value_Value()
}

type UsageContext_Value_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsageContext_Value_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type UsageContext_Value_Range struct {
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

func (*UsageContext_Value_CodeableConcept) isUsageContext_Value_Value() {}

func (*UsageContext_Value_Quantity) isUsageContext_Value_Value() {}

func (*UsageContext_Value_Range) isUsageContext_Value_Value() {}

func (m *UsageContext_Value) GetValue() isUsageContext_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UsageContext_Value) GetCodeableConcept() *CodeableConcept {
	if x, ok := m.GetValue().(*UsageContext_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (m *UsageContext_Value) GetQuantity() *Quantity {
	if x, ok := m.GetValue().(*UsageContext_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (m *UsageContext_Value) GetRange() *Range {
	if x, ok := m.GetValue().(*UsageContext_Value_Range); ok {
		return x.Range
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UsageContext_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UsageContext_Value_OneofMarshaler, _UsageContext_Value_OneofUnmarshaler, _UsageContext_Value_OneofSizer, []interface{}{
		(*UsageContext_Value_CodeableConcept)(nil),
		(*UsageContext_Value_Quantity)(nil),
		(*UsageContext_Value_Range)(nil),
	}
}

func _UsageContext_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UsageContext_Value)
	// value
	switch x := m.Value.(type) {
	case *UsageContext_Value_CodeableConcept:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeableConcept); err != nil {
			return err
		}
	case *UsageContext_Value_Quantity:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quantity); err != nil {
			return err
		}
	case *UsageContext_Value_Range:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UsageContext_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _UsageContext_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UsageContext_Value)
	switch tag {
	case 1: // value.codeable_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeableConcept)
		err := b.DecodeMessage(msg)
		m.Value = &UsageContext_Value_CodeableConcept{msg}
		return true, err
	case 2: // value.quantity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Quantity)
		err := b.DecodeMessage(msg)
		m.Value = &UsageContext_Value_Quantity{msg}
		return true, err
	case 3: // value.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Value = &UsageContext_Value_Range{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UsageContext_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UsageContext_Value)
	// value
	switch x := m.Value.(type) {
	case *UsageContext_Value_CodeableConcept:
		s := proto.Size(x.CodeableConcept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UsageContext_Value_Quantity:
		s := proto.Size(x.Quantity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UsageContext_Value_Range:
		s := proto.Size(x.Range)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*BackboneElement)(nil), "google.fhir.stu3.proto.BackboneElement")
	proto.RegisterType((*ContactDetail)(nil), "google.fhir.stu3.proto.ContactDetail")
	proto.RegisterType((*Contributor)(nil), "google.fhir.stu3.proto.Contributor")
	proto.RegisterType((*DataRequirement)(nil), "google.fhir.stu3.proto.DataRequirement")
	proto.RegisterType((*DataRequirement_CodeFilter)(nil), "google.fhir.stu3.proto.DataRequirement.CodeFilter")
	proto.RegisterType((*DataRequirement_CodeFilter_ValueSet)(nil), "google.fhir.stu3.proto.DataRequirement.CodeFilter.ValueSet")
	proto.RegisterType((*DataRequirement_DateFilter)(nil), "google.fhir.stu3.proto.DataRequirement.DateFilter")
	proto.RegisterType((*DataRequirement_DateFilter_Value)(nil), "google.fhir.stu3.proto.DataRequirement.DateFilter.Value")
	proto.RegisterType((*Element)(nil), "google.fhir.stu3.proto.Element")
	proto.RegisterType((*ElementDefinition)(nil), "google.fhir.stu3.proto.ElementDefinition")
	proto.RegisterType((*ElementDefinition_Slicing)(nil), "google.fhir.stu3.proto.ElementDefinition.Slicing")
	proto.RegisterType((*ElementDefinition_Slicing_Discriminator)(nil), "google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator")
	proto.RegisterType((*ElementDefinition_Base)(nil), "google.fhir.stu3.proto.ElementDefinition.Base")
	proto.RegisterType((*ElementDefinition_TypeRef)(nil), "google.fhir.stu3.proto.ElementDefinition.TypeRef")
	proto.RegisterType((*ElementDefinition_DefaultValue)(nil), "google.fhir.stu3.proto.ElementDefinition.DefaultValue")
	proto.RegisterType((*ElementDefinition_Fixed)(nil), "google.fhir.stu3.proto.ElementDefinition.Fixed")
	proto.RegisterType((*ElementDefinition_Pattern)(nil), "google.fhir.stu3.proto.ElementDefinition.Pattern")
	proto.RegisterType((*ElementDefinition_Example)(nil), "google.fhir.stu3.proto.ElementDefinition.Example")
	proto.RegisterType((*ElementDefinition_Example_Value)(nil), "google.fhir.stu3.proto.ElementDefinition.Example.Value")
	proto.RegisterType((*ElementDefinition_MinValue)(nil), "google.fhir.stu3.proto.ElementDefinition.MinValue")
	proto.RegisterType((*ElementDefinition_MaxValue)(nil), "google.fhir.stu3.proto.ElementDefinition.MaxValue")
	proto.RegisterType((*ElementDefinition_Constraint)(nil), "google.fhir.stu3.proto.ElementDefinition.Constraint")
	proto.RegisterType((*ElementDefinition_ElementDefinitionBinding)(nil), "google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding")
	proto.RegisterType((*ElementDefinition_ElementDefinitionBinding_ValueSet)(nil), "google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.ValueSet")
	proto.RegisterType((*ElementDefinition_Mapping)(nil), "google.fhir.stu3.proto.ElementDefinition.Mapping")
	proto.RegisterType((*Narrative)(nil), "google.fhir.stu3.proto.Narrative")
	proto.RegisterType((*ParameterDefinition)(nil), "google.fhir.stu3.proto.ParameterDefinition")
	proto.RegisterType((*RelatedArtifact)(nil), "google.fhir.stu3.proto.RelatedArtifact")
	proto.RegisterType((*Resource)(nil), "google.fhir.stu3.proto.Resource")
	proto.RegisterType((*TriggerDefinition)(nil), "google.fhir.stu3.proto.TriggerDefinition")
	proto.RegisterType((*TriggerDefinition_EventTiming)(nil), "google.fhir.stu3.proto.TriggerDefinition.EventTiming")
	proto.RegisterType((*UsageContext)(nil), "google.fhir.stu3.proto.UsageContext")
	proto.RegisterType((*UsageContext_Value)(nil), "google.fhir.stu3.proto.UsageContext.Value")
}

func init() { proto.RegisterFile("proto/stu3/metadatatypes.proto", fileDescriptor_cef6af17eeb39dc2) }

var fileDescriptor_cef6af17eeb39dc2 = []byte{
	// 3361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0xd7, 0x7e, 0xef, 0x3e, 0x49, 0x76, 0x3c, 0x71, 0x1d, 0x76, 0xe3, 0x38, 0xce, 0x26, 0x69,
	0x83, 0xb4, 0x91, 0x1c, 0x7f, 0xc4, 0x8a, 0x14, 0x7f, 0x68, 0x25, 0x3b, 0x32, 0x1c, 0x39, 0x0a,
	0xd7, 0x49, 0x8a, 0x7e, 0x60, 0x33, 0x5a, 0x8e, 0x56, 0x03, 0x2f, 0xc9, 0x0d, 0x39, 0x54, 0xa4,
	0x4b, 0xd1, 0x4b, 0x91, 0x3f, 0xa1, 0xe8, 0xa9, 0xff, 0x40, 0x0a, 0x14, 0x3d, 0x34, 0x97, 0x02,
	0xfd, 0xc8, 0x21, 0x28, 0x72, 0x68, 0xd0, 0x43, 0xd0, 0x4b, 0x11, 0x14, 0x69, 0x4f, 0xbd, 0x04,
	0x3d, 0xf5, 0x50, 0xb4, 0xc5, 0x7c, 0xf0, 0x6b, 0x63, 0x52, 0xa4, 0xdc, 0x4a, 0x0d, 0xc0, 0x1b,
	0x97, 0xfb, 0x7e, 0x6f, 0x66, 0xde, 0x7b, 0x1c, 0xfe, 0xde, 0x1b, 0xce, 0xc0, 0x99, 0xb1, 0x63,
	0x33, 0x7b, 0xde, 0x65, 0xde, 0x85, 0x79, 0x93, 0x30, 0x6c, 0x60, 0x86, 0xd9, 0xde, 0x98, 0xb8,
	0x73, 0xe2, 0x0f, 0x74, 0x6a, 0x68, 0xdb, 0xc3, 0x11, 0x99, 0xdb, 0xda, 0xa6, 0xce, 0x1c, 0x97,
	0x92, 0xf7, 0xdb, 0xa7, 0x23, 0x38, 0x6c, 0x59, 0x36, 0xc3, 0x8c, 0xda, 0x96, 0x42, 0xb5, 0x4f,
	0x45, 0xfe, 0x1d, 0xd8, 0x86, 0xaf, 0xad, 0xdd, 0x8e, 0xdc, 0x9f, 0x68, 0xa9, 0xf3, 0xe3, 0x32,
	0x1c, 0xef, 0xe2, 0xc1, 0xbd, 0x4d, 0xdb, 0x22, 0x37, 0x46, 0xc4, 0x24, 0x16, 0x43, 0x73, 0x50,
	0xa6, 0x86, 0x56, 0x3a, 0x5b, 0x7a, 0x66, 0xfa, 0xfc, 0x99, 0xb9, 0xfb, 0x77, 0x65, 0xae, 0xc7,
	0x1c, 0x6a, 0x0d, 0xf5, 0x32, 0x35, 0xd0, 0x35, 0x68, 0x91, 0x5d, 0x46, 0x2c, 0x97, 0xda, 0x96,
	0x56, 0x3e, 0x5b, 0x79, 0x66, 0xfa, 0xfc, 0x13, 0x49, 0xb0, 0x1b, 0xbe, 0xa0, 0x1e, 0x62, 0xd0,
	0x06, 0x20, 0xd3, 0x36, 0xe8, 0x16, 0x25, 0x4e, 0x3f, 0xd4, 0x54, 0xc9, 0xaa, 0xe9, 0x84, 0x0f,
	0x0e, 0x6e, 0x2d, 0xae, 0xfc, 0xfa, 0x27, 0x9f, 0xfd, 0xa2, 0x56, 0xfe, 0xf9, 0xbf, 0xfe, 0xf2,
	0xa3, 0xfa, 0xe5, 0x6d, 0xc6, 0xc6, 0x8b, 0xf3, 0xf3, 0xdb, 0xa3, 0xcb, 0x73, 0xb6, 0x33, 0x9c,
	0xe7, 0x8a, 0xe6, 0x7b, 0xcc, 0xf1, 0x06, 0xcc, 0x73, 0xc8, 0x2a, 0xd9, 0xa2, 0x16, 0xe5, 0x66,
	0x9c, 0x9f, 0xb0, 0x43, 0xe7, 0xfd, 0x32, 0xcc, 0xae, 0xd8, 0x16, 0xc3, 0x03, 0xb6, 0x4a, 0x18,
	0xa6, 0xa3, 0xc3, 0xb7, 0xcc, 0x79, 0xa8, 0x5a, 0xd8, 0x24, 0x5a, 0x25, 0x53, 0x93, 0x42, 0x16,
	0x5d, 0x85, 0x06, 0x23, 0x23, 0x32, 0xb0, 0x4d, 0xad, 0x2a, 0x9a, 0x7c, 0x2a, 0x09, 0xa6, 0x06,
	0xb7, 0x61, 0x53, 0x8b, 0xe9, 0x3e, 0x68, 0x71, 0x39, 0x62, 0xbb, 0x4b, 0x59, 0x6d, 0x17, 0xb3,
	0x53, 0xe7, 0x87, 0x15, 0x98, 0xe6, 0x77, 0x1c, 0xba, 0xe9, 0x31, 0xdb, 0x39, 0x7c, 0xbb, 0xbd,
	0x0c, 0x55, 0x1e, 0xe5, 0xca, 0x6e, 0xdf, 0x48, 0x33, 0x80, 0xea, 0xe3, 0xdd, 0xbd, 0x31, 0x59,
	0xb1, 0x0d, 0xd2, 0xad, 0x7f, 0xfe, 0xf1, 0xbb, 0x7f, 0xab, 0x96, 0x74, 0xa1, 0x00, 0x2d, 0x2a,
	0x07, 0x54, 0xb3, 0xf4, 0x3d, 0xc4, 0x0a, 0x47, 0x5c, 0x83, 0xc6, 0x40, 0x9a, 0x45, 0xab, 0x89,
	0x31, 0x3c, 0xbd, 0x8f, 0x23, 0xa4, 0xf5, 0x74, 0x1f, 0xb5, 0x78, 0x2d, 0xe2, 0x89, 0x0b, 0x79,
	0x3c, 0xa1, 0xc6, 0xd4, 0xf9, 0xeb, 0x2c, 0x1c, 0x5f, 0xc5, 0x0c, 0xeb, 0xe4, 0x6d, 0x8f, 0x3a,
	0x47, 0xf4, 0x74, 0xaf, 0xc6, 0x7c, 0xf1, 0x4c, 0x12, 0xf6, 0xe6, 0xda, 0x2d, 0x7d, 0x79, 0x34,
	0xe2, 0x7e, 0x70, 0xef, 0xe3, 0x88, 0x4b, 0xd0, 0x18, 0x3b, 0xf6, 0x16, 0x1d, 0x11, 0x15, 0xd5,
	0x8f, 0x26, 0x29, 0x7a, 0xdd, 0xa1, 0xba, 0x2f, 0x8b, 0x96, 0x61, 0xc6, 0xf4, 0x5c, 0xd6, 0x77,
	0xbd, 0xf1, 0xd8, 0x76, 0x7c, 0x47, 0xec, 0x37, 0xee, 0x69, 0x8e, 0xe9, 0x49, 0x08, 0xea, 0xc1,
	0x34, 0x9f, 0x4d, 0xfb, 0x5b, 0x74, 0xc4, 0x88, 0xa3, 0xd5, 0x85, 0x86, 0xf3, 0x49, 0x1a, 0x26,
	0xcc, 0x3d, 0xc7, 0x87, 0x72, 0x53, 0x20, 0x75, 0x18, 0x04, 0xd7, 0x5c, 0xa9, 0x81, 0x59, 0xa0,
	0xb4, 0x91, 0x4f, 0xe9, 0x2a, 0x66, 0x81, 0x52, 0x23, 0xb8, 0x6e, 0xff, 0xbe, 0x06, 0x10, 0xb6,
	0x77, 0xf8, 0x9e, 0x5e, 0x84, 0xea, 0x18, 0xb3, 0xed, 0x6c, 0xb3, 0x55, 0xe8, 0x5f, 0x8e, 0x41,
	0x6f, 0x41, 0x6b, 0x07, 0x8f, 0x3c, 0xd2, 0x77, 0x09, 0x53, 0x4f, 0xdb, 0x52, 0x7e, 0x1b, 0xcf,
	0xbd, 0xc1, 0x75, 0xf4, 0x08, 0xeb, 0xd6, 0xff, 0xf1, 0xe7, 0xcf, 0x7e, 0x57, 0x2b, 0xe9, 0xcd,
	0x1d, 0x75, 0x07, 0x2d, 0x01, 0xc8, 0x16, 0xb8, 0x1b, 0x54, 0x20, 0x9c, 0x4e, 0x7e, 0x22, 0x0d,
	0xa2, 0xcb, 0x1e, 0xf1, 0x4b, 0x1e, 0x47, 0x01, 0x98, 0x5a, 0x43, 0x15, 0x05, 0x67, 0x52, 0xe0,
	0x22, 0x8e, 0x7c, 0x05, 0xd4, 0x1a, 0xa2, 0xef, 0xc1, 0xa9, 0xb0, 0x7d, 0xbc, 0x39, 0xe2, 0x17,
	0xd6, 0x80, 0x8c, 0x99, 0xf2, 0xfe, 0xd7, 0xd3, 0xfa, 0xc2, 0xe5, 0x57, 0xa4, 0xb8, 0x7e, 0x32,
	0xe8, 0x56, 0xe4, 0x6e, 0xfb, 0x0f, 0x25, 0x68, 0xfa, 0xa3, 0x47, 0x57, 0x61, 0xc6, 0x15, 0x56,
	0xee, 0x0b, 0xd9, 0x6c, 0x41, 0xb0, 0x36, 0xa5, 0xd7, 0x25, 0x0a, 0xed, 0x41, 0xcb, 0x21, 0x5b,
	0xc4, 0x21, 0xd6, 0x80, 0x68, 0x65, 0x01, 0x4e, 0x0c, 0x05, 0xdd, 0x17, 0xec, 0xbe, 0xf0, 0xf7,
	0x7f, 0xff, 0xf3, 0xb7, 0xf5, 0x73, 0x59, 0x67, 0x2a, 0xbf, 0xb7, 0x6b, 0x53, 0x7a, 0xd8, 0x5a,
	0x77, 0x3a, 0x12, 0x08, 0xed, 0x4f, 0x2b, 0x00, 0x61, 0xb0, 0x7f, 0xb9, 0x22, 0xfa, 0x0d, 0xa8,
	0x49, 0xe3, 0xcb, 0x68, 0x5e, 0xc8, 0xff, 0x70, 0xcb, 0x68, 0x0e, 0x42, 0x59, 0xaa, 0x6b, 0x7f,
	0x54, 0x82, 0x9a, 0xf8, 0x83, 0x0f, 0x4f, 0x4c, 0x22, 0x8c, 0x9a, 0xbe, 0x8b, 0xcf, 0xa6, 0xb4,
	0x42, 0xee, 0x52, 0x93, 0xac, 0x4d, 0xe9, 0x4d, 0x43, 0x5d, 0xa3, 0x05, 0xa8, 0x8f, 0x89, 0x43,
	0x6d, 0x43, 0xf9, 0x38, 0x71, 0x80, 0x1b, 0x42, 0x8a, 0x07, 0x88, 0x94, 0x47, 0x57, 0xa1, 0x69,
	0x78, 0x8e, 0xa0, 0x9f, 0xca, 0x38, 0xc9, 0x2d, 0x2b, 0x39, 0xd1, 0xb2, 0xba, 0xee, 0x36, 0x94,
	0x71, 0x0e, 0xc6, 0xd4, 0x26, 0x4c, 0xd6, 0x79, 0xbf, 0x04, 0x8d, 0xa3, 0x62, 0xaf, 0x8b, 0x4b,
	0x91, 0x11, 0xcc, 0x67, 0x1d, 0x81, 0xcf, 0x31, 0xff, 0xf8, 0x83, 0x12, 0x9c, 0x50, 0x3f, 0xc2,
	0xbf, 0xbf, 0x5c, 0x81, 0xfe, 0x6d, 0x38, 0xe6, 0x90, 0xb1, 0x43, 0x5c, 0x62, 0xc9, 0x84, 0x44,
	0xbd, 0xa1, 0x13, 0x5f, 0x67, 0x1b, 0x8e, 0x3d, 0x26, 0x0e, 0xdb, 0xd3, 0x63, 0x28, 0x31, 0xe5,
	0x4e, 0x68, 0x42, 0x57, 0x00, 0xdc, 0x11, 0x1d, 0x90, 0xbe, 0x60, 0x61, 0xb5, 0x4c, 0x06, 0x69,
	0x09, 0xc4, 0x1d, 0x4e, 0xc1, 0x2e, 0x42, 0x6d, 0x84, 0x37, 0xc9, 0x48, 0xab, 0x67, 0x42, 0x4a,
	0x61, 0xce, 0xba, 0xc5, 0x3b, 0xa2, 0x91, 0x69, 0x92, 0x17, 0xb2, 0xe8, 0x36, 0x34, 0x78, 0xb3,
	0xfc, 0xdd, 0xd0, 0x14, 0x6d, 0x3d, 0x9f, 0x68, 0xff, 0x49, 0x6f, 0xcf, 0xf5, 0x24, 0x50, 0xf7,
	0x35, 0xf0, 0x6e, 0xbb, 0xdb, 0x9c, 0xae, 0xb4, 0xb2, 0x75, 0x5b, 0x08, 0xa3, 0xeb, 0x00, 0x46,
	0xa0, 0x54, 0x83, 0xf4, 0xa7, 0x72, 0x1d, 0x3b, 0xf7, 0x0c, 0xfb, 0x1d, 0x4b, 0x8f, 0x60, 0xd0,
	0x22, 0x67, 0xac, 0x26, 0xef, 0x9d, 0x36, 0x9d, 0x11, 0xee, 0x03, 0xd0, 0x2a, 0xcc, 0x38, 0xe1,
	0x23, 0xe9, 0x6a, 0x33, 0x19, 0x15, 0xc4, 0x50, 0x7c, 0xe4, 0x78, 0x44, 0xb1, 0xab, 0xcd, 0x66,
	0x22, 0x6a, 0x52, 0x18, 0x5d, 0x82, 0x8a, 0x49, 0x2d, 0xed, 0x98, 0x68, 0xf2, 0xc9, 0x44, 0x62,
	0x68, 0xb9, 0x74, 0x68, 0x11, 0xe3, 0x96, 0xc5, 0x74, 0x2e, 0x8f, 0xce, 0x41, 0xc5, 0xc4, 0xbb,
	0xda, 0xf1, 0x4c, 0x46, 0xe6, 0xa2, 0xa8, 0x0b, 0xd5, 0x4d, 0xec, 0x12, 0xed, 0x21, 0x01, 0x99,
	0xcb, 0xee, 0xe2, 0x2e, 0x76, 0x89, 0x2e, 0xb0, 0x68, 0x0d, 0x4e, 0x70, 0x82, 0x4f, 0x2c, 0xd6,
	0x0f, 0xdf, 0xb1, 0x27, 0x84, 0xc2, 0x54, 0x4e, 0xfb, 0x90, 0x42, 0x05, 0xef, 0x5b, 0x74, 0x43,
	0x31, 0x6b, 0x24, 0x6c, 0x95, 0x23, 0xe0, 0x38, 0xc9, 0xd6, 0xc9, 0x96, 0xa2, 0xd6, 0x03, 0x98,
	0x35, 0xc8, 0x16, 0xf6, 0x46, 0x4c, 0xb1, 0x85, 0x87, 0x45, 0x67, 0x5e, 0xc8, 0xae, 0x6f, 0x55,
	0xc2, 0xe3, 0xaf, 0xab, 0x19, 0x23, 0x72, 0x17, 0xe9, 0x70, 0xd2, 0x24, 0xd8, 0xe2, 0x94, 0xe4,
	0x9d, 0x6d, 0x62, 0xf5, 0x4d, 0xea, 0xba, 0xfc, 0x61, 0x39, 0x99, 0x31, 0x4c, 0x90, 0x42, 0xbf,
	0xb9, 0x4d, 0xac, 0x75, 0x89, 0x45, 0x2b, 0x30, 0x6b, 0x3b, 0x06, 0x71, 0xfa, 0xea, 0x3f, 0xed,
	0x2b, 0x99, 0x3c, 0x39, 0x23, 0x40, 0xeb, 0x12, 0x83, 0xd6, 0xa1, 0xb6, 0x45, 0x77, 0x89, 0xa1,
	0x9d, 0x12, 0xe0, 0xf9, 0xec, 0xa3, 0xbe, 0xc9, 0x61, 0xe1, 0xdb, 0x59, 0x68, 0x41, 0x3d, 0x68,
	0x8c, 0x31, 0x63, 0xc4, 0xb1, 0xb4, 0x47, 0xf2, 0xce, 0x03, 0x1b, 0x12, 0x18, 0xa8, 0xf4, 0x35,
	0xf1, 0xc9, 0x85, 0xec, 0x62, 0x73, 0x3c, 0x22, 0x9a, 0x96, 0xd7, 0xd7, 0x37, 0x24, 0x50, 0xf7,
	0x35, 0xa0, 0x37, 0xa1, 0x65, 0x52, 0x4b, 0xb9, 0xfa, 0xab, 0xa2, 0x8f, 0xe7, 0xb3, 0xab, 0x5b,
	0xa7, 0x56, 0xdc, 0xcd, 0x4d, 0x53, 0xdd, 0x11, 0x8a, 0xf1, 0xae, 0x52, 0xdc, 0xce, 0xad, 0x18,
	0xef, 0x4e, 0x2a, 0x56, 0x77, 0xd0, 0x55, 0x00, 0xae, 0x78, 0x44, 0xac, 0x21, 0xdb, 0xd6, 0x1e,
	0x15, 0x9a, 0x1f, 0x4f, 0xd2, 0x7c, 0xcb, 0x62, 0x64, 0x48, 0x1c, 0x9d, 0xf7, 0xe5, 0x15, 0x81,
	0x40, 0x0b, 0xd0, 0x1a, 0xd8, 0x96, 0x21, 0xe7, 0xc5, 0xd3, 0xc2, 0x80, 0xed, 0x44, 0xb8, 0xa1,
	0x87, 0xc2, 0xe8, 0x2e, 0xc0, 0xc0, 0xb6, 0x5c, 0xe6, 0x60, 0x6a, 0x31, 0xed, 0x31, 0x01, 0xbd,
	0x98, 0x7d, 0x4c, 0x2b, 0x01, 0x56, 0x8f, 0xe8, 0x41, 0xdd, 0x89, 0xa4, 0xf4, 0x4c, 0xfa, 0x88,
	0xba, 0xb6, 0x3d, 0x22, 0xd8, 0x8a, 0x67, 0xa5, 0xd7, 0x61, 0x9a, 0xba, 0x7d, 0xbf, 0xf2, 0xa5,
	0x3d, 0x9e, 0x4d, 0x05, 0x50, 0x77, 0x5d, 0x41, 0xb8, 0x55, 0xa9, 0xdb, 0x77, 0x3d, 0xd3, 0xc4,
	0xce, 0x9e, 0x76, 0x36, 0x9b, 0x82, 0x16, 0x75, 0x7b, 0x12, 0x81, 0xbe, 0x0b, 0x8d, 0x4d, 0x6a,
	0x89, 0x6c, 0xe8, 0x09, 0x01, 0xee, 0xe6, 0x08, 0xca, 0xc9, 0x3b, 0x5d, 0xa9, 0x49, 0xf7, 0x55,
	0xf2, 0x90, 0x37, 0xf1, 0x78, 0xcc, 0xb5, 0x77, 0xf2, 0x86, 0xfc, 0xba, 0x04, 0xea, 0xbe, 0x86,
	0xf6, 0xcf, 0x6a, 0xd0, 0x50, 0x2f, 0xd9, 0xc3, 0xa7, 0x56, 0x04, 0x66, 0x0d, 0xea, 0x0e, 0x1c,
	0x6a, 0x52, 0x0b, 0x33, 0xdb, 0x51, 0x85, 0xcd, 0x6b, 0xb9, 0xf9, 0xc1, 0xdc, 0x6a, 0x54, 0x8d,
	0x1e, 0xd7, 0xca, 0x03, 0xc2, 0x20, 0xfc, 0xc6, 0x58, 0x51, 0xb0, 0x2c, 0x03, 0x8c, 0x42, 0xd0,
	0x8b, 0xd0, 0x10, 0x33, 0x23, 0x31, 0x14, 0xd1, 0xda, 0x37, 0x1a, 0x7c, 0x79, 0x74, 0x13, 0x6a,
	0x8e, 0x37, 0x22, 0xae, 0xe2, 0x59, 0x89, 0x45, 0x1e, 0x9f, 0xe9, 0x70, 0xd9, 0x58, 0x91, 0x47,
	0xc2, 0xdb, 0xef, 0x96, 0x61, 0x36, 0x36, 0xca, 0xc3, 0x77, 0xd7, 0xad, 0x58, 0xb9, 0xea, 0xb9,
	0xc4, 0xac, 0x26, 0xda, 0xcb, 0xe4, 0xe2, 0xa1, 0x20, 0xd5, 0xd5, 0xfc, 0xa4, 0xba, 0xfd, 0x5e,
	0x19, 0xaa, 0x9c, 0x34, 0x7c, 0xb9, 0x52, 0x81, 0x2b, 0x92, 0x88, 0x55, 0x33, 0x13, 0xb1, 0x00,
	0x2f, 0x08, 0xd9, 0x82, 0x24, 0x64, 0xb5, 0x5c, 0x2d, 0x73, 0x48, 0xfb, 0xe3, 0x0a, 0x34, 0x14,
	0xab, 0x39, 0x7c, 0x8b, 0x5d, 0x56, 0xf9, 0x42, 0x65, 0x5f, 0x12, 0x17, 0x9a, 0x4b, 0x24, 0x0d,
	0xb1, 0xa2, 0x66, 0x29, 0x73, 0x51, 0xb3, 0x0b, 0xc7, 0x18, 0x76, 0x86, 0x84, 0xf5, 0x7d, 0x74,
	0x6d, 0x7f, 0xf4, 0xac, 0x84, 0x6c, 0x28, 0x1d, 0xeb, 0x30, 0x8d, 0x87, 0x43, 0x87, 0x0c, 0x65,
	0xc6, 0x26, 0xeb, 0x59, 0x89, 0x85, 0xf2, 0xe5, 0x50, 0x74, 0xdd, 0x36, 0x44, 0xac, 0xeb, 0x51,
	0x3c, 0x7a, 0x0d, 0x60, 0x87, 0x38, 0xdc, 0x1a, 0x7c, 0xc6, 0x6e, 0xa4, 0x33, 0x9f, 0x80, 0xc1,
	0xbe, 0x21, 0x21, 0xc1, 0x74, 0xa0, 0x47, 0x94, 0xb4, 0x3f, 0x41, 0x30, 0x13, 0x25, 0x96, 0xe8,
	0x36, 0xcc, 0x72, 0x02, 0xfd, 0xc2, 0xc5, 0xfe, 0x26, 0xb5, 0xf8, 0x3b, 0x4b, 0xba, 0x38, 0x71,
	0x79, 0xa3, 0x2b, 0x84, 0xbb, 0x42, 0x76, 0x6d, 0x4a, 0x9f, 0xd9, 0x8c, 0xfc, 0x46, 0x4b, 0xd0,
	0xd8, 0x94, 0xb3, 0x98, 0xaa, 0x7d, 0xec, 0x37, 0xd9, 0xad, 0x4d, 0xe9, 0x3e, 0x22, 0x48, 0x10,
	0xa5, 0xc3, 0x53, 0x8b, 0x88, 0x6b, 0x53, 0xca, 0xd7, 0xe7, 0xa1, 0x6a, 0x60, 0xe6, 0x3b, 0xfa,
	0x74, 0x5a, 0x9d, 0x86, 0x63, 0xb8, 0x6c, 0xbc, 0xc0, 0x53, 0x3b, 0x40, 0x81, 0x67, 0x09, 0x1a,
	0x06, 0x19, 0x50, 0x13, 0xfb, 0x19, 0x70, 0xe2, 0x28, 0x57, 0xa5, 0x18, 0x1f, 0xa5, 0x42, 0xa0,
	0x6f, 0x8a, 0xe7, 0x48, 0xfa, 0x32, 0x85, 0x2f, 0xad, 0x4d, 0x89, 0xa7, 0x68, 0x09, 0x1a, 0xd4,
	0x72, 0x19, 0xb6, 0x98, 0x4a, 0x80, 0x53, 0x18, 0x9a, 0x10, 0xe3, 0x4d, 0x29, 0x84, 0x04, 0x0b,
	0xde, 0xa6, 0x52, 0xde, 0xfd, 0xe8, 0x9d, 0x04, 0x8b, 0x4b, 0x74, 0x15, 0x9a, 0xa6, 0x4a, 0x13,
	0xb2, 0x66, 0xbd, 0xdc, 0x48, 0x3e, 0x06, 0xcd, 0x43, 0xc5, 0xa6, 0x86, 0xca, 0x78, 0x13, 0x9f,
	0xa1, 0x57, 0x29, 0x1f, 0x29, 0x97, 0x44, 0x6b, 0x30, 0x33, 0xb6, 0x5d, 0xca, 0xe8, 0x0e, 0xe9,
	0x73, 0x5e, 0x38, 0x93, 0x3e, 0xdd, 0x6d, 0x28, 0xd9, 0x5b, 0x62, 0xcc, 0xd3, 0xe3, 0xf0, 0xe7,
	0x17, 0xea, 0xb4, 0xb3, 0x39, 0xeb, 0xb4, 0xe7, 0xa1, 0x2a, 0x62, 0xe3, 0x58, 0x7a, 0x50, 0xa9,
	0xb8, 0x10, 0xb2, 0xbc, 0xf7, 0x9e, 0x9a, 0x80, 0x45, 0xef, 0x8f, 0x67, 0x9e, 0xac, 0x79, 0xef,
	0xbd, 0xf0, 0x27, 0x37, 0x9c, 0xe7, 0x50, 0x95, 0x0c, 0xa7, 0x4d, 0x3e, 0xdc, 0x70, 0x9e, 0x43,
	0xb9, 0x9b, 0xb1, 0x61, 0x38, 0xc4, 0x75, 0x55, 0xc2, 0x9b, 0xe8, 0xe6, 0x65, 0x29, 0xc6, 0xdd,
	0xac, 0x10, 0xbc, 0x35, 0x3c, 0xe4, 0xc9, 0x6e, 0x6a, 0x6b, 0xcb, 0x43, 0x3e, 0x52, 0x2e, 0x89,
	0x56, 0x01, 0xc2, 0x45, 0x72, 0x95, 0xd4, 0x76, 0x12, 0x71, 0x81, 0xe4, 0xda, 0x94, 0x1e, 0xc1,
	0x09, 0x2d, 0x8c, 0xe1, 0xc1, 0xb6, 0x28, 0x8b, 0x9c, 0xdc, 0x47, 0x4b, 0x20, 0x29, 0xb4, 0x04,
	0xbf, 0xd0, 0x5d, 0x78, 0xe8, 0x0b, 0x65, 0x7f, 0x99, 0xad, 0x66, 0x2d, 0xfb, 0xaf, 0x4d, 0xe9,
	0xc7, 0x07, 0xf1, 0x5b, 0x68, 0x01, 0xea, 0x6a, 0x3d, 0xe2, 0x54, 0x7a, 0xe0, 0xc8, 0x52, 0x15,
	0x0f, 0x1c, 0x29, 0xcf, 0xe7, 0x52, 0xb5, 0xca, 0xd8, 0x1f, 0xdb, 0x3c, 0x0a, 0x1e, 0x49, 0x9f,
	0x4b, 0xa3, 0x4b, 0xc5, 0x7c, 0x2e, 0x1d, 0x44, 0x7e, 0xa3, 0x4b, 0x50, 0x1b, 0xd8, 0x9e, 0xc5,
	0x34, 0x4d, 0x28, 0x79, 0x2c, 0x59, 0x89, 0x27, 0xd0, 0x52, 0x5a, 0xd4, 0x90, 0x29, 0x7f, 0xfe,
	0x07, 0x7e, 0x1e, 0x7a, 0x36, 0x85, 0x6d, 0x09, 0x39, 0x31, 0xb9, 0xa9, 0xeb, 0x58, 0x0d, 0xba,
	0x9d, 0xbf, 0x06, 0x8d, 0xba, 0x00, 0xdb, 0x9e, 0x89, 0x2d, 0x59, 0x5b, 0x7c, 0x34, 0x7d, 0x95,
	0x63, 0x8d, 0x4b, 0xde, 0xc1, 0xe2, 0x39, 0x6a, 0x6d, 0xfb, 0x3f, 0x78, 0x74, 0x50, 0x83, 0x58,
	0x4c, 0x66, 0x61, 0xa7, 0xd3, 0xa3, 0xe3, 0x56, 0x20, 0xc9, 0xa3, 0x23, 0xc4, 0x71, 0x03, 0x9a,
	0xb6, 0x45, 0xf6, 0xb4, 0xc7, 0xd2, 0x0d, 0xb8, 0xce, 0x85, 0xb8, 0x01, 0x85, 0x74, 0xa4, 0x7c,
	0x7f, 0x26, 0x7f, 0xf9, 0xfe, 0x6d, 0x0f, 0x5b, 0x8c, 0xb2, 0x3d, 0x95, 0x3a, 0x26, 0x9a, 0xee,
	0x35, 0x25, 0xc7, 0x4d, 0xe7, 0x63, 0x78, 0x87, 0x1d, 0x6c, 0x0d, 0x89, 0x4a, 0x1b, 0x13, 0x3b,
	0xac, 0x73, 0x21, 0xde, 0x61, 0x21, 0x2d, 0x61, 0x8c, 0xda, 0x2a, 0x61, 0x4c, 0x81, 0x31, 0x6a,
	0x4b, 0x18, 0xa3, 0x36, 0x5a, 0x8e, 0xae, 0x46, 0x75, 0x32, 0xae, 0x46, 0xc5, 0x56, 0x95, 0xf8,
	0xa4, 0xe7, 0x8a, 0xf2, 0x87, 0xd1, 0x37, 0x30, 0xc3, 0xda, 0x93, 0xe9, 0x93, 0x5e, 0x4f, 0xca,
	0xae, 0x62, 0x86, 0xf9, 0xa4, 0xe7, 0x86, 0x3f, 0x79, 0x67, 0xf8, 0x0c, 0x88, 0x99, 0xe7, 0x10,
	0xed, 0xa9, 0xf4, 0xce, 0xf4, 0x7c, 0x41, 0xde, 0x99, 0x00, 0xc5, 0xfd, 0xc6, 0x78, 0xea, 0x30,
	0xd4, 0x9e, 0x4e, 0xf7, 0xdb, 0x5d, 0x21, 0xc5, 0xfd, 0x26, 0xe5, 0xf9, 0x7c, 0x6f, 0x12, 0x86,
	0xb5, 0xaf, 0xa5, 0xcf, 0xf7, 0xeb, 0x44, 0xf4, 0x5b, 0xc8, 0x76, 0x8f, 0x4f, 0x94, 0xf7, 0xda,
	0x1f, 0x22, 0xa8, 0x89, 0xda, 0x55, 0xc1, 0xa8, 0x0a, 0x46, 0x55, 0x30, 0xaa, 0x82, 0x51, 0x15,
	0x8c, 0xaa, 0x60, 0x54, 0x05, 0xa3, 0x2a, 0x18, 0x55, 0xc1, 0xa8, 0xb2, 0x31, 0xaa, 0x86, 0x5a,
	0x32, 0x6c, 0x7f, 0x84, 0xa0, 0xb1, 0x11, 0xac, 0xd1, 0x15, 0x5c, 0xaa, 0xe0, 0x52, 0x05, 0x97,
	0x2a, 0xb8, 0x54, 0xc1, 0xa5, 0x0a, 0x2e, 0x55, 0x70, 0xa9, 0x82, 0x4b, 0x15, 0x5c, 0x2a, 0x03,
	0x97, 0x6a, 0x05, 0xdf, 0x4b, 0xb5, 0x3f, 0x3d, 0x09, 0x0d, 0xf5, 0xb5, 0xd2, 0xe1, 0xaf, 0xe1,
	0xbe, 0xe4, 0x7f, 0x29, 0x9a, 0x6f, 0xd9, 0x5b, 0x7d, 0x31, 0xfa, 0x9d, 0xf8, 0xb7, 0xde, 0x97,
	0x73, 0x7f, 0x9e, 0xa5, 0x3e, 0xf5, 0x9e, 0x91, 0x6a, 0xe3, 0x1f, 0x7c, 0x7f, 0x88, 0xfc, 0x0f,
	0xbe, 0x0b, 0x8e, 0x59, 0x70, 0xcc, 0x82, 0x63, 0x16, 0x1c, 0xb3, 0xe0, 0x98, 0x05, 0xc7, 0x2c,
	0x38, 0x66, 0xc1, 0x31, 0x0b, 0x8e, 0x99, 0xb5, 0x5e, 0xa7, 0xb6, 0xce, 0x55, 0xa1, 0xe9, 0x7f,
	0xc0, 0x1e, 0xd0, 0x91, 0xd2, 0x41, 0xe9, 0x48, 0xf9, 0x60, 0x74, 0xc4, 0xe7, 0x08, 0x95, 0xdc,
	0x1c, 0xc1, 0x7f, 0xd7, 0x55, 0x73, 0xbc, 0xeb, 0x22, 0xfc, 0xa7, 0x96, 0x9b, 0xff, 0x44, 0x48,
	0x49, 0x3d, 0x37, 0x29, 0x99, 0xe4, 0x08, 0x8d, 0x03, 0x73, 0x84, 0xc9, 0xf7, 0x75, 0xf3, 0xc0,
	0xef, 0xeb, 0xe8, 0x53, 0xdf, 0xca, 0xff, 0xd4, 0x77, 0xa7, 0x23, 0x7b, 0x27, 0x64, 0x34, 0xf9,
	0x7b, 0x14, 0x8a, 0x68, 0x2a, 0xa2, 0xe9, 0x20, 0xd1, 0xe4, 0x6f, 0x98, 0x69, 0xff, 0xb2, 0x0a,
	0x10, 0xee, 0x17, 0x39, 0xfc, 0x04, 0xf8, 0x22, 0x54, 0xee, 0x91, 0x3d, 0x15, 0x47, 0x29, 0xc9,
	0x4e, 0xf8, 0xdd, 0xf5, 0x3d, 0xb2, 0x87, 0xba, 0x13, 0xbb, 0xfe, 0xb2, 0x6d, 0x3b, 0x88, 0xef,
	0xf9, 0xd3, 0xa1, 0xe9, 0x92, 0x1d, 0xe2, 0x70, 0x33, 0xd6, 0xd2, 0x37, 0xd6, 0x85, 0x06, 0xea,
	0x29, 0x44, 0xec, 0xb3, 0xfb, 0x40, 0x0f, 0x4f, 0xe7, 0x05, 0x45, 0xc9, 0xb6, 0xf1, 0x33, 0x4c,
	0xe7, 0x05, 0x08, 0xdd, 0x04, 0x20, 0xbb, 0x63, 0xce, 0xb9, 0xb9, 0x35, 0x1b, 0xb9, 0x54, 0x44,
	0x90, 0xe8, 0x22, 0xd4, 0x76, 0xc5, 0xb7, 0xf4, 0xcd, 0x6c, 0xfb, 0x38, 0x85, 0x30, 0xba, 0x00,
	0x75, 0xd7, 0xf6, 0x9c, 0x01, 0x51, 0x41, 0x95, 0xfa, 0x59, 0xb7, 0x12, 0x6d, 0x7f, 0x52, 0x05,
	0x2d, 0x69, 0x57, 0xcd, 0xe1, 0x07, 0xd3, 0xab, 0xd0, 0x74, 0x99, 0x23, 0xf7, 0x6b, 0xed, 0x73,
	0x06, 0x8b, 0xea, 0x63, 0x4f, 0x89, 0x4f, 0xf8, 0x53, 0xdd, 0xfd, 0x2f, 0xec, 0x6e, 0x19, 0x47,
	0x0f, 0x98, 0x90, 0x61, 0x76, 0xfb, 0xc1, 0x37, 0x2c, 0xa5, 0x1c, 0x38, 0xd1, 0xfe, 0x20, 0x7a,
	0x22, 0x83, 0xca, 0x14, 0x4b, 0x99, 0x33, 0xc5, 0xff, 0x97, 0x23, 0x18, 0x3e, 0x2f, 0x43, 0x43,
	0x6d, 0xa8, 0x3a, 0xfc, 0x38, 0xba, 0x0a, 0x4d, 0x99, 0x24, 0xb0, 0x3c, 0x33, 0x53, 0x80, 0x41,
	0xd7, 0xa1, 0x39, 0xc2, 0xd6, 0xd0, 0xe3, 0x69, 0x73, 0x35, 0x3d, 0xbf, 0x5b, 0xa7, 0x26, 0xf1,
	0xf7, 0xf1, 0xe8, 0x01, 0x4a, 0x6e, 0x49, 0x19, 0xe7, 0xdf, 0x92, 0x32, 0x46, 0x0b, 0xe1, 0x66,
	0xea, 0x6c, 0xbb, 0xcf, 0x7d, 0xf1, 0xc5, 0x1b, 0x91, 0x13, 0x05, 0x5e, 0xcc, 0x79, 0xa2, 0x40,
	0x78, 0xa7, 0xf3, 0x9b, 0x32, 0xb4, 0xee, 0x60, 0x87, 0x67, 0x10, 0x3b, 0x47, 0x50, 0x51, 0xbd,
	0x0d, 0x75, 0x97, 0x61, 0xe6, 0xb9, 0xfb, 0xcd, 0x00, 0x41, 0x1f, 0x7b, 0x42, 0x3c, 0x36, 0x03,
	0x28, 0x15, 0xe8, 0x32, 0x54, 0x0c, 0xba, 0xa3, 0x7c, 0x98, 0x98, 0x35, 0x7d, 0x6b, 0x9b, 0x99,
	0xa3, 0xd0, 0x0b, 0x06, 0xdd, 0x59, 0xbc, 0x12, 0xb1, 0xe5, 0xf3, 0x59, 0x6d, 0x19, 0xf4, 0xa8,
	0xf3, 0xab, 0x1a, 0x3c, 0xbc, 0x81, 0x1d, 0x6c, 0x12, 0x46, 0x9c, 0xa3, 0x3c, 0xa0, 0xe1, 0x5c,
	0xec, 0x24, 0xb0, 0xf4, 0x73, 0x6b, 0xe4, 0xf1, 0x53, 0xb7, 0xa1, 0xe2, 0xb9, 0x7e, 0xd8, 0x27,
	0xee, 0xc5, 0x79, 0x75, 0x4c, 0x64, 0x31, 0x20, 0x18, 0xe5, 0xeb, 0x6e, 0x7c, 0x2f, 0x1b, 0xd7,
	0x82, 0x9e, 0x97, 0x1b, 0xbb, 0x6a, 0xd9, 0xf6, 0xde, 0x46, 0x77, 0xd7, 0xd7, 0xb3, 0xef, 0xae,
	0x5f, 0x85, 0x59, 0xc3, 0x1e, 0x78, 0x66, 0x70, 0x8e, 0x44, 0xa6, 0x37, 0xaf, 0x1e, 0x07, 0x05,
	0xe7, 0x4d, 0x35, 0x1f, 0xe8, 0xbc, 0xa9, 0xef, 0x87, 0x5b, 0xb3, 0x5a, 0x59, 0x27, 0xdf, 0x65,
	0x31, 0xf9, 0x2e, 0x65, 0x8d, 0xb2, 0xfb, 0xdc, 0x0b, 0xf6, 0x78, 0x2d, 0xbe, 0x1c, 0x89, 0xdb,
	0xcc, 0x1a, 0xef, 0x13, 0xa9, 0x9d, 0xcf, 0xab, 0x70, 0x5c, 0x27, 0x23, 0xcc, 0x88, 0xb1, 0xec,
	0x30, 0xba, 0x85, 0x07, 0xec, 0x28, 0xe6, 0x82, 0xe8, 0xa6, 0xca, 0xf9, 0x64, 0x53, 0xc6, 0xfa,
	0x99, 0xb0, 0xad, 0x72, 0x01, 0x1a, 0x06, 0x75, 0xc7, 0x23, 0xbc, 0x97, 0x91, 0x07, 0xf8, 0xe2,
	0x68, 0x11, 0x9a, 0x03, 0xaa, 0x62, 0x2b, 0xdb, 0x59, 0x22, 0x81, 0x3c, 0x7a, 0x8e, 0xbf, 0xc0,
	0xfd, 0x45, 0x84, 0x54, 0x4a, 0xc6, 0xe5, 0x44, 0x69, 0x4e, 0x85, 0xa5, 0x0a, 0xe3, 0x0c, 0x25,
	0x53, 0x3d, 0xc0, 0x20, 0x0f, 0x9a, 0x0e, 0x51, 0x34, 0xb0, 0xf9, 0x3f, 0x7a, 0xfb, 0xeb, 0xaa,
	0x01, 0x3d, 0x68, 0xea, 0x60, 0xc7, 0xf1, 0x4c, 0xb8, 0xad, 0xf3, 0x5e, 0x19, 0x9a, 0xbe, 0x6e,
	0xf4, 0x6c, 0x24, 0xd6, 0xd2, 0x76, 0xdd, 0xf3, 0x38, 0x3b, 0xa7, 0x8a, 0x3b, 0xe5, 0xfd, 0x8b,
	0x3b, 0xb2, 0xb4, 0x83, 0xba, 0x70, 0x8c, 0x9a, 0xe3, 0x11, 0x1d, 0x50, 0xd6, 0x97, 0x3b, 0x90,
	0x2b, 0x19, 0xb6, 0x42, 0xfa, 0x10, 0xb1, 0xf1, 0x30, 0x0f, 0x49, 0x78, 0x45, 0xc9, 0xc5, 0x49,
	0xc2, 0xe2, 0x4b, 0xc2, 0x6a, 0x15, 0x61, 0xb5, 0xdc, 0xd6, 0xef, 0x7c, 0x50, 0x87, 0x13, 0x77,
	0x1d, 0x3a, 0x1c, 0x1e, 0xed, 0x1b, 0x66, 0x25, 0xf6, 0x8c, 0x26, 0x16, 0xe5, 0x55, 0x4f, 0x13,
	0x9e, 0xcd, 0x2b, 0x00, 0x64, 0x87, 0x58, 0xac, 0x9f, 0xfd, 0xd4, 0x44, 0xbd, 0x25, 0x10, 0xa2,
	0x98, 0xfc, 0x16, 0xcc, 0x48, 0xb8, 0xaa, 0x0e, 0xca, 0x87, 0xf4, 0xd2, 0x3e, 0x7d, 0x89, 0xf2,
	0x74, 0x8e, 0x96, 0x45, 0xc3, 0x80, 0x91, 0x4f, 0x93, 0xf0, 0xa6, 0x48, 0xed, 0x44, 0x0b, 0xa2,
	0x08, 0x5a, 0x4f, 0x1f, 0xeb, 0xc4, 0x39, 0x53, 0xaa, 0xa7, 0xfc, 0x6e, 0xfb, 0xc3, 0x32, 0x4c,
	0x47, 0x1a, 0x8b, 0x54, 0x34, 0x4b, 0x39, 0x2b, 0x9a, 0x87, 0x42, 0xf4, 0x7b, 0x83, 0x6d, 0x62,
	0x78, 0xa3, 0x89, 0x9a, 0xb0, 0x5f, 0xb4, 0xaa, 0x1c, 0xb4, 0x68, 0x55, 0xcd, 0x5f, 0xb4, 0xea,
	0x1e, 0x8b, 0xfb, 0xf8, 0x60, 0x6c, 0xf7, 0x0b, 0x9e, 0xef, 0xfc, 0xb4, 0x0a, 0x33, 0xaf, 0xbb,
	0xe2, 0xd9, 0xb4, 0x18, 0xd9, 0x65, 0x47, 0xb2, 0x71, 0x3e, 0xb2, 0x26, 0xbe, 0xcf, 0x4a, 0xd4,
	0xc4, 0x4e, 0xf0, 0x3b, 0xf1, 0x0f, 0x08, 0x9e, 0x4d, 0x9c, 0xbe, 0x22, 0x23, 0x4c, 0xfb, 0x66,
	0xe0, 0x4f, 0xc1, 0x21, 0x71, 0xf7, 0x5b, 0x77, 0x2b, 0x3d, 0xf0, 0xba, 0x5b, 0xb4, 0xf4, 0x55,
	0x7e, 0x90, 0xe5, 0x93, 0x4a, 0x9e, 0xe5, 0x93, 0xf0, 0xd8, 0xb8, 0xeb, 0x91, 0xa0, 0xb9, 0x98,
	0x35, 0x68, 0xa2, 0xc6, 0xeb, 0x9e, 0x81, 0xf6, 0xc0, 0x36, 0x13, 0xda, 0xdd, 0x28, 0x6d, 0xd6,
	0xc5, 0xc5, 0x85, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x76, 0x45, 0xcc, 0x35, 0xac, 0x59, 0x00,
	0x00,
}
